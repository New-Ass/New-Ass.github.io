<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL数据库学习（1）-- 初识数据库</title>
      <link href="/2022/11/22/mysql-shu-ju-ku-xue-xi-1-chu-shi-shu-ju-ku/"/>
      <url>/2022/11/22/mysql-shu-ju-ku-xue-xi-1-chu-shi-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="01-初识数据库"><a href="#01-初识数据库" class="headerlink" title="01-初识数据库"></a>01-初识数据库</h1><h2 id="存储数据的演变流程"><a href="#存储数据的演变流程" class="headerlink" title="存储数据的演变流程"></a>存储数据的演变流程</h2><p>目前所知并且我们能够实现的存储数据的方式有两种，一种是将数据存储到文件中（txt 文件或是 excel 文件），一种是类似于软件开发目录的情况，将数据保存到固定的文件夹位置，但实际上这两种存储方式存在一定的弊端。</p><h3 id="存储至文件的问题"><a href="#存储至文件的问题" class="headerlink" title="存储至文件的问题"></a>存储至文件的问题</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""将数据存储到随机的文件中，由于缺少标准，会造成存储数据时文件内容的千差万别，甚至影响他人对于该存储文件的使用和阅读"""</span></code></pre><h3 id="软件开发目录规范的问题"><a href="#软件开发目录规范的问题" class="headerlink" title="软件开发目录规范的问题"></a>软件开发目录规范的问题</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""bin     -- 启动文件conf    -- 配置文件core    -- 后端核心代码log     -- 日志文件lib     -- 公共方法db      -- 数据readme  -- 使用说明"""</span>软件开发规范目录虽然限制了存储数据的具体位置，但这样的数据只存储在本机中，就像是没有云存档的单机游戏一样，他人想要访问比较困难，或者说需要使用自己的电脑才能访问。</code></pre><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>对于文件存储标准不统一和软件开发目录多人操作困难的问题，提出了<strong>将数据按一种格式同意保存，并且允许所有人在同一个地方操作数据</strong>的解决方案——这也就是数据库的作用。</p><h2 id="数据库的本质"><a href="#数据库的本质" class="headerlink" title="数据库的本质"></a>数据库的本质</h2><p>数据库的<strong>本质就是一款与网络通信的应用程序</strong>——用户输入命令，和数据，服务端接收命令和数据，并根据命令在服务端实现对数据的操作。</p><h2 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h2><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""关系型数据库    MySQL，oracle，db2，access，sql server非关系型数据库    redis，mongdb，mencache"""</span><span class="token comment" spellcheck="true"># 关系型</span>    <span class="token number">1</span><span class="token punctuation">.</span> 数据之间批次有关系或者约束    <span class="token number">2</span><span class="token punctuation">.</span> 存储数据的表现形式通常是以表格存储。每个字段还会有存储类型的限制，比如说姓名只能存在字符串    <span class="token comment" spellcheck="true"># 非关系型</span>    <span class="token number">1</span><span class="token punctuation">.</span> 存储数据通常是以 k<span class="token punctuation">,</span>v 键值对的形式存储</code></pre><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""人格基于网络通信的应用程序底层都是 socket- 服务端    - 基于 socket 实现通信    - 收发消息    - 客户端    - 基于socket 实现通信    - 收发消息"""</span>MySQL 不单支持 MySQL 自己的客户端 app 还支持 其他变成语言来充当客户端操作，同时为了解决不同语言充当客户端操作的沟通障碍，<span class="token comment" spellcheck="true"># MySQL 采用统一的语言（SQL 语言）</span></code></pre><h3 id="MySQL重要概念"><a href="#MySQL重要概念" class="headerlink" title="MySQL重要概念"></a>MySQL重要概念</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""库 --- 相当于 文件夹表 --- 相当于 文件记录 --- 相当于 文件内一行行的数据表头 --- 表格的第一行字段表单 --- 表头外的数据"""</span></code></pre><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><p>官网安装：<a href="https://www.mysql.com/">MySQL</a></p><h3 id="MySQL服务端和客户端"><a href="#MySQL服务端和客户端" class="headerlink" title="MySQL服务端和客户端"></a>MySQL服务端和客户端</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""服务端mysqld.exe客户端mysql.exe"""</span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""在前期配置MySQL的时候尽量在 cmd 终端以管理员的身份运行window+r 进入的是普通用户终端，有一些命令无法执行搜索 cmd 右键，以管理员身份运行"""</span></code></pre><p><img src="https://img-blog.csdnimg.cn/19dd4f3faea94b84853add538798c168.gif"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul><li>管理员运行cmd，先切换到 mysql 所在的 bin 目录下，然后输入 mysqld 启动 服务端 即可</li><li>然后保留原来的 cmd 窗口，重新打开一个</li></ul><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""常见软件的默认端口号    MySQL  3306    redis  6379    mongodb 27017    django  8000    flask   5000    ...    MySQL 第一次以管理员身份进入是没有密码的，直接回车即可进入相关目录 mysql -h 127.0.0.1 -P 3306 -uroot -p"""</span></code></pre><h3 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h3><p><img src="https://img-blog.csdnimg.cn/74daeb80df884f1c9fe55b34f0a58f24.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易界面爬虫小项目</title>
      <link href="/2022/11/22/jian-yi-jie-mian-pa-chong-xiao-xiang-mu/"/>
      <url>/2022/11/22/jian-yi-jie-mian-pa-chong-xiao-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><p><img src="https://img-blog.csdnimg.cn/6c4bfebab4934237ab85352a751b1ece.png"></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>本来是要再做一个界面在运行时显示正在爬取哪个内容</li><li>log 文件本来是要做一个日志文件，不过其实是单机版本其实好像没什么必要（实际上是嫌太麻烦了）</li></ol><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><h2 id="lib-文件夹下-main-py-文件"><a href="#lib-文件夹下-main-py-文件" class="headerlink" title="lib 文件夹下 main.py 文件 "></a><code>lib 文件夹下 main.py 文件 </code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>syspath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 添加到环境变量</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> bin<span class="token punctuation">.</span>JingDongProject <span class="token keyword">import</span> jing_dong_project    jing_dong_project<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="bin-文件夹下-JingDongProject-py-文件"><a href="#bin-文件夹下-JingDongProject-py-文件" class="headerlink" title="bin 文件夹下 JingDongProject.py 文件"></a><code>bin 文件夹下 JingDongProject.py 文件</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">from</span> core<span class="token punctuation">.</span>UI<span class="token punctuation">.</span>Start <span class="token keyword">import</span> Ui_Dialog<span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span>Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 实例化初始界面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setup_ui</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">jing_dong_project</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        window <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="core-文件夹下-Spider-文件夹下-spider-py-文件"><a href="#core-文件夹下-Spider-文件夹下-spider-py-文件" class="headerlink" title="core 文件夹下 Spider 文件夹下 spider.py 文件"></a><code>core 文件夹下 Spider 文件夹下 spider.py 文件</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>edge<span class="token punctuation">.</span>EdgeOptions <span class="token keyword">import</span> EdgeOptions<span class="token keyword">from</span> conf <span class="token keyword">import</span> Settings<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Spider</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> goods_name<span class="token punctuation">,</span> paixu<span class="token punctuation">,</span> goods_page<span class="token punctuation">,</span> comment_page<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> goods_name        self<span class="token punctuation">.</span>paixu <span class="token operator">=</span> paixu        self<span class="token punctuation">.</span>goods_page <span class="token operator">=</span> goods_page        self<span class="token punctuation">.</span>comment_page <span class="token operator">=</span> comment_page        self<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>start_web<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>search_goods<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Paixu<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>goods_message<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start_web</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化浏览器"""</span>        <span class="token comment" spellcheck="true"># 1.创建Edge浏览器对象，这会在电脑上在打开一个浏览器窗口</span>        options <span class="token operator">=</span> EdgeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>        options<span class="token punctuation">.</span>add_arguments<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token string">"--headless"</span><span class="token punctuation">,</span> r<span class="token string">"--disable-gpu"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 无头浏览器</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>capabilities<span class="token operator">=</span>options<span class="token punctuation">.</span>to_capabilities<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.driver = webdriver.Edge()</span>        <span class="token comment" spellcheck="true"># 2.通过浏览器向服务器发送URL请求</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">page_read</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""网页源码解析"""</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source        <span class="token comment" spellcheck="true"># xpath 解析</span>        self<span class="token punctuation">.</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">search_goods</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""输入商品名称，并点击搜索"""</span>        name_input <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>        name_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击搜索</span>        click <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search"]/div/div[2]/button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> click<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">goods_message</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取商品信息"""</span>        <span class="token triple-quoted-string string">"""        商品页翻页循环            每次循环获取商品价格、名称等信息（这也是一个循环，因为一页有多个商品）                获取一个商品信息后（即一个循环后）                    进入商品详情页获取评论，评论翻页也需要循环        """</span>        <span class="token comment" spellcheck="true"># 排序方式</span>        page <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> page <span class="token operator">&lt;=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_page<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 滚动加载该页面所有信息</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>            sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>goods_price_name<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>            page_list_length <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[1]/a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 页数条的长度，最后一个是下一页</span>            <span class="token comment" spellcheck="true"># 点击下一页</span>            next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[1]/a[{}]'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>page_list_length<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> next_page<span class="token punctuation">)</span>            page <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">goods_price_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""爬取商品信息"""</span>        <span class="token comment" spellcheck="true"># 获取商品价格</span>        self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取该页商品数量</span>        count <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> count <span class="token operator">&lt;=</span> length<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[3]/strong/i/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>goods_price <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[3]/strong/i/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[2]/strong/i/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>goods_price <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[2]/strong/i/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_price<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取商品名称</span>            <span class="token comment" spellcheck="true"># //*[@id="J_goodsList"]/ul/li[1]/div/div[4]/a/em</span>            <span class="token comment" spellcheck="true"># //*[@id="J_goodsList"]/ul/li[1]/div/div[3]/a/em</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[4]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[4]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[3]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[3]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>            num <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>goods_name<span class="token punctuation">:</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                num <span class="token operator">+=</span> i            self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> num            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 进入商品详情页面</span>            xpath <span class="token operator">=</span> <span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[1]/a'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span>            good_detail <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> good_detail<span class="token punctuation">)</span>            sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>comment<span class="token punctuation">(</span><span class="token punctuation">)</span>            count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">comment</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取商品评论</span>        self<span class="token punctuation">.</span>new_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 滑到底部，等待评论加载完成</span>        comment_box <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="detail"]/div[1]/ul/li[5]'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> comment_box<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>comment_page<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[@class="comment-item"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 评论过少或没有评论，直接退出循环</span>                <span class="token keyword">break</span>            comment_counter <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[@class="comment-item"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">while</span> count <span class="token operator">&lt;=</span> comment_counter<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>content<span class="token punctuation">(</span>count<span class="token punctuation">)</span>                count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 点击下一页</span>            page_list_length <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 页数条的长度，最后一个是下一页</span>            <span class="token comment" spellcheck="true"># 点击下一页</span>            <span class="token keyword">if</span> page_list_length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>                    <span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a[{}]'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>page_list_length<span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> next_page<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>close_window<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        self<span class="token punctuation">.</span>close_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">new_window</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取窗口,返回为一个列表</span>        handles <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>window_handles        <span class="token comment" spellcheck="true"># 最后一个是新打开的窗口，跳转到这个窗口</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">close_window</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 关闭新打开的窗口</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        handles <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>window_handles        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用户名</span>        username <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[1]/div[1]/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 是否是会员</span>        huiyuan <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[1]/div[2]/a/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>huiyuan<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            huiyuan <span class="token operator">=</span> <span class="token string">"None"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            huiyuan <span class="token operator">=</span> huiyuan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 评价内容</span>        content <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[2]/p/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 星级</span>        star <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[2]/div[1]/@class'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(star)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>DOWNLOAD_PATH<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>goods_price <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> huiyuan <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> star <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Paixu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"综合"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"销量"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token string">"评论数"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token string">"新品"</span><span class="token punctuation">:</span> <span class="token number">4</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>paixu<span class="token punctuation">)</span>        xpath <span class="token operator">=</span> <span class="token string">'//*[@id="J_filter"]/div[1]/div[1]/a[{}]'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        sales_count <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> sales_count<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span></code></pre><h2 id="UI-文件夹下-Start-py-文件"><a href="#UI-文件夹下-Start-py-文件" class="headerlink" title="UI 文件夹下 Start.py 文件"></a><code>UI 文件夹下 Start.py 文件</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">421</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_select<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用户选择界面</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:22pt; font-weight:600;\">\u5546\u54c1\u8bc4\u8bba\u722c\u53d6&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u5f00\u59cb\u4f7f\u7528"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">user_select</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> core<span class="token punctuation">.</span>UI<span class="token punctuation">.</span>User_Select <span class="token keyword">import</span> user_selelct_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> user_selelct_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="UI-文件夹下-User-Select-py"><a href="#UI-文件夹下-User-Select-py" class="headerlink" title="UI 文件夹下 User_Select.py"></a><code>UI 文件夹下 User_Select.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">619</span><span class="token punctuation">,</span> <span class="token number">464</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">490</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>run<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">391</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2 <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">271</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox <span class="token operator">=</span> QComboBox<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"comboBox"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_3"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_3 <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit_3"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">341</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_4"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_4 <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_4<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit_4"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_4<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">390</span><span class="token punctuation">,</span> <span class="token number">341</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u5f00\u59cb\u722c\u53d6"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:24pt; font-weight:600;\">\u5546\u54c1\u8bc4\u8bba\u722c\u53d6&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8981\u722c\u53d6\u7684\u5546\u54c1\u540d\u79f0"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u9009\u62e9\u9875\u9762\u6392\u5e8f\u65b9\u5f0f"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setItemText<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u7efc\u5408"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setItemText<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u9500\u91cf"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setItemText<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8bc4\u8bba\u6570"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setItemText<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u65b0\u54c1"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8981\u722c\u53d6\u7684\u5546\u54c1\u9875\u6570"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\u6700\u597d\u4fdd\u8bc1\u8be5\u5546\u54c1\u9875\u6570 \u5927\u4e8e\u7b49\u4e8e \u586b\u5199\u7684\u9875\u6570&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8981\u722c\u53d6\u7684\u5546\u54c1\u8bc4\u8bba\u6570\u9875\u6570"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_4<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\u6700\u597d\u4fdd\u8bc1\u8be5\u5546\u54c1\u9875\u6570 \u5927\u4e8e\u7b49\u4e8e \u586b\u5199\u7684\u9875\u6570&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要爬取的商品名称</span>        paixu <span class="token operator">=</span> self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>currentText<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 页面商品的排序方式</span>        good_page <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要爬取的商品页数</span>        comment_page <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit_4<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要爬取的商品评论数页数</span>        <span class="token keyword">from</span> core<span class="token punctuation">.</span>UI<span class="token punctuation">.</span>Wait <span class="token keyword">import</span> user_wait_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> user_wait_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">from</span> core<span class="token punctuation">.</span>Spider<span class="token punctuation">.</span>spider <span class="token keyword">import</span> Spider        Spider<span class="token punctuation">(</span>name<span class="token punctuation">,</span> paixu<span class="token punctuation">,</span> good_page<span class="token punctuation">,</span> comment_page<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">user_selelct_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开用户选择页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h2 id="UI-文件夹下的-Wait-py"><a href="#UI-文件夹下的-Wait-py" class="headerlink" title="UI 文件夹下的 Wait.py "></a><code>UI 文件夹下的 Wait.py </code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">614</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2 <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:22pt; font-weight:600;\">\u6b63\u5728\u722c\u53d6\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span><span class="token keyword">class</span> <span class="token class-name">user_wait_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开等待页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h2 id="conf-文件夹下的-Settings-py"><a href="#conf-文件夹下的-Settings-py" class="headerlink" title="conf 文件夹下的 Settings.py"></a><code>conf 文件夹下的 Settings.py</code></h2><pre class=" language-python"><code class="language-python">URL <span class="token operator">=</span> <span class="token string">"https://www.jd.com/"</span><span class="token comment" spellcheck="true"># URL = "https://search.jd.com/Search?keyword=%E8%A1%80%E6%BA%90&amp;wq=%E8%A1%80%E6%BA%90&amp;pvid=068dc4b95f284265bec11485d5d227ab&amp;page=9&amp;s=241&amp;click=0"</span>SLEEP_TIME <span class="token operator">=</span> <span class="token number">5</span>DOWNLOAD_PATH <span class="token operator">=</span> r<span class="token string">'C:\Users\ASUS\Desktop\code\pyqt5_JingDong\download\download.txt'</span>EXCEL_PATH <span class="token operator">=</span> <span class="token string">"C:\Users\ASUS\Desktop\code\pyqt5_JingDong\download\data.xls"</span></code></pre><h2 id="download-文件夹下的-ToExcel-py-文件"><a href="#download-文件夹下的-ToExcel-py-文件" class="headerlink" title="download 文件夹下的 ToExcel.py 文件"></a><code>download 文件夹下的 ToExcel.py 文件</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>syspath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> conf<span class="token punctuation">.</span>Settings <span class="token keyword">import</span> DOWNLOAD_PATH<span class="token punctuation">,</span>EXCEL_PATH    <span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook    book <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>active    title <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"goods_name"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"huiyuan"</span><span class="token punctuation">,</span> <span class="token string">"star"</span><span class="token punctuation">,</span> <span class="token string">"comment content"</span><span class="token punctuation">)</span>    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>DOWNLOAD_PATH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>DOWNLOAD_PATH<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                line_list <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># self.goods_name + | + price + "|" + username + "|" + huiyuan + "|" + star + "|" + content</span>                sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line_list<span class="token punctuation">)</span>        book<span class="token punctuation">.</span>save<span class="token punctuation">(</span>EXCEL_PATH<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"can't find the DOANLOAD file!!!"</span><span class="token punctuation">)</span></code></pre><h1 id="运行演示"><a href="#运行演示" class="headerlink" title="运行演示"></a>运行演示</h1><p><img src="https://img-blog.csdnimg.cn/e4b2607cb07341888663897463453f7e.gif"><br><img src="https://img-blog.csdnimg.cn/bfda9eb25f1f4445ad14c1d2764deae1.gif"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>代码已经上传至 github 项目<br><a href="https://github.com/New-Ass/JingDongSpider/tree/master">JingDongSpider</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> pyqt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫小项目 —— 京东商品评价内容爬取</title>
      <link href="/2022/11/22/pa-chong-xiao-xiang-mu-jing-dong-shang-pin-ping-jie-nei-rong-pa-qu/"/>
      <url>/2022/11/22/pa-chong-xiao-xiang-mu-jing-dong-shang-pin-ping-jie-nei-rong-pa-qu/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫小项目-——-京东商品评价内容爬取"><a href="#爬虫小项目-——-京东商品评价内容爬取" class="headerlink" title="爬虫小项目 —— 京东商品评价内容爬取"></a>爬虫小项目 —— 京东商品评价内容爬取</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>会写这么一个类似“小项目”的程序是因为在前年（去年？）的时候，一位老师需要用爬虫爬取京东某类商品的用户评论数据——不知道为什么会找学生写这种程序，淘宝找一个或许都比我靠谱吧？<br>虽然我最后写出了一个勉强可运行的程序，也爬取到了一些评论数据，但我一直认为那位老师只是不知道怎么说我写的东西不行，毕竟在隔了一两年的今天我再看这段代码，其实写的很差，封装性基本没有，适应性差的要命，所以我才会突然说再写一遍，但当然结果也就是比之前的代码好上一点。</p><h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><h3 id="前提准备-1"><a href="#前提准备-1" class="headerlink" title="前提准备"></a><code>前提准备</code></h3><p><strong>注意</strong>：因为谷歌浏览器的升级以及驱动器相关版本不对应，所以使用的是 edge 浏览器的 自动测试，并且使用无头浏览器，但是其实 <code>selenium.webdriver.edge.EdgeOptions</code>中并没有<code>EdgeOptions</code>模块，所以需要自己写，这是我百度使用的代码<br>我电脑的文件目录如下：<code>C:\Users\ASUS\AppData\Local\Programs\Python\Python39\Lib\site-packages\selenium\webdriver\edge</code><br><img src="https://img-blog.csdnimg.cn/e37f77c50a714b16ae1a0f3ca0d1bcc7.png"><br>文件代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>desired_capabilities <span class="token keyword">import</span> DesiredCapabilities<span class="token keyword">class</span> <span class="token class-name">EdgeOptions</span><span class="token punctuation">:</span>    KEY <span class="token operator">=</span> <span class="token string">"ms:edgeOptions"</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_arguments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>_experimental_options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>_caps <span class="token operator">=</span> DesiredCapabilities<span class="token punctuation">.</span>EDGE<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">arguments</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_arguments    @property    <span class="token keyword">def</span> <span class="token function">experimental_options</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_experimental_options    <span class="token keyword">def</span> <span class="token function">add_argument</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> argument<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        添加浏览器参数        :param argument: 启动参数        """</span>        <span class="token keyword">if</span> argument<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>_is_infobars<span class="token punctuation">(</span>argument<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_enable_infobars<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_arguments<span class="token punctuation">.</span>append<span class="token punctuation">(</span>argument<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"argument参数不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_arguments</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> list <span class="token operator">or</span> tuple<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        同时添加多个浏览器参数        :param arguments: 启动参数集        """</span>        <span class="token keyword">if</span> arguments<span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> arg <span class="token keyword">in</span> arguments<span class="token punctuation">:</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_is_infobars<span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>_enable_infobars<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>_arguments<span class="token punctuation">.</span>append<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"argument参数不能为空"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">_is_infobars</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> string <span class="token operator">==</span> <span class="token string">"--disable-infobars"</span>    <span class="token keyword">def</span> <span class="token function">_enable_infobars</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        启用'禁用浏览器正在被自动化程序控制的提示'启动参数        """</span>        self<span class="token punctuation">.</span>_experimental_options<span class="token punctuation">[</span><span class="token string">"excludeSwitches"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"enable-automation"</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">to_capabilities</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        使用已设置的所有选项创建功能        :return: 返回包含所有内容的字典        """</span>        caps <span class="token operator">=</span> self<span class="token punctuation">.</span>_caps        edge_options <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"extensions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"args"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>arguments        <span class="token punctuation">}</span>        edge_options<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>experimental_options<span class="token punctuation">)</span>        caps<span class="token punctuation">[</span>self<span class="token punctuation">.</span>KEY<span class="token punctuation">]</span> <span class="token operator">=</span> edge_options        <span class="token keyword">return</span> caps</code></pre><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p><img src="https://img-blog.csdnimg.cn/23dc9dd0f49748fea379dcda8add619e.png"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="lib文件夹下-main-py"><a href="#lib文件夹下-main-py" class="headerlink" title="lib文件夹下 main.py"></a><code>lib文件夹下 main.py</code></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sysFilePath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>FilePath<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将 JingDongProject 的路径置入环境变量</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> bin <span class="token keyword">import</span> Spider_JingDong    Spider_JingDong<span class="token punctuation">.</span>spride<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="bin文件夹下-Spider-JingDong-py"><a href="#bin文件夹下-Spider-JingDong-py" class="headerlink" title="bin文件夹下 Spider_JingDong.py "></a><code>bin文件夹下 Spider_JingDong.py </code></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> core <span class="token keyword">import</span> Really_Sprider<span class="token keyword">class</span> <span class="token class-name">spride</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}Running{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        Really_Sprider<span class="token punctuation">.</span>really_sprider<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="conf文件夹下-Setting-py"><a href="#conf文件夹下-Setting-py" class="headerlink" title="conf文件夹下 Setting.py "></a><code>conf文件夹下 Setting.py </code></h2><pre class=" language-python"><code class="language-python">URL <span class="token operator">=</span> <span class="token string">"https://www.jd.com/"</span><span class="token comment" spellcheck="true"># 休眠等待的问题，有时候要等待网页加载或者说怕被检验，但很有可能是我网速的问题</span>SLEEPTIME <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 一开始下载的商品评论 txt 文件默认下载地址</span>DOWNLOAD_PATH <span class="token operator">=</span> r<span class="token string">'C:\Users\ASUS\Desktop\code\JingDongProject\download\download.txt'</span><span class="token comment" spellcheck="true"># 将下载的 txt文件 内容存储到 xlsx 文件中的下载地址</span>EXCEL_PATH <span class="token operator">=</span> r<span class="token string">'C:\Users\ASUS\Desktop\code\JingDongProject\download\data.xlsx'</span><span class="token comment" spellcheck="true"># 需要爬取的商品页数</span>PAGE <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 每页搜索的商品数（最多到61，京东一页商品最多60个，因为使用 for 循环所有选择 60+1），最好保证爬取页数页面所有的商品数量 >= PURE_PAGE_NUM，否则会超出索引</span>PURE_PAGE_NUM <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># 评论页数</span>GOODS_PAGE <span class="token operator">=</span> <span class="token number">2</span></code></pre><h3 id="core文件夹下-really-spider-py-文件"><a href="#core文件夹下-really-spider-py-文件" class="headerlink" title="core文件夹下 really_spider.py 文件"></a><code>core文件夹下 really_spider.py 文件</code></h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用的是 edge 浏览器的 自动测试</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>edge<span class="token punctuation">.</span>EdgeOptions <span class="token keyword">import</span> EdgeOptions<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">from</span> conf <span class="token keyword">import</span> Setting<span class="token keyword">class</span> <span class="token class-name">really_sprider</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>search_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>search_option<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">search_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 输入商品名称</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入您想要搜素的商品名称："</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(name)</span>    <span class="token keyword">def</span> <span class="token function">search_option</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 选择商品排序方式</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            tip <span class="token operator">=</span> <span class="token triple-quoted-string string">"""---------------------------------------------            选择商品排序方式（输入数字）---------------------------------------------                1.    综合                2.    销量                3.    评论数----------------------------------------------            """</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"选择商品排序方式（输入数字）:"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>num<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">or</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            num <span class="token operator">=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">def</span> <span class="token function">start_webdriver</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 启动浏览器</span>        <span class="token comment" spellcheck="true"># 1.创建Edge浏览器对象，这会在电脑上在打开一个浏览器窗口</span>        options <span class="token operator">=</span> EdgeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>        options<span class="token punctuation">.</span>add_arguments<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token string">"--headless"</span><span class="token punctuation">,</span> r<span class="token string">"--disable-gpu"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 无头浏览器</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>capabilities<span class="token operator">=</span>options<span class="token punctuation">.</span>to_capabilities<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.driver = webdriver.Edge()</span>        <span class="token comment" spellcheck="true"># 2.通过浏览器向服务器发送URL请求</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>Setting<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 点击搜索之后的页面</span>        self<span class="token punctuation">.</span>click_search<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>line_way<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        page <span class="token operator">=</span> int<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_topPage"]/span/i/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> min<span class="token punctuation">(</span>page<span class="token punctuation">,</span> Setting<span class="token punctuation">.</span>PAGE<span class="token punctuation">)</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Setting<span class="token punctuation">.</span>PAGE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>click_good<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 点击商品进入商品详情页</span>            <span class="token comment" spellcheck="true"># 点击下一页</span>            next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[1]/a[9]'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> next_page<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">click_search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 输入商品名称并点击搜索</span>        self<span class="token punctuation">.</span>start_webdriver<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输入商品名称</span>        name_input <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>        name_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击搜索</span>        click <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search"]/div/div[2]/button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> click<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 滚动加载该页面所有商品</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">line_way</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 点击排序方式</span>        xpath <span class="token operator">=</span> <span class="token string">'//*[@id="J_filter"]/div[1]/div[1]/a[{}]'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span>        sales_count <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> sales_count<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">click_good</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 点击进入商品详情页</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Setting<span class="token punctuation">.</span>PURE_PAGE_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 获取商品名称</span>            <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>            page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source            <span class="token comment" spellcheck="true"># xpath 解析</span>            tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[4]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>            num <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>goods_name<span class="token punctuation">:</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                num <span class="token operator">+=</span> i            self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> num            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 进入商品详情页面</span>            xpath <span class="token operator">=</span> <span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[1]/a'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>            good_detail <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> good_detail<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 商品评价下载</span>            self<span class="token punctuation">.</span>comment_download<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">comment_download</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 商品评价下载</span>        self<span class="token punctuation">.</span>new_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 滑到底部，等待评论加载完成</span>        comment_box <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="detail"]/div[1]/ul/li[5]'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> comment_box<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        page <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment"]/div[2]/div[2]/div[1]/ul/li[1]/a/em/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token string">"+"</span> <span class="token keyword">in</span> page <span class="token operator">and</span> <span class="token string">"万"</span> <span class="token keyword">in</span> page<span class="token punctuation">:</span>            page <span class="token operator">=</span> Setting<span class="token punctuation">.</span>GOODS_PAGE            <span class="token keyword">for</span> p <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> page <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>content<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 点击下一页</span>                <span class="token keyword">if</span> p <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a[7]'</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> p <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>                    next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a[8]'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a[8]'</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> next_page<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>close_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">new_window</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取窗口,返回为一个列表</span>        handles <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>window_handles        <span class="token comment" spellcheck="true"># 最后一个是新打开的窗口，跳转到这个窗口</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">close_window</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 关闭新打开的窗口</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        handles <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>window_handles        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 获取评价，包括商品名称、用户名、是否是会员，评分星级，评价文字内容</span>        <span class="token triple-quoted-string string">"""        xpath 解析        //*[@id="comment-0"]/div[1]        """</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用户名</span>        username <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[1]/div[1]/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 是否是会员</span>        huiyuan <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[1]/div[2]/a/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>huiyuan<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            huiyuan <span class="token operator">=</span> <span class="token string">"None"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            huiyuan <span class="token operator">=</span> huiyuan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 评价内容</span>        content <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[2]/p/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 星级</span>        star <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[2]/div[1]/@class'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(star)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>Setting<span class="token punctuation">.</span>DOWNLOAD_PATH<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> huiyuan <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> star <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        sleep<span class="token punctuation">(</span>Setting<span class="token punctuation">.</span>SLEEPTIME<span class="token punctuation">)</span></code></pre><h3 id="download-文件夹下-ToExcel-py"><a href="#download-文件夹下-ToExcel-py" class="headerlink" title="download 文件夹下 ToExcel.py"></a><code>download 文件夹下 ToExcel.py</code></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>syspath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> conf<span class="token punctuation">.</span>Setting <span class="token keyword">import</span> DOWNLOAD_PATH<span class="token punctuation">,</span>EXCEL_PATH    <span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook    book <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>active    title <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"goods_name"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"huiyuan"</span><span class="token punctuation">,</span> <span class="token string">"star"</span><span class="token punctuation">,</span> <span class="token string">"comment content"</span><span class="token punctuation">)</span>    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>DOWNLOAD_PATH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>DOWNLOAD_PATH<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                line_list <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># self.goods_name + "|" + username + "|" + huiyuan + "|" + star + "|" + content</span>                sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line_list<span class="token punctuation">)</span>        book<span class="token punctuation">.</span>save<span class="token punctuation">(</span>EXCEL_PATH<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"can't find the DOANLOAD file!!!"</span><span class="token punctuation">)</span></code></pre><h2 id="注意事项或者说是-Bug"><a href="#注意事项或者说是-Bug" class="headerlink" title="注意事项或者说是 Bug"></a>注意事项或者说是 Bug</h2><ol><li>所要爬取商品页数一定是存在的，不能超过该商品页面的总页数</li><li>保证每页要爬取的商品数量都存在，即：需要在该页面爬取5个商品，但实际上该页面只有3个商品</li><li>因为某些原因（当时没有找到解决方法，现在知道了不想在上面直接改了），目前爬取的商品评价是过万的商品的评价，所以未过万的商品评论并不会下载</li><li>商品名称的问题，后来才发现京东上一些商品是有缩略图的，如下图我圈起来的部分；所以一些商品在爬取过程中是没有名字下载的，因为我参考的姓名定位是有缩略图的名字，所以无缩略图的商品爬取过程中是没有名字的（当时没有找到解决方法，现在知道了不想在上面直接改了）</li></ol><h2 id="一个小坑"><a href="#一个小坑" class="headerlink" title="一个小坑"></a>一个小坑</h2><p>因为还存在这些小问题，并且一些问题已经找到解决办法了，所以在最近国庆前后会写一个修改版的代码，应该会加上简单的 PyQt5 界面。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><img src="https://img-blog.csdnimg.cn/f61070993fd7438db7a0494c34cd2a9f.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十 —— scrapy 框架关于下载中间件的补充</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-guan-yu-xia-zai-zhong-jian-jian-de-bu-chong/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-guan-yu-xia-zai-zhong-jian-jian-de-bu-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="下载中间件拦截请求"><a href="#下载中间件拦截请求" class="headerlink" title="下载中间件拦截请求"></a>下载中间件拦截请求</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在《行百里者半九十 —— scrapy 框架（6）》一文中我们介绍了下载中间件的作用，并演示了其中拦截响应的代码实现。</p><p>现在我们来试着实现拦截请求的代码实现，也就是UA池和代理池的实现。因为免费 IP 总是失效，所以在这里只提供中间件部分的代码实现，不提供运行结果。</p><p>正因为此，代码可能有所疏漏，还望各位看官海涵。</p><h2 id="中间件部分代码实现"><a href="#中间件部分代码实现" class="headerlink" title="中间件部分代码实现"></a>中间件部分代码实现</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your spider middleware</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> is_item<span class="token punctuation">,</span> ItemAdapter<span class="token comment" spellcheck="true"># class MidproSpiderMiddleware:</span><span class="token comment" spellcheck="true">#     # Not all methods need to be defined. If a method is not defined,</span><span class="token comment" spellcheck="true">#     # scrapy acts as if the spider middleware does not modify the</span><span class="token comment" spellcheck="true">#     # passed objects.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     @classmethod</span><span class="token comment" spellcheck="true">#     def from_crawler(cls, crawler):</span><span class="token comment" spellcheck="true">#         # This method is used by Scrapy to create your spiders.</span><span class="token comment" spellcheck="true">#         s = cls()</span><span class="token comment" spellcheck="true">#         crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><span class="token comment" spellcheck="true">#         return s</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def process_spider_input(self, response, spider):</span><span class="token comment" spellcheck="true">#         # Called for each response that goes through the spider</span><span class="token comment" spellcheck="true">#         # middleware and into the spider.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         # Should return None or raise an exception.</span><span class="token comment" spellcheck="true">#         return None</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def process_spider_output(self, response, result, spider):</span><span class="token comment" spellcheck="true">#         # Called with the results returned from the Spider, after</span><span class="token comment" spellcheck="true">#         # it has processed the response.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         # Must return an iterable of Request, or item objects.</span><span class="token comment" spellcheck="true">#         for i in result:</span><span class="token comment" spellcheck="true">#             yield i</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def process_spider_exception(self, response, exception, spider):</span><span class="token comment" spellcheck="true">#         # Called when a spider or process_spider_input() method</span><span class="token comment" spellcheck="true">#         # (from other spider middleware) raises an exception.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         # Should return either None or an iterable of Request or item objects.</span><span class="token comment" spellcheck="true">#         pass</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def process_start_requests(self, start_requests, spider):</span><span class="token comment" spellcheck="true">#         # Called with the start requests of the spider, and works</span><span class="token comment" spellcheck="true">#         # similarly to the process_spider_output() method, except</span><span class="token comment" spellcheck="true">#         # that it doesn’t have a response associated.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         # Must return only requests (not items).</span><span class="token comment" spellcheck="true">#         for r in start_requests:</span><span class="token comment" spellcheck="true">#             yield r</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def spider_opened(self, spider):</span><span class="token comment" spellcheck="true">#         spider.logger.info('Spider opened: %s' % spider.name)</span><span class="token keyword">import</span> random<span class="token keyword">class</span> <span class="token class-name">MidproDownloaderMiddleware</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 代理池</span>    proxy_http <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    proxy_https <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 拦截请求</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># UA伪装</span>        user_agent_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># UA池</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"User-Agent"</span><span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>user_agent_list<span class="token punctuation">)</span>        <span class="token keyword">return</span> None    <span class="token comment" spellcheck="true"># 拦截所有响应</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Called with the response returned from the downloader.</span>        <span class="token comment" spellcheck="true"># Must either;</span>        <span class="token comment" spellcheck="true"># - return a Response object</span>        <span class="token comment" spellcheck="true"># - return a Request object</span>        <span class="token comment" spellcheck="true"># - or raise IgnoreRequest</span>        <span class="token keyword">return</span> response    <span class="token comment" spellcheck="true"># 拦截所有异常</span>    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"http"</span><span class="token punctuation">:</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"proxy"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>proxy_http<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"proxy"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"https://"</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>proxy_https<span class="token punctuation">)</span>        <span class="token keyword">return</span> request <span class="token comment" spellcheck="true"># 将修正之后的请求对象重新进行请求发送</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（7）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-7/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-7/</url>
      
        <content type="html"><![CDATA[<h1 id="CrawlSpider-实现全站数据爬取"><a href="#CrawlSpider-实现全站数据爬取" class="headerlink" title="CrawlSpider 实现全站数据爬取"></a>CrawlSpider 实现全站数据爬取</h1><h2 id="CrawlSpider-介绍"><a href="#CrawlSpider-介绍" class="headerlink" title="CrawlSpider 介绍"></a>CrawlSpider 介绍</h2><h3 id="全站数据爬取的方式"><a href="#全站数据爬取的方式" class="headerlink" title="全站数据爬取的方式"></a>全站数据爬取的方式</h3><pre class=" language-python"><code class="language-python">        <span class="token operator">-</span><span class="token operator">-</span> 基于 Spider：手动请求（递归实现）        <span class="token operator">-</span><span class="token operator">-</span> 基于 CrawlSpider</code></pre><h3 id="CrawlSpider（Spider-的一个子类）的使用"><a href="#CrawlSpider（Spider-的一个子类）的使用" class="headerlink" title="CrawlSpider（Spider 的一个子类）的使用"></a>CrawlSpider（Spider 的一个子类）的使用</h3><pre class=" language-python"><code class="language-python">        <span class="token operator">-</span><span class="token operator">-</span> 创建一个工程 scrapy startproject Pro        <span class="token operator">-</span><span class="token operator">-</span> cd Pro        <span class="token operator">-</span><span class="token operator">-</span> 创建爬虫文件（CrawlSpider）：            <span class="token operator">-</span><span class="token operator">-</span> scrapy genspider <span class="token operator">-</span>t crawl filename www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com            <span class="token operator">-</span><span class="token operator">-</span> 链接提取器（LinkExtractor）：                <span class="token operator">-</span><span class="token operator">-</span> 作用：根据指定的规则（allow，正则表达式）进行指定链接的提取            <span class="token operator">-</span><span class="token operator">-</span> 规则提取器（Rule）：                <span class="token operator">-</span><span class="token operator">-</span> 作用：将链接提取到的链接进行指定规则（callback）的解析</code></pre><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>使用 CrawlSpider 实现<a href="http://www.521609.com/ziliao/oumei/">校花网明星资料</a>的全站爬取</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>配置文件<code>settings.py</code></p><p><img src="https://img-blog.csdnimg.cn/c713db96a32f405da0f9a99216362748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/85df6e6bad934071a5901531d6409ac0.png"><br>实例化对象 <code>items.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">CrawlspiderproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>主文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> CrawlSpiderPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> CrawlspiderproItem<span class="token keyword">class</span> <span class="token class-name">CrawlspiderSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'CrawlSpider'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.521609.com/ziliao/oumei/'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 作用：根据指定的规则（allow）进行指定链接的提取</span>    link_index <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow <span class="token operator">=</span> r<span class="token string">"/ziliao/oumei/.*?.html"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 翻页的网址</span>    link_message <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow <span class="token operator">=</span> r<span class="token string">"/ziliao/.*?.html"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 人物详情页的网址</span>    <span class="token comment" spellcheck="true"># 规则提取器：将链接提取器的链接提取到的链接进行指定规则（callback）的解析</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        Rule<span class="token punctuation">(</span>link_index<span class="token punctuation">,</span> callback <span class="token operator">=</span> <span class="token string">'parse_name'</span><span class="token punctuation">,</span> follow <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Rule<span class="token punctuation">(</span>link_message<span class="token punctuation">,</span> callback <span class="token operator">=</span> <span class="token string">'parse_content'</span><span class="token punctuation">,</span> follow <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        name_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul/li//h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> CrawlspiderproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>            item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span>name            <span class="token keyword">yield</span> item        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">parse_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        content_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//span[@class="info"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> CrawlspiderproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> content <span class="token keyword">in</span> content_list<span class="token punctuation">:</span>            item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span> <span class="token operator">=</span> content            <span class="token keyword">yield</span> item        <span class="token keyword">pass</span></code></pre><p>管道文件<code>pipelines.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">CrawlspiderproPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如何判定 item 类型</span>        <span class="token comment" spellcheck="true"># 将数据写入数据库，如何保证数据的一致性</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">"XiaohuaproItem"</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">return</span> item</code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/5b84223005d84324bd025bc5d346da80.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（6）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-6/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-6/</url>
      
        <content type="html"><![CDATA[<h1 id="中间件的使用——爬取网易新闻"><a href="#中间件的使用——爬取网易新闻" class="headerlink" title="中间件的使用——爬取网易新闻"></a>中间件的使用——爬取网易新闻</h1><h2 id="scrapy-五大核心组件"><a href="#scrapy-五大核心组件" class="headerlink" title="scrapy 五大核心组件"></a>scrapy 五大核心组件</h2><h3 id="引擎（Scrapy）"><a href="#引擎（Scrapy）" class="headerlink" title="引擎（Scrapy）"></a>引擎（Scrapy）</h3><p>用来处理整个系统的数据流量，触发事务（框架核心）</p><h3 id="调度器（Scheduler）"><a href="#调度器（Scheduler）" class="headerlink" title="调度器（Scheduler）"></a>调度器（Scheduler）</h3><p>用来接受引擎发送的请求，压入队列中，并在引擎再次请求的时候返回，可以想象成一个 URL （抓取网页的网址或者说是链接）的有限队列，由它来决定下一个要抓取的网址是什么，同时去除重复的网址。</p><h3 id="下载器（Downloader）"><a href="#下载器（Downloader）" class="headerlink" title="下载器（Downloader）"></a>下载器（Downloader）</h3><p>用于下载网页内容，并将网页内容返回给爬虫（Spiders），下载器是建立在 twisted 这个高效的异步模型上的。</p><h3 id="爬虫（Spider）"><a href="#爬虫（Spider）" class="headerlink" title="爬虫（Spider）"></a>爬虫（Spider）</h3><p>爬虫是主要干活的，用于从特定的网页中提取自己需要的信息，即所谓的实体（item），用户也可以从中提取出链接，让 引擎（Scrapy） 继续抓取下一个页面。</p><h3 id="项目管道（Pipeline）"><a href="#项目管道（Pipeline）" class="headerlink" title="项目管道（Pipeline）"></a>项目管道（Pipeline）</h3><p>负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体，验证实体的有效性，清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</p><p><img src="https://img-blog.csdnimg.cn/005247374f084154896fd9f11296d99c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="中间件（Middlewares）的介绍"><a href="#中间件（Middlewares）的介绍" class="headerlink" title="中间件（Middlewares）的介绍"></a>中间件（Middlewares）的介绍</h2><h3 id="下载中间件（Downloader-Middlewares）"><a href="#下载中间件（Downloader-Middlewares）" class="headerlink" title="下载中间件（Downloader Middlewares）"></a>下载中间件（Downloader Middlewares）</h3><p>位置：引擎和下载器之间</p><p>作用：批量拦截到整个工程中所有的请求和响应</p><p>拦截请求：<br>    1. UA伪装<br>    2. 代理IP</p><p>拦截响应：<br>    1.  篡改响应数据，响应对象</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>爬取网易新闻的新闻数据</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>在开始写代码的时候，我们首先要到网易新闻网页中踩点，知己知彼，百战不殆。</p><p>网易首页稀疏平常，跟其他的网页差别不大，但我们点开随便一个模块，比如说 “国内”，在下拉网页的时候我们会发现这些网页都是动态加载的。</p><p>很显然，但目前为止，我们所学的 scrapy 框架解决不了这个问题。</p><p>对于动态加载的情况，我们首先想到的肯定是 selenium 爬取数据，那么在 scrapy 中我们要怎么和 selenium 结合呢？</p><p>没错，这就是中间件拦截响应的作用了。 </p><p>至于中间件具体怎么使用，大家还是看代码吧。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>配置文件<code>settings.py</code></p><p><img src="https://img-blog.csdnimg.cn/90d889922cae4f1895bea6da7744f74e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>管道和下载中间件的开启（注意是下载中间件：<code>DOWNLOADER_MIDDLEWARES</code>）</p><p><img src="https://img-blog.csdnimg.cn/3f1786c81c5f45dc8fd4acde13546e42.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>主文件代码编写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> newsPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> NewsproItem<span class="token keyword">class</span> <span class="token class-name">NewsSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'news'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://news.163.com/'</span><span class="token punctuation">]</span>    all_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 起判断作用，其中要发送请求的网址包含动态加载的内容，需要下载中间件拦截，并使用 selenium 替换响应对象</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">'C:\\Users\\ASUS\\Desktop\\CSDN\\selenium 模块\\chromedriver.exe'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 获取国内、国际、军事新闻模块的网址</span>        guonei_url <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="menu_guonei"]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(guonei_url)</span>        self<span class="token punctuation">.</span>all_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>guonei_url<span class="token punctuation">)</span>        guoji_url <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="menu_guoji"]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(guoji_url)</span>        self<span class="token punctuation">.</span>all_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>guoji_url<span class="token punctuation">)</span>        war_url <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="menu_war"]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(war_url)</span>        self<span class="token punctuation">.</span>all_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>war_url<span class="token punctuation">)</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>all_urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_news_url<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_news_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通过对国内、国际、军事新闻模块的网址发送请求（此时响应对象已经被下载中间件替换了）获取新闻的详情页的网址</span>        new_urls <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="ndi_main"]/div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> new_url <span class="token keyword">in</span> new_urls<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print(new_url)</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_new<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_new</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 获取新闻标题和内容</span>        item <span class="token operator">=</span> NewsproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        title <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="post_main"]/h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="post_body"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(title)</span>        <span class="token comment" spellcheck="true"># print(content)</span>        item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> title        item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        <span class="token keyword">yield</span> item        <span class="token keyword">pass</span></code></pre><p>实例化对象 <code>items.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">NewsproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>下载中间件 <code>middlewares.py</code></p><p>下载中间件的类和函数方法很多，我们要注意选择是下载中间件和其中的 <code>process_response</code> 自定义函数</p><p><img src="https://img-blog.csdnimg.cn/787523404e1f4ac3babd351b72ba0118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p> <code>process_response</code> 自定义函数的代码如下：</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        bro <span class="token operator">=</span> spider<span class="token punctuation">.</span>bro        <span class="token comment" spellcheck="true"># spider 表示对应的爬虫对象</span>        <span class="token comment" spellcheck="true"># 挑选出指定的响应对象进行篡改</span>        <span class="token comment" spellcheck="true"># 通过 url 构造 request</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>url <span class="token keyword">in</span> spider<span class="token punctuation">.</span>all_urls<span class="token punctuation">:</span>            bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>            page <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_source            sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 针对定位到的 reponse 进行篡改</span>            <span class="token comment" spellcheck="true"># 实例化一个新的响应对象（符合需求：包含动态加载的新闻数据），代替旧的响应对象</span>            new_response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> body <span class="token operator">=</span> page<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span> request <span class="token operator">=</span> request<span class="token punctuation">)</span>            <span class="token keyword">return</span> new_response        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> response</code></pre><p>管道 <code>pipelines.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">NewsproPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'网易新闻.txt'</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬虫开始……"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> title <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"爬取成功！"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取结束！！！"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（5）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-5/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-5/</url>
      
        <content type="html"><![CDATA[<h1 id="scrapy爬取图片"><a href="#scrapy爬取图片" class="headerlink" title="scrapy爬取图片"></a>scrapy爬取图片</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>爬取<a href="https://sc.chinaz.com/tupian/">站长素材中的图片</a></p><h2 id="图片数据爬取之ImagesPipeline"><a href="#图片数据爬取之ImagesPipeline" class="headerlink" title="图片数据爬取之ImagesPipeline"></a>图片数据爬取之ImagesPipeline</h2><h3 id="scrapy爬取图片-1"><a href="#scrapy爬取图片-1" class="headerlink" title="scrapy爬取图片"></a>scrapy爬取图片</h3><p>xpath 解析出图片 src 的属性值。单独对图片地址发起请求获取图片二进制类型的数据。</p><h3 id="ImagesPipeline"><a href="#ImagesPipeline" class="headerlink" title="ImagesPipeline"></a>ImagesPipeline</h3><p>只需要将 img 中 src 的属性进行解析，提交到管道，管道就会对图片的 src 进行请求发送获取图片的二进制并进行持久化存储。</p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol><li>数据解析（获得图片的地址）</li><li>将存储地址的 item 提交到制定的管道类</li><li>在管道文件中自定制有一个基于 <code>ImagesPipeLine</code> 的管道类<br> — 函数方法 <code>get_media_request</code> 发送请求<br> — 函数方法 <code>fifle_path</code> 自定义图片名称<br> — 函数方法 <code>item_completed</code> 将 item 传递给下一个被执行的管道类</li><li>在配置文件中<br> — 指定图片存储的位置：<code>IMAGES_STORE = &quot;./photo&quot;</code><br> — 指定开启的管道：自定制的管道类</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>当我们按照 xpath 解析图片地址的时候，发现自己爬取到的地址为空。</p><p>主文件如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">PhotoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'photo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://sc.chinaz.com/tupian/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        src_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="container"]/div/div/a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>src_list<span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> src_list<span class="token punctuation">:</span>            src <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> src            <span class="token keyword">print</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/98964fe0d24d499a88df1b4907a1ebda.png"><br>这是为什么呢？</p><p>我们打开网页，检查代码会发现，这些图片地址所在的属性分为两种，一种是 src， 一种是 src2。</p><p><img src="https://img-blog.csdnimg.cn/ab389660feb441348b64e98f8f604101.png"><br><img src="https://img-blog.csdnimg.cn/1011741a853a41e4be8fdaa3cb071e7d.png"><br>那么这两种有什么区别呢？</p><p>我们打开检查代码下拉页面会发现，如果图片进入可视化区域那么属性就会从 src2 变为 src 。</p><p>所以在爬取数据 xpath 解析的时候我们属性的选择应该是 src2 。</p><p>主文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> photopro<span class="token punctuation">.</span>items <span class="token keyword">import</span> PhotoproItem<span class="token keyword">import</span> re<span class="token keyword">class</span> <span class="token class-name">PhotoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'photo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://sc.chinaz.com/tupian/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        src_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="container"]/div/div/a/img/@src2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> src_list<span class="token punctuation">:</span>            src <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> src            <span class="token keyword">print</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/33fa1f303d7c430e89d1893012bb5323.png"><br>同时我们通过点击详情页观看图片的方式，发现爬取到的地址只是缩略图，而原图和爬取到的地址相差了一个<code>_s</code>。</p><p>爬取到的地址 <code>https://scpic3.chinaz.net/Files/pic/pic9/202107/bpic23822_s.jpg</code><br>高清的地址 <code>https://scpic3.chinaz.net/Files/pic/pic9/202107/bpic23822.jpg</code></p><p>🆗，了解到了这两个注意事项，我们就可以来写代码了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>自定制管道类 <code>pipelines.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token comment" spellcheck="true"># class PhotoproPipeline:</span><span class="token comment" spellcheck="true">#     def process_item(self, item, spider):</span><span class="token comment" spellcheck="true">#         return item</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>pipelines<span class="token punctuation">.</span>images <span class="token keyword">import</span> ImagesPipeline<span class="token keyword">class</span> <span class="token class-name">ImgPipeline</span><span class="token punctuation">(</span>ImagesPipeline<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 对 item 中的图片进行请求操作</span>    <span class="token keyword">def</span> <span class="token function">get_media_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定制图片的名称</span>    <span class="token keyword">def</span> <span class="token function">file_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response <span class="token operator">=</span> None<span class="token punctuation">,</span> info <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>url        file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> file_name    <span class="token keyword">def</span> <span class="token function">item_completed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> item <span class="token comment" spellcheck="true"># 该返回值会传递给下一个即将被执行的管道类</span></code></pre><p><code>items.py</code> 的代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">PhotoproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    src <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>主文件代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> photopro<span class="token punctuation">.</span>items <span class="token keyword">import</span> PhotoproItem<span class="token keyword">import</span> re<span class="token keyword">class</span> <span class="token class-name">PhotoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'photo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://sc.chinaz.com/tupian/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        src_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="container"]/div/div/a/img/@src2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> src_list<span class="token punctuation">:</span>            src <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> src            src <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"_s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>            item <span class="token operator">=</span> PhotoproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span> <span class="token operator">=</span> src            <span class="token comment" spellcheck="true"># print(src)</span>            <span class="token keyword">yield</span> item</code></pre><p>配置文件</p><p><img src="https://img-blog.csdnimg.cn/47838dc02887470ab1f8bdf75c95d76c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/268660c3ebff450e9abe471a090aa174.png"></p><p><code>photopro.pipelines.ImgPipeline</code> 中 <code>photopro.pipelines.</code>后面填写的一定是前面自定制的管道类。</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/2aad40fbbf8a4cc9aae161ea3714e35c.png"><br><img src="https://img-blog.csdnimg.cn/ab63258090574941a1211c154aab998c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（4）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-4/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-4/</url>
      
        <content type="html"><![CDATA[<h1 id="深度爬取——请求传参"><a href="#深度爬取——请求传参" class="headerlink" title="深度爬取——请求传参"></a>深度爬取——请求传参</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>爬取 <a href="http://www.521609.com/ziliao/gangtai/">校花网</a> 中港台明星的名字和简介</p><p>信息分别在两个页面里</p><p><img src="https://img-blog.csdnimg.cn/06a219fd98874296ba05a8ff39d82028.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/7994d22830674e9f9b3cd0f178c83be8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>我们发现要实现这个目的，我们既要对原页面进行数据爬取，也要对详情页进行明星简介的爬取。</p><p>这时候我们似乎可以使用前面学的回调函数的方法，调用一个新的函数方法对详情页进行数据爬取。</p><p>不过这个方法还有一个问题，就是怎么保证在原页面爬取的名字数据可以和详情页的一一对应。（不考虑在详情页同时爬取名字和简介信息，不然还怎么介绍请求传参）</p><p>解决这个问题的方法就是请求传参，简单来说，就是在回调函数的时候，将已经爬取到的名字作为参数传到被调用的函数中。</p><p>听起来似乎听抽象的，那么就直接看代码好了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先使前期准备工作。</p><p>配置文件。<br><img src="https://img-blog.csdnimg.cn/4f53e9f72ca5484ab1cacc9dc87bc9d7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/a0683c1bea8845a28dbda8d2c8ce2476.png"><br><code>items.py</code> 文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DataproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>主文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> DataPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> DataproItem<span class="token keyword">class</span> <span class="token class-name">StardataSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'Data'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.521609.com/ziliao/gangtai/'</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> <span class="token string">"http://www.521609.com/ziliao/gangtai/index_%s.html"</span>    page_num <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 爬取详情页</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//span[@class="info"]/p//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        <span class="token keyword">yield</span> item    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 明星姓名的列表</span>        start_name_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="page_starlist page_zllist"]/ul/li/a[2]/h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>start_name_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            item <span class="token operator">=</span> DataproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            start_name <span class="token operator">=</span> start_name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> start_name            <span class="token comment" spellcheck="true"># 根据姓名的位置，判断对应的详情页位置的网址位置，实现一一对应</span>            path <span class="token operator">=</span> <span class="token string">'//div[@class="page_starlist page_zllist"]/ul/li[%s]/a[2]/@href'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            src <span class="token operator">=</span> <span class="token string">'http://www.521609.com/'</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># meta 实现请求传参，请求传参的形式是字典形式</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>page_num <span class="token operator">&lt;=</span> <span class="token number">22</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> self<span class="token punctuation">.</span>url <span class="token operator">%</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>page_num<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 对于翻页的情况，实现回调函数</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span></code></pre><p><code>pipelines.py</code> 文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">DataproPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"资料.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始爬取……"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>        name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"爬取成功！"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取结束！！！"</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/c76fd5ec367044c79bfd34ced06c1126.png"><br><img src="https://img-blog.csdnimg.cn/f1cea8357fea4adf85d253582dbef263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（3）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-3/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-3/</url>
      
        <content type="html"><![CDATA[<h1 id="全站数据爬取：以校花网为例"><a href="#全站数据爬取：以校花网为例" class="headerlink" title="全站数据爬取：以校花网为例"></a>全站数据爬取：以校花网为例</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>爬取 <a href="http://www.521609.com/tuku/shz/">校花网</a> 中全部照片的名称，以生活照为例。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>如果不用 scrapy 框架实现全站数据爬取其实是简单的，只要找到网址的规律一直遍历就行。那么如果要用scrapy框架实现全站数据爬取应该怎么办呢？</p><p>其实经过前面对 scrapy 框架的学习，我们发现 <code>parse</code> 函数方法的作用就是让我们对指定的网址网站数据解析，所以想要完成全站数据爬取，我们只需要循环调用 <code>parse</code> 函数方法。</p><p>我们首先也需要找到网址的规律，构造一个网址模板。</p><p>我们知道 scrapy 只会对 <code>start_urls</code> 列表内的内容进行发送请求，那么我们要怎么实现不停地调用  <code>parse</code> 函数方法呢？</p><p>这个方法就是 回调函数。</p><p>简单来说，就是在编写 <code>parse</code> 函数时，在函数的最后再调用一次该函数。简单来说就是递归使用 <code>parse</code> 函数。</p><p>明白了原理，那就试试吧，直接上代码。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先是配置文件。UA伪装、robots协议、日志的设置、管道的打开</p><p><img src="https://img-blog.csdnimg.cn/21b60097709746f795d38618493a7323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/e4b0ab895fcb45e4859b54707af32292.png"><br>主文件代码的编写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> photo<span class="token punctuation">.</span>items <span class="token keyword">import</span> PhotoItem<span class="token keyword">class</span> <span class="token class-name">NameSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'name'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.521609.com/tuku/shz/index.html'</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> <span class="token string">"http://www.521609.com/tuku/shz/index_%s.html"</span>    index <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        name_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="inn"]/ul/li/a/@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(name_list)</span>        <span class="token keyword">for</span> name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>            item <span class="token operator">=</span> PhotoItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">"photo_name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> name            <span class="token keyword">yield</span> item        <span class="token keyword">if</span> self<span class="token punctuation">.</span>index <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> self<span class="token punctuation">.</span>url <span class="token operator">%</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>index<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 回调函数</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>index <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">pass</span></code></pre><p><code>items.py</code> 文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">PhotoItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    photo_name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p><code>pipelines.py</code> 文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">PhotoPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"照片名称.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬虫开始……"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        photo_name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"photo_name"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo_name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取数据结束！！！"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果</p><p><img src="https://img-blog.csdnimg.cn/07ecba61366b49b2b137220c4e93f65b.png"></p><p><img src="https://img-blog.csdnimg.cn/ab6afa842a2e4fbbbf805bdb18a1e366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（2）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-2/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-2/</url>
      
        <content type="html"><![CDATA[<h1 id="scrapy-持久化存储（以糗事百科为例）"><a href="#scrapy-持久化存储（以糗事百科为例）" class="headerlink" title="scrapy 持久化存储（以糗事百科为例）"></a>scrapy 持久化存储（以糗事百科为例）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道大家还记得爬虫万能的三步骤吗？没错，那就是指定URL，发送请求，持久化保存数据。</p><p>我们前面在 scrapy框架（1）中简单了解了使用 scrapy 指定URL和发送请求，那么我们又要怎么使用 scrapy 实现数据的持久化存储呢？</p><p>scrapy 框架实现数据持久化存储的方法有两种，一种是基于终端命令的持久化存储；一种是基于管道的持久化存储。</p><h2 id="基于终端指令的持久化存储"><a href="#基于终端指令的持久化存储" class="headerlink" title="基于终端指令的持久化存储"></a>基于终端指令的持久化存储</h2><p>首先我们先创建相应的 scrapy 文件，用我们学过的方法完成指定URL和请求发送的步骤。</p><p>相关步骤如下<br><img src="https://img-blog.csdnimg.cn/20210710143834387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>scrapy 指定URL，发送指令的文件和代码如下：</p><p>配置文件 <code>setting.py</code></p><p><img src="https://img-blog.csdnimg.cn/20210710152408579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>主代码 <code>saveData.py</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">SavedataSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'saveData'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># xpath 解析。作者的列表</span>        author_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div/div[1]/a[1]/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回一个列表</span>        <span class="token comment" spellcheck="true"># print(author_list)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>author_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token string">'//div[@class="col1 old-style-col1"]/div[%s]/a[1]/div/span//text()'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(content)</span>        <span class="token keyword">pass</span></code></pre><p>接下就是基于终端指令的持久化存储了</p><pre class=" language-python"><code class="language-python">基于终端指令的持久化存储：    —— 要求：只可以将 parse 方法中的返回值存储到本地的文本文件中    —— 注意：持久化存储的文本文件的类型只能是“json”，“jsonlines”，“jl”，“csv”，“xml”    —— 指令：scrapy crawl xxx <span class="token operator">-</span>o filePath    —— 好处：简洁高效便捷    —— 缺点：局限性比较强（数据只可以存储到指定后缀的文本文件中）</code></pre><p>相关文件代码如下：</p><p>相关文件<code>items.py</code>（其实自己加的代码并不多）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QiushiItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>主代码<code>saveData.py</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">SavedataSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'saveData'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># xpath 解析。作者的列表</span>        author_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div/div[1]/a[1]/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回一个列表</span>        <span class="token comment" spellcheck="true"># print(author_list)</span>        all_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>author_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token string">'//div[@class="col1 old-style-col1"]/div[%s]/a[1]/div/span//text()'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            author <span class="token operator">=</span> author_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(content)</span>            data <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"author"</span><span class="token punctuation">:</span> author<span class="token punctuation">,</span>                <span class="token string">"content"</span><span class="token punctuation">:</span> content            <span class="token punctuation">}</span>            all_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> all_data</code></pre><p>终端指令<br><img src="https://img-blog.csdnimg.cn/20210710200454256.png"><br>运行结果</p><p><img src="https://img-blog.csdnimg.cn/20210710200530207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="基于管道的持久化存储"><a href="#基于管道的持久化存储" class="headerlink" title="基于管道的持久化存储"></a>基于管道的持久化存储</h2><p>我们可以发现基于终端指令的局限性其实很大，所以我们通常不使用基于终端命令的方法进行数据的持久化存储。那么就是基于管道的持久化存储了。</p><p>前期工作和基于终端的持久化存储一样。只是在配置文件要做出一点改变。</p><p>其中<code>items.py</code>不需要改变。配置文件<code>settings.py</code>基本不变，只需要打开管道就行<br><img src="https://img-blog.csdnimg.cn/20210712225023779.png"><br>先是管道文件 <code>pipelines.py</code> 的代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">QiushiPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开爬虫，函数名一定要是这个。只被调用一次</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始爬虫……"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"数据.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 每传入一个参数，就调用一次</span>        author <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"作者："</span> <span class="token operator">+</span> author <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"内容："</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬虫结束！！！"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后是主代码 <code>saveDate.py</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> qiushi<span class="token punctuation">.</span>items <span class="token keyword">import</span> QiushiItem <span class="token comment" spellcheck="true"># 导入 items.py 文件中函数</span><span class="token keyword">class</span> <span class="token class-name">SavedateSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'saveDate'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># xpath 解析。作者的列表</span>        author_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div/div[1]/a[1]/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回一个列表</span>        <span class="token comment" spellcheck="true"># print(author_list)</span>        item <span class="token operator">=</span> QiushiItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>author_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token string">'//div[@class="col1 old-style-col1"]/div[%s]/a[1]/div/span//text()'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            author <span class="token operator">=</span> author_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">=</span> author            item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span> <span class="token operator">=</span> content            <span class="token keyword">yield</span> item</code></pre><p>我们试着运行一下代码，结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20210712231244482.png"><br><img src="https://img-blog.csdnimg.cn/20210712231305201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（1）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-1/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-1/</url>
      
        <content type="html"><![CDATA[<h1 id="scrapy-框架初识"><a href="#scrapy-框架初识" class="headerlink" title="scrapy 框架初识"></a>scrapy 框架初识</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果没记错，python 3.6 及以上版本可以直接用 <code>pip install scrapy.</code>但具体是从哪个版本开始可以这样我也不是很清楚，因为我使用的 python 3.95，所以我是直接用<code>pip</code>安装的。也正因为如此，对于下载whl格式的包安装我是不太清楚的，所以不提。</p><h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><p>scrapy 安装成功后，我们来创建项目框架。</p><p>打开终端。cmd 或者从 pycharm 中打开终端。我以 pycharm 为例。</p><p>首先，进入到相应的目录</p><p><img src="https://img-blog.csdnimg.cn/2021070120590867.png"></p><p>创建项目框架文件夹</p><pre class=" language-cmd"><code class="language-cmd">scrapy startproject projectName</code></pre><p><img src="https://img-blog.csdnimg.cn/20210701210138855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>在进入刚创建的文件夹，创建新的执行文件</p><pre class=" language-cmd"><code class="language-cmd">scrapy genspider fileName www.xxxx.com</code></pre><p><img src="https://img-blog.csdnimg.cn/20210701210414707.png"></p><p>然后我们打开我们创建的项目框架</p><p><img src="https://img-blog.csdnimg.cn/20210701210508359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>其中 <code>Blood.py</code>是主代码文件，<code>items.py</code> 是跟保存有关的文件，<code>middlewares.py</code>是中间件，<code>pipelines.py</code>是管道文件，<code>settings.py</code>是配置文件。这些以后会讲到的，暂且不提。</p><p>如果要执行代码，终端的命令是<code>scrapy crawl fileName</code><br>在这个案例里，就是<code>scrapy crawl Blood</code></p><h2 id="简单的代码实现"><a href="#简单的代码实现" class="headerlink" title="简单的代码实现"></a>简单的代码实现</h2><p>先打开 <code>Blood.py</code>文件<br>其中代码如下：<br><img src="https://img-blog.csdnimg.cn/20210701210943336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>我圈起来的部分是允许爬虫爬取的网站的域名，而下面的列表是待爬取的网址。这就是说，如果待爬取的网址不属于我圈起来的域名，这些网址就不会被爬取。所以一般来说，我们直接是将这一行代码注释掉。</p><p>然后我们试着爬取百度首页。</p><p>首先代码如下:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BloodSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'Blood'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印爬取的网址</span>        <span class="token keyword">pass</span></code></pre><p>执行代码<code>scrapy crawl Blood</code></p><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20210701211700447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>好家伙，这一坨是什么东西？</p><p>先来看我圈起来的部分，先是说连接到百度首页，再说被 robots 协议禁止了。好家伙，原来这是日志啊，但是 robots 协议怎么办？</p><p>没事，是时候打开我们的配置文件了</p><p><img src="https://img-blog.csdnimg.cn/20210701212034397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>这里我们看到，我们的 scrapy 框架遵守 robots 协议，所以我们将 True 改成 False。再运行一次，🆗，这次没有报错了。</p><p><img src="https://img-blog.csdnimg.cn/20210701212211474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>但是这一坨日志可真是叫人恶心。那有什么方法吗？</p><p>简单，再次打开而配置文件。<br>添加一行代码</p><pre class=" language-python"><code class="language-python">LOG_LEVEL <span class="token operator">=</span> <span class="token string">"ERROR"</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210701213120797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>然后再次运行</p><p>看结果：<br><img src="https://img-blog.csdnimg.cn/20210701213147621.png"></p><p>那么使用 scrapy 框架之后怎么保存爬取的内容呢？</p><p>嘿嘿，且听下回分解。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（6）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-6/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-6/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-综合应用-（2）"><a href="#selenium-综合应用-（2）" class="headerlink" title="selenium 综合应用 （2）"></a>selenium 综合应用 （2）</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>模拟登录 12306</p><p>注意：目的在于验证码的识别。因为除了点击，12306在登录后还存在滑块验证码。本篇文章并不涉及滑块验证码。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p><img src="https://img-blog.csdnimg.cn/202106291640446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>首先需要定位并点击 “账号登陆”</p><p><img src="https://img-blog.csdnimg.cn/20210629164140492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>然后问题就是账号密码和验证码的问题了。</p><p>我相信账号密码并不是什么大问题，实际上叫人无从下手的是验证码问题。这时候需要的就是我们的验证码网站了。</p><p><img src="https://img-blog.csdnimg.cn/20210629165131804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>12306 网站的验证码基本是 1~4 个坐标，所以我们选择 type &#x3D; 27。</p><p>需要明白的是我们使用验证码识别的是坐标。</p><p>所以我们需要做的是获取验证码的图片，这时候我们不能使用以前用的方法，因为通过网址获取的验证码是动态更新的。所以我们需要对验证码部分使用代码进行截图。（这部分比较麻烦，如果有必要的话，甚至可以直接 CTRL + C 然后 CTRL + V）</p><p>需要注意的是因为我的电脑是文本显示大小是125%，所以相应的数据需要乘以或是除以 1.25。</p><p><img src="https://img-blog.csdnimg.cn/20210629165923440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains <span class="token comment" spellcheck="true"># 动作链</span><span class="token keyword">def</span> <span class="token function">base64_api</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> img<span class="token punctuation">,</span> typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b64 <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> uname<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> pwd<span class="token punctuation">,</span><span class="token string">"typeid"</span><span class="token punctuation">:</span>typeid<span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> b64<span class="token punctuation">}</span>    result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://api.ttshitu.com/predict"</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://kyfw.12306.cn/otn/resources/login.html"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位“账号登录”并点击</span>    btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[2]/ul/li[2]/a'</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> btn<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输入账号密码</span>    user_name <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J-userName"</span><span class="token punctuation">)</span>    user_name<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J-password"</span><span class="token punctuation">)</span>    password<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对整个页面截图并保存</span>    bor<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 窗口最大化</span>    photo <span class="token operator">=</span> bor<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">"窗口截图.png"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位坐标位置</span>    img <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J-loginImg'</span><span class="token punctuation">)</span>    location <span class="token operator">=</span> img<span class="token punctuation">.</span>location <span class="token comment" spellcheck="true"># 验证码图片左上角坐标。X, Y</span>    <span class="token comment" spellcheck="true"># print("location", location)</span>    size <span class="token operator">=</span> img<span class="token punctuation">.</span>size <span class="token comment" spellcheck="true"># 验证码标签对应的长宽</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>    rangle <span class="token operator">=</span> <span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 裁剪</span>    i <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'窗口截图.png'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对指定位置进行裁剪</span>    fram <span class="token operator">=</span> i<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>rangle<span class="token punctuation">)</span>    fram<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'验证码.png'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 识别验证码</span>    img_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\selenium 模块\\验证码.png"</span>    result <span class="token operator">=</span> base64_api<span class="token punctuation">(</span>uname<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> img<span class="token operator">=</span>img_path<span class="token punctuation">,</span> typeid<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 确定要点击的位置</span>    <span class="token keyword">if</span> <span class="token string">"|"</span> <span class="token keyword">in</span> result<span class="token punctuation">:</span>        index_list <span class="token operator">=</span> result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>        x_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> xy <span class="token keyword">in</span> index_list<span class="token punctuation">:</span>            xy_list <span class="token operator">=</span> xy<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>            x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        x_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        xy_list <span class="token operator">=</span> result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x_list<span class="token punctuation">,</span> y_list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">1.25</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>y_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">1.25</span><span class="token punctuation">)</span>        ActionChains<span class="token punctuation">(</span>bor<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element_with_offset<span class="token punctuation">(</span>img<span class="token punctuation">,</span> int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 点击登录</span>    btn_login <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J-login'</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> btn_login<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（5）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-5/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-5/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-综合应用（1）"><a href="#selenium-综合应用（1）" class="headerlink" title="selenium 综合应用（1）"></a>selenium 综合应用（1）</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>模拟浏览器，从京东首页开始输入关键词，爬取两页商品的名称、价格和一页评价（只包括文字，不包括视频）。评价包括用户的名称和星数。</p><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><ol><li><p>首先定位搜索框的位置<br><img src="https://img-blog.csdnimg.cn/20210628212745696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p></li><li><p>前面说过商品页的商品是动态加载。不然我们只能得到 30 个商品的数据</p></li><li><p>定位商品的链接</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210628213048671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>4. 商品详情页的需要爬取的数据的定位</p><p><img src="https://img-blog.csdnimg.cn/20210628213319608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210628213327510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210628213333935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>5.  翻页</p><p><img src="https://img-blog.csdnimg.cn/20210628213436926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> rekey <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入商品名称："</span><span class="token punctuation">)</span>page_index <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入要爬取的页数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>bor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.jd.com/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定位搜索框</span>input_key <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>input_key<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>key<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定位按钮</span>btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search"]/div/div[2]/button'</span><span class="token punctuation">)</span>bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> btn<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> index <span class="token operator">&lt;</span> page_index<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 滚轮到底，破解动态加载</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> bor<span class="token punctuation">.</span>page_source    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 商品 li 标签的列表</span>    good_lists <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(len(good_lists))</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>good_lists<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 商品的链接</span>        chain <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li['</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']//a[@target="_blank"]'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击，来到商品详情页</span>        bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> chain<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 跳转到新打开的窗口</span>        handles <span class="token operator">=</span> bor<span class="token punctuation">.</span>window_handles        bor<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击商品评价</span>        good_btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="detail"]/div[1]/ul/li[5]'</span><span class="token punctuation">)</span>        bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> good_btn<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 滚轮到底，破解动态加载</span>        bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        good_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>bor<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>        good_name <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="sku-name"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        good_name <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"\s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> good_name<span class="token punctuation">)</span>        good_price <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="dd"]/span/span[2]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" 元"</span>        <span class="token comment" spellcheck="true"># print(good_price, "\n", good_name)</span>        <span class="token comment" spellcheck="true"># print("正在爬取", good_name + "……")</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"商品.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"商品名称："</span> <span class="token operator">+</span> good_name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"商品价格："</span> <span class="token operator">+</span> good_price <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        user_name_list <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div/div[1]/div[1]/img/@alt'</span><span class="token punctuation">)</span>        star_list <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div/div[2]/div[1]/@class'</span><span class="token punctuation">)</span>        conten_listt <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div/div[2]/p//text()'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>user_name_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            user_name <span class="token operator">=</span> user_name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            star <span class="token operator">=</span> star_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            content <span class="token operator">=</span>conten_listt<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"商品.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"用户评价："</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"用户名："</span> <span class="token operator">+</span> user_name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"星数："</span> <span class="token operator">+</span> star <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(good_name, "爬取成功！！！")</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关闭当前窗口，并跳转到一开始的窗口</span>        bor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        bor<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 输入页数并翻页</span>    input_text <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[2]/input'</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>    input_text<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    input_text<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[2]/a'</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> btn<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>bor<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/20210629011314552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（4）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-4/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-4/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-模块（4）"><a href="#selenium-模块（4）" class="headerlink" title="selenium 模块（4）"></a>selenium 模块（4）</h1><h2 id="几句题外话"><a href="#几句题外话" class="headerlink" title="几句题外话"></a>几句题外话</h2><p>因为准备期末考试的缘故，有一段时间没有写博文了，今天认真一看竟然已经有一个月没有写了。虽然我的博文只有零零总总几人看过，但期间有位大佬 “催更” ，真是叫我汗颜。</p><p>如果关注过我写的东西的时间，或许各位就会看到我中间大概有三四个月的时间没有写过博文。</p><p>明白了这一点，或许各位看官就大概能理解我的感动了，毕竟对于我这种非计算机专业的人来说，CSDN大佬的鼓励或是指正，就是激励我坚持的一个重要因素了吧。</p><p>闲话少说，今天我忙里偷闲写一篇博文，希望对各位看官有帮助。如若没有，绝对是因为我对其中的理解不够深刻。写这一篇博客，大概也有告诉那位 “大佬“ 我仍会继续坚持下去的意思。</p><p>与各位看官共勉。（似乎语气有些大了呢 <code>^_^</code>）</p><h2 id="搜索框的关键词输入（以京东为例）"><a href="#搜索框的关键词输入（以京东为例）" class="headerlink" title="搜索框的关键词输入（以京东为例）"></a>搜索框的关键词输入（以京东为例）</h2><p>在上一篇的博文中，我们提到了对商品页的商品点击以及使用滚轮的方法破解动态加载的问题。</p><p>那么问题来了，如果我既要对 “ 奥特曼 ” 这个关键词下的商品页面进行这个操作，又要对 “ 小怪兽 ”关键词下的商品页面进行同样的操作怎么办？难道要写两个程序吗？</p><p>正所谓爬虫（技术）的出现是为了一劳永逸，所以写两个程序这种笨办法绝不是我们最后会选择的办法。</p><p>既然我们使用 selenium 模块是为了模拟浏览器，那么我们就模拟到底，关键词的输入也通过程序来解决。</p><p>首先我们使用 xpath 定位定位到搜索框的位置</p><p><img src="https://img-blog.csdnimg.cn/202106261944290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后输入关键词。使用<code>send_keys() 方法</code></p><p>话不多说，直接上代码。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    bor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.jd.com/"</span><span class="token punctuation">)</span>    key_word_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"奥特曼"</span><span class="token punctuation">,</span> <span class="token string">"小怪兽"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> key_word_list<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定位搜索框</span>        key_input <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定位搜索按钮</span>        key_bot <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输入关键词</span>        key_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击</span>        bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> key_bot<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回原始窗口</span>        bor<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 退出</span>    bor<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>其中</p><pre class=" language-python"><code class="language-python">bor<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span> 相当于浏览器的后退功能bor<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span> 相当于浏览器的前进功能</code></pre><h2 id="有关-iframe-框架的-xpath-定位-以-QQ-空间为例"><a href="#有关-iframe-框架的-xpath-定位-以-QQ-空间为例" class="headerlink" title="有关 iframe 框架的 xpath 定位(以 QQ 空间为例)"></a>有关 iframe 框架的 xpath 定位(以 QQ 空间为例)</h2><p>前面我们知道了输入关键词，然后我们就激动地想到了激动人心的使用selenium实现模拟登录了，话不多说我们直接上代码。</p><pre class=" language-python"><code class="language-python">rom time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://qzone.qq.com/"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 首先定位到 “账号密码登录” 并点击</span>    btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"switcher_plogin"</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguemnts[0].click()"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位到密码和账号输入框</span>    username <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">)</span>    username<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输入账号</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>    password<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"1213456"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输入密码</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 点击登录</span>    login_button <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"login_button"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但我们一运行就发现不对了，怎么报错了？<br><img src="https://img-blog.csdnimg.cn/20210626202302556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这是怎么回事？难道没有定位到响应的元素？那这是为什么呢？</p><p>我们分析源码发现我们要定位的元素都在 iframe 的框架下</p><p><img src="https://img-blog.csdnimg.cn/2021062620245365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>而直接使用 xpath 模块是无法直接定位框架下的元素的，所以我们要先进入这个框架</p><p>使用<code>bro.switch_to.frame(&quot;我们要定位的 iframe 的 ID&quot;) # 切换浏览器标签定位的作用域.</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path <span class="token operator">=</span> <span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果定位的标签是在 iframe 标签里面，则必须通过如下操作进行标签定位</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">"我们要定位的 iframe 的 ID"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 切换浏览器标签定位的作用域</span>div <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化动作链</span>action <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>bro<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 点击长按指定标签</span>action<span class="token punctuation">.</span>click_and_hold<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># perform() 表示立即执行动作链</span><span class="token comment" spellcheck="true"># move_by_offset(x, y)。 X 表示水平方向，Y 表示竖直方向</span>action<span class="token punctuation">.</span>move_by_offset<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># release 释放动作链</span>action<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 退出</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（3）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-3/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-3/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-模块自动化操作（2）（以京东为例）"><a href="#selenium-模块自动化操作（2）（以京东为例）" class="headerlink" title="selenium 模块自动化操作（2）（以京东为例）"></a>selenium 模块自动化操作（2）（以京东为例）</h1><h2 id="页面滚动"><a href="#页面滚动" class="headerlink" title="页面滚动"></a>页面滚动</h2><p>我们首先打开京东的页面，随便输入一个商品名称会看到如下的页面。</p><p>我们可以先数一数页面有多少商品。</p><p>如果我们使用滚轮滚动，我们就会发现在也页面滚动的时候页面同时也在不停地加载。</p><p>如果我们使用抓包工具，解析网页源码，在页面不滚动的情况下我们发现商品的数量是30个。</p><p><img src="https://img-blog.csdnimg.cn/20210526200651381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>也就是这时候 li 标签只有 30 个，如果我们把页面拉到底部，再看页面有的商品我们就会发现这时候有 60 个 li 标签</p><p>这也意味着多出来的 30 个商品是动态加载的数据，是不能直接通过 selenium 的 xpath 直接解析得到的，需要手动让它加载之后再进行 xapth 解析。</p><p>这就需要代码模拟页面滚动的操作。</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path <span class="token operator">=</span> <span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://search.jd.com/Search?keyword=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;enc=utf-8&amp;wq=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;pvid=52ea37a1c5614b668de352ffb60c7960"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用 javascript 命令 模拟页面滚动</span>    bro<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span></code></pre><h2 id="使用-javescript-命令实现鼠标点击"><a href="#使用-javescript-命令实现鼠标点击" class="headerlink" title="使用 javescript 命令实现鼠标点击"></a>使用 javescript 命令实现鼠标点击</h2><p>如果我们真的需要爬取京东的商品信息，一页信息肯定是不够的，这就需要我们模拟完成翻页。</p><p>按前面所学，我们可以先通过 xpath 解析得到按钮的信息，再使用 click() 方法实现模拟点击。</p><p>但实际上我们明明定位到了正确的元素，但程序会告诉我们此元素无法被点击。这是因为按钮上方有文字覆盖，比如说 “下一页” 。所以我们使用 javescript 命令实现按钮的点击。</p><p>接上述代码</p><pre class=" language-python"><code class="language-python">    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位到按钮（下一页）的位置</span>    btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'pn-next'</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> btn<span class="token punctuation">)</span></code></pre><h2 id="窗口的切换"><a href="#窗口的切换" class="headerlink" title="窗口的切换"></a>窗口的切换</h2><p>有时候我们可能需要商品详情页的信息，这样一来我们就需要对先打开的窗口进行 xpath 解析了。但现在我们的浏览器的页面其实一直停留在一开始打开的窗口，也就是说虽然向我们展示的是新打开的窗口，但实际上我们的自动化浏览器仍停留在原始的页面。</p><p>所以需要我们用代码实现窗口的转换</p><p>代码如下。接上述代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取窗口,返回为一个列表</span>    handles <span class="token operator">=</span> bro<span class="token punctuation">.</span>window_handles    <span class="token keyword">print</span><span class="token punctuation">(</span>handles<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 最后一个是新打开的窗口，跳转到这个窗口</span>    bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 滑到底部</span>    bro<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭新打开的窗口</span>    bro<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 退出</span>    bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（2）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-2/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-2/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-自动化操作（1）（以百度翻译为例）"><a href="#selenium-自动化操作（1）（以百度翻译为例）" class="headerlink" title="selenium 自动化操作（1）（以百度翻译为例）"></a>selenium 自动化操作（1）（以百度翻译为例）</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path <span class="token operator">=</span> <span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发起请求</span>    bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://fanyi.baidu.com/'</span><span class="token punctuation">)</span></code></pre><p>我们运行程序发现我们使用 selenium 请求到的网页和我们自己打开的网页有一点不同。</p><p>使用 selenium 请求到的网页多了一个页面窗口。</p><p><img src="https://img-blog.csdnimg.cn/20210524213534232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>那么我们要怎么使用 selenium 关闭这个窗口呢？</p><p>我们可以使用元素的 xpath 路径，元素的 id 名，或者说元素的属性定位到关闭的符号，并且使用 click() 方法模拟鼠标的点击。</p><p>这是定位元素的一些方法</p><p><img src="https://img-blog.csdnimg.cn/20210524214051535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用 class 属性定位到 “x” 符号</span>    btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'desktop-guide-close'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 模拟鼠标点击</span>    btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注意：<br>如果报错，很有可能是还没加载完成，可以使用 time.sleep() 让页面完成加载</p><p>接下来我们就看到页面来到我们熟悉的页面</p><p><img src="https://img-blog.csdnimg.cn/20210524214337671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>那么我们要怎么把我们想要翻译的文字输入到文本框中呢？</p><p>还是先定位到文本框的位置，再输入文字（使用 send_keys() 方法），点击翻译</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定位到文本框</span>    translate_input <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'baidu_translate_input'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 传入文字</span>    translate_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"奥特曼"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待两秒</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>结果如图</p><p><img src="https://img-blog.csdnimg.cn/20210524215153862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>因为是动态加载的数据，所以我们不需要点击 “ 翻译 ”，结果就会自动出现。如果需要点击，我们也可以先定位按键的位置，再模拟点击。</p><p>那么我们要如何获取翻译的结果呢？</p><p>我们知道动态加载的数据需要找到相应的 API，那么现在我们需要吗？答案是不需要，我们只需要对现在的页面进行 xpath 解析就行。</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree……<span class="token comment" spellcheck="true"># 获取此时的页面源码</span>    page <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_source    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    content <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main-outer"]/div/div/div[1]/div[2]/div[1]/div[2]/div/div/div[1]/p[2]/span/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果如下<br><img src="https://img-blog.csdnimg.cn/20210524220523678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（1）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-1/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-1/</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>selenium最初是一个自动化测试工具,而爬虫中使用它主要是为了解决requests无法直接执行JavaScript代码的问题</p><p>selenium本质是通过驱动浏览器，完全模拟浏览器的操作，比如跳转、输入、点击、下拉等，来拿到网页渲染之后的结果，可支持多种浏览器</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先是模块的安装</p><pre class=" language-cmd"><code class="language-cmd">pip3 install selenium</code></pre><p>因为使用的驱动浏览器，所以我们还需要下载响应浏览器的驱动浏览器。</p><p>以谷歌浏览器为例</p><p>这是驱动浏览器的网址<br><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p><p><img src="https://img-blog.csdnimg.cn/20210523204848280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>圈起来的部分是驱动浏览器对应的谷歌浏览器的版本号。我们选择一个和我们谷歌浏览器相符的文件夹下载下来就可以了。</p><p>下载的文件夹里会有一个可执行程序（.exe），我们可以每次复制粘贴对应的路径，也可以在写程序时将可执行程序和执行的代码放在同一个文件夹里。</p><p>我选择的是后者。</p><h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 选择使用的浏览器，比如我用的谷歌，所以我选择 Chrome</span>    <span class="token comment" spellcheck="true"># 参数传入的是驱动浏览器的路径</span>    bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path <span class="token operator">=</span> <span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 传入网址。以百度翻译为例</span>    bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://fanyi.baidu.com/'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待5秒后，退出浏览器界面</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——协程（3）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-3/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-3/</url>
      
        <content type="html"><![CDATA[<h1 id="用-aiohttp-完成异步爬取图片"><a href="#用-aiohttp-完成异步爬取图片" class="headerlink" title="用 aiohttp 完成异步爬取图片"></a>用 aiohttp 完成异步爬取图片</h1><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_photo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            photo <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\协程\\aiohttp 异步爬取图片\\'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 开始时间</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\协程\\aiohttp 异步爬取图片'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\协程\\aiohttp 异步爬取图片'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 指定url, 发送请求</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kfengjing/index.html"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">'https://pic.netbian.com/4kfengjing/index_%s.html'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">)</span><span class="token punctuation">.</span>text        response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            src <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a//text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> get_photo<span class="token punctuation">(</span><span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> src<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">)</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 协程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>看一下运行结果</p><p><img src="https://img-blog.csdnimg.cn/2021052210282593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210522102533884.png"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——协程（2）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-2/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-2/</url>
      
        <content type="html"><![CDATA[<h2 id="resquests-协程的尝试"><a href="#resquests-协程的尝试" class="headerlink" title="resquests 协程的尝试"></a>resquests 协程的尝试</h2><p>前面我们学习了协程的简单的语法，以及写了一段代码实现了简单的协程。而我们的目的是为了实现异步爬虫。所以我们就用 requests 模块尝试一下协程</p><h3 id="flask服务"><a href="#flask服务" class="headerlink" title="flask服务"></a>flask服务</h3><p>首先我们用 flask 设置一个简单的框架，因为我们的重点是协程，所以选择的网站越简单越好</p><p>代码如下</p><pre class=" language-python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/bobo'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_bobo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello bobo"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/jay'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_jay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello jay"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/tom"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_tom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello tom"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>threaded <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>运行结果如下</p><p><img src="https://img-blog.csdnimg.cn/20210520110054986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们会看到一个 url ，那个就是我们通过 flask 框架得到的一个根目录</p><h3 id="resquests-模块的尝试"><a href="#resquests-模块的尝试" class="headerlink" title="resquests 模块的尝试"></a>resquests 模块的尝试</h3><p>有了前期的准备工作，我们就可以试着通过 requests 模块进行协程的实现。</p><p>根据之前所学进行代码的编写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:5000/'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载成功，"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'bobo'</span><span class="token punctuation">,</span> <span class="token string">"jay"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> get_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">)</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span> tasks <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>但我们一运行程序就发现不对劲了，</p><p><img src="https://img-blog.csdnimg.cn/20210520110617346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>明明我们使用了协程，为什么时间反而没有什么变化呢？这究竟是为什么呢？</p><h2 id="aiohttp-模块实现协程"><a href="#aiohttp-模块实现协程" class="headerlink" title="aiohttp 模块实现协程"></a>aiohttp 模块实现协程</h2><p>上面我们发现 requests 模块实现不了协程。这是为什么呢？</p><p>其实原因很简单，requests.get 是基于同步，要想实现协程必须使用基于异步的网络请求模块进行 url 的请求发送。所以我们使用 aiohttp模块，基于异步的网络请求模块。</p><p>至于怎么使用 aiohttp ，就直接看代码好了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:5000/'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># text() 返回字符串形式的数据类型</span>            <span class="token comment" spellcheck="true"># read() 返回二进制形式的数据类型</span>            <span class="token comment" spellcheck="true"># json() 返回json串形式的数据类型</span>            <span class="token comment" spellcheck="true"># 注意：获取响应数据类型之前一定要用 await 进行手动挂起</span>            page <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载成功，"</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'bobo'</span><span class="token punctuation">,</span> <span class="token string">"jay"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> get_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">)</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span> tasks <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>让我们来看一些运行结果，看看是不是空欢喜一场</p><p><img src="https://img-blog.csdnimg.cn/20210520112612152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>运行时间确实是两秒，说明我们使用 aiohttp 实现了协程。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——协程（1）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-1/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-1/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h2><p>简单来说，协程就是同时开启多个任务，但一次只顺序执行一个。等到所执行的任务遭遇阻塞，就切换到下一个任务继续执行，以期节省下阻塞所占用的时间。</p><h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p><img src="https://img-blog.csdnimg.cn/2021051216021149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="简单的代码示例"><a href="#简单的代码示例" class="headerlink" title="简单的代码示例"></a>简单的代码示例</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 定义一个协程函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载 url"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等待。等待的是一个协程函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成，"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建协程任务</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建一个事件循环</span>        <span class="token comment" spellcheck="true"># 两种实现方式</span>    <span class="token comment" spellcheck="true"># 方式一</span>    <span class="token comment" spellcheck="true"># loop.run_until_complete( asyncio.wait(tasks) ) # 将任务注册到事件循环中</span>        <span class="token comment" spellcheck="true"># 方式二</span>    <span class="token keyword">for</span> task <span class="token keyword">in</span> tasks<span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>我们可以看看运行的结果</p><p><img src="https://img-blog.csdnimg.cn/20210512162245553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——线程池的使用（2）</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-2/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-2/</url>
      
        <content type="html"><![CDATA[<p>好吧，我们前面爬取图片发现使用了线程池后，其实我们的效率提高不是这么明显。那我们就来试一试爬取视频吧。因为不同的网站对视频的反爬的策略都不尽相同，所以我们这里讲的示例并没有普世的意义。唯一普世的做法是好好分析视频网址的存放地址。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>首先来讲一讲我们这次爬取的视频。</p><p>我们这次爬取的视频是梨视频娱乐模块最热的视频</p><p>即图片里的前三个（但我们打开抓包工具时，又发现其实是 4 个视频，不管是几个，关系都不大）</p><p><img src="https://img-blog.csdnimg.cn/20210511163822795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先我们先随便定位一个视频，得到如下的网页源码</p><p><img src="https://img-blog.csdnimg.cn/20210511164148109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这里的 a 标签下面有一个超链接，然后我们点击这个超链接，跳转网页，来到了视频播放页。注意这个超链接的内容，后面要用到。</p><p>接着我们再一次试图定位时，却发现我们找不到 .mp4 的网页。怎么办呢？</p><p><img src="https://img-blog.csdnimg.cn/2021051116464288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>没事，我们可以试着播放视频再进行定位。下面就是见证奇迹的时候了。</p><p><img src="https://img-blog.csdnimg.cn/20210511165135797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>当然，以我们目前所学是拿不到在这个动态加载的数据的，但这个步骤不是毫无用处的，我们要记住这串网址。</p><p><a href="https://video.pearvideo.com/mp4/third/20210508/cont-1728888-11721137-174842-hd.mp4">https://video.pearvideo.com/mp4/third/20210508/cont-1728888-11721137-174842-hd.mp4</a></p><p>因为是动态加载的数据，我们可以到 XHR 里面去找网址会不会在这里面。</p><p><img src="https://img-blog.csdnimg.cn/20210511165819832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们一看，果然在！</p><p>不过先别太激动，我们把阿贾克斯加载的网址复制下来，就又发现问题了。</p><p><a href="https://video.pearvideo.com/mp4/third/20210508/1620721592006-11721137-174842-hd.mp4">https://video.pearvideo.com/mp4/third/20210508/1620721592006-11721137-174842-hd.mp4</a></p><p>我们两相对比后，发现相差的部分是：“ cont-1728888 ”。那么 count 后面的数字是从什么地方来的呢？</p><p>还记得我们一开始爬取的超链接吗？</p><p>video_1728888。这里的数字不就是我们要的吗？</p><p>欧克，分析了之后，我们还要阿贾克斯加载的参数。</p><p><img src="https://img-blog.csdnimg.cn/20210511181811947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现其中的 contld 是已知的，那么剩下的 mrd 是什么呢？</p><p>很简单，什么都不是，只是一串随机数</p><p>到这里，我们就完成了对爬取梨视频的分析，剩下的就是代码的问题了。</p><h2 id="同步爬虫爬取梨视频"><a href="#同步爬虫爬取梨视频" class="headerlink" title="同步爬虫爬取梨视频"></a>同步爬虫爬取梨视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">save_video</span><span class="token punctuation">(</span>videoNum_title<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_num <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    title <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span><span class="token punctuation">,</span>        <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"https://www.pearvideo.com/"</span> <span class="token operator">+</span> <span class="token string">"video_"</span> <span class="token operator">+</span> video_num    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/videoStatus.jsp"</span>    <span class="token comment" spellcheck="true"># 传入参数</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"contId"</span><span class="token punctuation">:</span> video_num<span class="token punctuation">,</span>        <span class="token string">"mrd"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 获取假网址</span>    json <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    href <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"videos"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取真正的网址</span>    url <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"/.{13}-"</span><span class="token punctuation">,</span> <span class="token string">"/cont-"</span> <span class="token operator">+</span> video_num <span class="token operator">+</span> <span class="token string">"-"</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存视频</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"正在下载……"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/category_4"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="listvideoListUl"]/li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># li 标签列表</span>    List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div//div[@class="vervideo-title"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        video_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        List<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>video_num<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> videoNum_title <span class="token keyword">in</span> List<span class="token punctuation">:</span>        save_video<span class="token punctuation">(</span>videoNum_title<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210511195534468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>同步用时 45 秒，现在让我们试试异步</p><h2 id="异步爬虫爬取梨视频"><a href="#异步爬虫爬取梨视频" class="headerlink" title="异步爬虫爬取梨视频"></a>异步爬虫爬取梨视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> re<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">save_video</span><span class="token punctuation">(</span>videoNum_title<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_num <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    title <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span><span class="token punctuation">,</span>        <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"https://www.pearvideo.com/"</span> <span class="token operator">+</span> <span class="token string">"video_"</span> <span class="token operator">+</span> video_num    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/videoStatus.jsp"</span>    <span class="token comment" spellcheck="true"># 传入参数</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"contId"</span><span class="token punctuation">:</span> video_num<span class="token punctuation">,</span>        <span class="token string">"mrd"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 获取假网址</span>    json <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    href <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"videos"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取真正的网址</span>    url <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"/.{13}-"</span><span class="token punctuation">,</span> <span class="token string">"/cont-"</span> <span class="token operator">+</span> video_num <span class="token operator">+</span> <span class="token string">"-"</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存视频</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"正在下载……"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/category_4"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="listvideoListUl"]/li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># li 标签列表</span>    List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div//div[@class="vervideo-title"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        video_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        List<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>video_num<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用线程池</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>save_video<span class="token punctuation">,</span> List<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——线程池的使用(1)</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-1/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-1/</url>
      
        <content type="html"><![CDATA[<p>学到现在，我们可以说已经学习了爬虫的基础知识，如果没有那些奇奇怪怪的反爬虫机制，基本上只要有时间分析，一般的数据都是可以爬取的，那么到了这个时候我们需要考虑的就是爬取的效率了，关于提高爬虫效率，也就是实现异步爬虫，我们可以考虑以下两种方式：一是线程池的使用（也就是实现单进程下的多线程），一是协程的使用（如果没有记错，我所使用的协程模块是从python3.4以后引入的，我写博客时使用的python版本是3.9）。</p><p>今天我们先来讲讲线程池。</p><h2 id="同步代码演示"><a href="#同步代码演示" class="headerlink" title="同步代码演示"></a>同步代码演示</h2><p>我们先用普通的同步的形式写一段代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开始时间</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        func<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>对于代码运行的结果我们心里都有数，但还是让我们来看一下吧</p><p><img src="https://img-blog.csdnimg.cn/2021051020454987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>不出所料。运行时间果然是六秒</p><h2 id="异步，线程池代码"><a href="#异步，线程池代码" class="headerlink" title="异步，线程池代码"></a>异步，线程池代码</h2><p>那么如果我们使用线程池运行上述代码又会怎样呢？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开始时间</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span>    <span class="token punctuation">]</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>len<span class="token punctuation">(</span>url_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 实例化一个线程池对象，并且设定线程池的上限数量为列表长度。不设置上限也可以。</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> url_list<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>下面就是见证奇迹的时候了，让我们运行程序</p><p><img src="https://img-blog.csdnimg.cn/20210510205733844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这次我们的运行时间只用2～3秒。其实我们可以将线程池简单的理解为将多个任务同时进行。</p><p>注意：</p><ol><li>我使用的是 pycharm，如果使用的是 VS 或者说是 python 自带的 idle，在运行时我们只能看到最后时间的输出。</li><li>我们输出结果可能并不是按 abc 的顺序输出的。</li></ol><h2 id="同步爬虫爬取图片"><a href="#同步爬虫爬取图片" class="headerlink" title="同步爬虫爬取图片"></a>同步爬虫爬取图片</h2><p>因为我们的重点是线程池的爬取效率提高，我们就简单的爬取一页的图片。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">def</span> <span class="token function">save_photo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment" spellcheck="true"># 创建路径，避免重复下载</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"开始下载！！！"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 发送请求，获取源码</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析，获取图片的下载地址的列表</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li/a/@href'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过下载地址获取高清图片的地址和图片名称</span>    <span class="token keyword">for</span> href <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> href        <span class="token comment" spellcheck="true"># 再一次发送请求</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 再一次 xpath 解析</span>        new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 编译文字</span>        title <span class="token operator">=</span> title<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下载，保存</span>        save_photo<span class="token punctuation">(</span>src<span class="token punctuation">,</span> title<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>让我们看看同步爬虫需要多长时间</p><p><img src="https://img-blog.csdnimg.cn/2021051021433347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后再让我们看看使用线程池的异步爬虫爬取这些图片需要多久</p><h2 id="使用线程池的异步爬虫爬取4K美女图片"><a href="#使用线程池的异步爬虫爬取4K美女图片" class="headerlink" title="使用线程池的异步爬虫爬取4K美女图片"></a>使用线程池的异步爬虫爬取4K美女图片</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">save_photo</span><span class="token punctuation">(</span>src_title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    url <span class="token operator">=</span> src_title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    title <span class="token operator">=</span> src_title<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment" spellcheck="true"># 创建路径，避免重复下载</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"开始下载！！！"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 发送请求，获取源码</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析，获取图片的下载地址的列表</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li/a/@href'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 存储最后的网址和标题的列表</span>    src_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    title_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 通过下载地址获取高清图片的地址和图片名称</span>    <span class="token keyword">for</span> href <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> href        <span class="token comment" spellcheck="true"># 再一次发送请求</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 再一次 xpath 解析</span>        new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        src_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        title <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 编译文字</span>        title <span class="token operator">=</span> title<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>        title_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 下载，保存。使用线程池</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    src_title <span class="token operator">=</span> zip<span class="token punctuation">(</span>src_list<span class="token punctuation">,</span> title_list<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>save_photo<span class="token punctuation">,</span> list<span class="token punctuation">(</span>src_title<span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>让我们来看看运行的结果</p><p><img src="https://img-blog.csdnimg.cn/2021051022075983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>只用了 17 秒，可不要小瞧这几秒，如果数据太大，这些差距后来就会更大了。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不过我们必须要明白 线程池 是有上限的，这就是说数据太大，线程池的效率也会降低，所以这就要用到协程模块了。</p><p>欲知协程如何，且听下回分解。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——识别验证码（2）</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-2/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-2/</url>
      
        <content type="html"><![CDATA[<h2 id="模拟登录人人网"><a href="#模拟登录人人网" class="headerlink" title="模拟登录人人网"></a>模拟登录人人网</h2><p>前面我们学习了使用第三方平台实现验证码的识别，那现在就让我们来用验证码的识别实现人人网的登录。</p><p>首先我们先到人人网的登录页面去踩点。</p><p><img src="https://img-blog.csdnimg.cn/20210503195009957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>人人网登录在三次失败后需要输入验证码，那我们现在需要做的就是通过数据解析将验证码保存到本地（为了更好的使用第三方验证码识别平台）。</p><p>有了验证码之后，我们又要怎么通过爬虫实现登录呢？首先我们打开抓包工具，看看登陆时会发生什么。</p><p><img src="https://img-blog.csdnimg.cn/20210503201139254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>首先我们先点击那个禁止符号的符号，将数据清空，然后再点击 “ preserve log ”，然后我们再实现登录。</p><p><img src="https://img-blog.csdnimg.cn/20210503201520822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这里有一个 login 的文件，我们点开它。</p><p><img src="https://img-blog.csdnimg.cn/20210503201643494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这个文件的 data 一栏里的 icode 是我们输入的验证码，那么我们就有理由怀疑这一栏需要动态改变的就是 icode 这一栏，这就是说我们前面保存的验证码在这里就有用武之地。</p><p>分析结束，就开始写代码了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">base64_api</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> img<span class="token punctuation">,</span> typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b64 <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> uname<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> pwd<span class="token punctuation">,</span><span class="token string">"typeid"</span><span class="token punctuation">:</span>typeid<span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> b64<span class="token punctuation">}</span>    result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://api.ttshitu.com/predict"</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    src <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="verifyPic_login"]/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 验证码网址</span>    <span class="token comment" spellcheck="true"># 保存验证码</span>    photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./验证码.jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>    img_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\验证码识别\\验证码.jpg"</span>    result <span class="token operator">=</span> base64_api<span class="token punctuation">(</span>uname<span class="token operator">=</span><span class="token string">'账号'</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span> img<span class="token operator">=</span>img_path<span class="token punctuation">,</span> typeid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 登录网址</span>    url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=20214120314"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"15157485037"</span><span class="token punctuation">,</span>        <span class="token string">"icode"</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span>        <span class="token string">"origURL"</span><span class="token punctuation">:</span> <span class="token string">"http://www.renren.com/home"</span><span class="token punctuation">,</span>        <span class="token string">"domain"</span><span class="token punctuation">:</span> <span class="token string">"renren.com"</span><span class="token punctuation">,</span>        <span class="token string">"key_id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"captcha_type"</span><span class="token punctuation">:</span> <span class="token string">"web_login"</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"8a62222be07c2cf68e8d68f4617fe01d7dbc488427d0bc61666ab8a6e56e94f0"</span><span class="token punctuation">,</span>        <span class="token string">"rkey"</span><span class="token punctuation">:</span> <span class="token string">"07a9f1810ecf9b507634a45447a628e7"</span><span class="token punctuation">,</span>        <span class="token string">"f"</span><span class="token punctuation">:</span> <span class="token string">"http%3A%2F%2Fwww.renren.com%2F976706166%2Fprofile"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 模拟登录</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断登录状态。 200 说明登录成功</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>我们看一下运行结果</p><p><img src="https://img-blog.csdnimg.cn/20210503204354483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>说明登录成功。</p><p>注意：</p><p>我们一般用这种方法判断是否登录，其实也可以保存页面来判断，但有一些网站登录成功后返回的并非是网页而是 json 串，所以我们通常用 status code 来判断是否成功，200 表示和网页连接成功。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 爬虫识别验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——识别验证码（1）</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-1/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-1/</url>
      
        <content type="html"><![CDATA[<h2 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h2><p>我们使用爬虫时很有可能需要登录，而现在的平台登陆时都需要验证码才能完成登录，所以我们使用爬虫模拟登录时验证码是必须要跨过的坎。一般情况下，我们使用第三方平台实现验证码的识别。</p><p>所以我在这里介绍一个识别验证码的平台——图鉴（比较常见的有超级鹰，反正其实这些平台注册、使用流程都差不多）。</p><p>首先我们打开图鉴的网址 “ <a href="http://www.ttshitu.com/">http://www.ttshitu.com/</a> ”，点击注册</p><p><img src="https://img-blog.csdnimg.cn/20210502163426391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210502163508464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>登录成功后，我们首先看一下“价格”，其实也可以在注册帐号前看一看价格，再决定是否注册。在登陆后，因为识别验证码需要登录，所以我们在使用前要确定自己的帐号里是否还有余额。我觉得这些平台的充值还是挺人性化的，，是允许我们在平台上充值一块五毛的。</p><p>我们的账号里有钱了，然后再打开开发文档。因为我们使用的是python，所以我们选择python的开发文档</p><p><img src="https://img-blog.csdnimg.cn/20210502164158248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210502164255701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>将第一个脚本复制下来，用 IDLE 打开，我们看到代码部分的注释是提示我们 typeid 的参数选择。</p><p>在我们开始分析代码，代码自定义了一个函数，这个函数我们不需要看懂，重要的是下面的主程序，我们需要改的是我上面圈起来的部分，也就是运行程序时需要输入验证码的保存路径（也就是说我们需要将验证码先保存到本机），需要在程序中输入我们图鉴的账号和密码。</p><p>我这里有一张验证码，现在就让我们试试图鉴的脚本</p><p><img src="https://img-blog.csdnimg.cn/20210502164849608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">base64_api</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> img<span class="token punctuation">,</span> typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b64 <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> uname<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> pwd<span class="token punctuation">,</span> <span class="token string">"typeid"</span><span class="token punctuation">:</span> typeid<span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> b64<span class="token punctuation">}</span>    result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://api.ttshitu.com/predict"</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    img_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\验证码.jpg"</span> <span class="token comment" spellcheck="true"># 这里填写验证码的路径</span>    result <span class="token operator">=</span> base64_api<span class="token punctuation">(</span>uname<span class="token operator">=</span><span class="token string">'账号'</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span> img<span class="token operator">=</span>img_path<span class="token punctuation">,</span> typeid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 因为验证码里有数字和中文，我们 typeid 选择 3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>结果如下</p><p><img src="https://img-blog.csdnimg.cn/20210502165649844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后我们回到图鉴网站个人中心看看，结果如下</p><p><img src="https://img-blog.csdnimg.cn/20210502165922741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>注意：<br>验证码的识别正确率并不是 100% 的，有时需要多次识别</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 爬虫识别验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（4）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-4/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-4/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取全国的城市名称以及“或”的简单介绍"><a href="#爬取全国的城市名称以及“或”的简单介绍" class="headerlink" title="爬取全国的城市名称以及“或”的简单介绍"></a>爬取全国的城市名称以及“或”的简单介绍</h2><p>首先是爬取全国城市名称</p><p>网址如下：<a href="https://www.aqistudy.cn/historydata/">https://www.aqistudy.cn/historydata/</a></p><p>我们打开网页进行简单的数据分析</p><p><img src="https://img-blog.csdnimg.cn/20210501164316716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现我们需要爬取的名称都在 li 标签里。根据这个我们可以很简单地写我们的代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.aqistudy.cn/historydata/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析。热门城市名称爬取</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    hot_city_name_li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="hot"]//li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 热门城市名称的 li 标签的列表</span>    hot_city_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> hot_city_name_li_list<span class="token punctuation">:</span>        hot_city_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hot_city_name<span class="token punctuation">,</span> len<span class="token punctuation">(</span>hot_city_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># xpath 解析。全部城市名称爬取</span>    all_city_li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="all"]//li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 全部城市名称的 li 标签的列表</span>    all_city_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> all_city_li_list<span class="token punctuation">:</span>        all_city_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>all_city_name<span class="token punctuation">,</span> len<span class="token punctuation">(</span>all_city_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>看一下我们的运行结果</p><p><img src="https://img-blog.csdnimg.cn/20210501174210248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>我们这里爬取的名称是所有城市里包括热门城市的，要是不包括，我们要获取这些城市的名称，难道要把两个列表直接加起来吗？虽然不是不行，但实际上还是多写了几行代码的。</p><p>所以在这里介绍一下 xpath 里面的 “或”（“|”）和 “or” 的作用一样</p><p>闲话少说，直接看代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.aqistudy.cn/historydata/"</span>        <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析。“|”的使用</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    city_name <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="hot"]//li/a/text() | //div[@class="all"]//li/a/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>city_name<span class="token punctuation">,</span> len<span class="token punctuation">(</span>city_name<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行一下</p><p><img src="https://img-blog.csdnimg.cn/20210501175310824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>名称个数正好是 394 &#x3D; 384 + 10</p><p>xpath 的 “或” 你学会了吗？</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（3）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-3/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-3/</url>
      
        <content type="html"><![CDATA[<p>什么？我怎么又讲爬取图片？拜托，这可是 4k 图片，清晰度杠杠的。再说，爬取糗图算什么本事，做人要爬取的肯定是妹子图片，而且是 4k 的妹子图片，是不是很激动？放心，这次不晃你。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>首先让我们打开网页，好好欣赏一下美丽的妹子……哦不，我是说，好好的欣赏一下优美的网页源码。网址如下：<a href="https://pic.netbian.com/4kmeinv/">https://pic.netbian.com/4kmeinv/</a></p><p><img src="https://img-blog.csdnimg.cn/20210427102805472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>看，是不是优美的妹子？……额咳咳，我是说优美的源码。</p><p>很好，我们注意一下定位到的源码数据，也就是我圈的地方，这里有图片的网址和图片的标题。我们就把原标题作为我们下载后的标题。注意，这里的网址没有域名，是需要我们自己加的，也就是 “<a href="https://pic.netbian.com”./">https://pic.netbian.com”。</a></p><p>欧克，是不是迫不及待了，让我们和小姐姐更进一步吧，咳咳，我是说，不说了，你懂的！</p><h1 id="文字编译"><a href="#文字编译" class="headerlink" title="文字编译"></a>文字编译</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定网址</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_url_ist<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果测试的时候发现不对了，我们的标题全都变成乱码了<br><img src="https://img-blog.csdnimg.cn/20210427104018346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>再一看，哦，我们太激动忘记编译了，赶紧编译一下。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定网址</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encode <span class="token operator">=</span> <span class="token string">"utf-8"</span>    response <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这回总该可以了吧，再一看，怎么回事，还是乱码。<br><img src="https://img-blog.csdnimg.cn/20210427104924212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这是为什么？难道说所谓的 4k 美女图片只可远观不可亵玩吗？我不相信，赶紧去研究研究。正所谓，“X 是第一生产力”，我很快就研究出结果了，一般情况下，如果源码里有中文，我们可以有两种办法。一种是我们用的方法，另一种方法如下：</p><pre class=" language-python"><code class="language-python">response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span></code></pre><p>我们再试一次</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定网址</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>测试一下<br><img src="https://img-blog.csdnimg.cn/20210427112301876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>欧克，是中文了，接着可以爬取4k妹子图片了。</p><h1 id="爬取妹子图"><a href="#爬取妹子图" class="headerlink" title="爬取妹子图"></a>爬取妹子图</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻三页</span>        <span class="token comment" spellcheck="true"># 指定网址</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/index_%s.html"</span> <span class="token operator">%</span> index        <span class="token comment" spellcheck="true"># 获取源码</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>        title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 测试</span>        <span class="token comment" spellcheck="true"># print(new_url_list)</span>        <span class="token comment" spellcheck="true"># print()</span>        <span class="token comment" spellcheck="true"># print(title_list)</span>        <span class="token comment" spellcheck="true"># print(len(title_list) == len(new_url_list))</span>        num <span class="token operator">=</span> len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_url_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            title <span class="token operator">=</span> title_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 保存</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>完成后，我们激动地打开图片，滚烫的热血突然就冷下来了，不是说是4k高清图吗，怎么不仅是缩略图，而且画质还不行。</p><p><img src="https://img-blog.csdnimg.cn/20210427161904231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>别着急，这可不是我骗你，是网址留了一手。</p><h1 id="爬取真正的4k妹子图"><a href="#爬取真正的4k妹子图" class="headerlink" title="爬取真正的4k妹子图"></a>爬取真正的4k妹子图</h1><p>现在我们知道了网址源码里的网址是缩略图，那么我们怎么办呢？很简单，我们点击一下会怎样？</p><p><img src="https://img-blog.csdnimg.cn/20210427162913212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>然后我们来到了下载页面。</p><p><img src="https://img-blog.csdnimg.cn/20210427162227702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>现在我们没有任何办法，那就试着看看现在的网页源码好了。</p><p>结果我们发现了两个图片的地址，点开，发现一个是缩略图，一个是4k妹子图。如图。</p><p><img src="https://img-blog.csdnimg.cn/20210427162537689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>是不是又感觉热血沸腾了？嘿嘿</p><p>闲话少说，赶紧改进代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片(4k)"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片(4k)"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻三页</span>        <span class="token comment" spellcheck="true"># 指定网址</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/index_%s.html"</span> <span class="token operator">%</span> index        <span class="token comment" spellcheck="true"># 获取源码</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># li 标签所在的列表，下载页面的网址在 li 标签内</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 获取下载页面的网址</span>            new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 获取下载页面的网页源码</span>            new_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text            new_response <span class="token operator">=</span> new_response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 编译文字</span>            <span class="token comment" spellcheck="true"># xpath 解析</span>            new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>new_response<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 下载的地址</span>            src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 图片标题</span>            title <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 获取图片</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 保存</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片(4k)\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载成功！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>运行结束了，赶紧打开照片看一看，很好，这次真的是4k妹子图片了。</p><p><img src="https://img-blog.csdnimg.cn/2021042716474955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（2）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-2/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-2/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取二手房信息"><a href="#爬取二手房信息" class="headerlink" title="爬取二手房信息"></a>爬取二手房信息</h2><p>说到二手房信息，不知道你们心里最先跳出来的公司（网站）是什么，反正我心里第一个跳出来的是网站是 58 同城。哎呦，我这暴脾气，想到就赶紧去干。</p><p>但很显然，我失败了。说显然，而不是不幸，这是因为 58 同城是大公司，我这点本事爬不了数据是再正常不过的了。下面来看看 58 同城的反爬手段了。这是我爬取下来的网页源码。</p><p><img src="https://img-blog.csdnimg.cn/20210425210918311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们看到爬取下来的源码有很多英文大写字母和数字是网页源码中没有的，后来我了解到 58 同城对自己的网站的源码进行了文本加密，所以就出现了我爬取到的情况。</p><p>然后我再打开 58 同城的 robots 协议。</p><p><img src="https://img-blog.csdnimg.cn/20210425211451911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>好家伙，不愧是大公司，所有的动态网址都不让爬取，打扰了。我只好转头离开，去寻找可以让我这种小白爬取的二手房网站。于是我找到了这个网站<a href="https://bj.c21.com.cn/ershoufang/">https://bj.c21.com.cn/ershoufang/</a> 不知道是我的原因，还是别的原因，反正我是没有找到这个网站的 robots 协议。不管了，既然没找到，就默认没有吧，直接开始爬取。</p><p>我本来打算通过二手房的目录跳到一个具体信息，然后爬取二手房的一些基本信息和属性。</p><p><img src="https://img-blog.csdnimg.cn/20210425213046811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210425213052882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>像我红笔圈起来的部分。但很可惜我失败了，后来我看了看红笔圈起来的部分的爬取到的源码。</p><p><img src="https://img-blog.csdnimg.cn/20210425213736240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>好家伙，还可以这样。不过这怎么可以难倒机智的我？（其实我真不知道怎么解决它）。没关系，之前的源码里不是有类似的信息吗？我只好将就一下了。</p><p><img src="https://img-blog.csdnimg.cn/20210425213956189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后是翻页。翻页问题很好解决，我们很快就发现网页都是 <a href="https://bj.c21.com.cn/ershoufang/pg2/">https://bj.c21.com.cn/ershoufang/pg2/</a><br>其中的页数和 pg 后面的数字有关。</p><p>然后就是分析这些数据源码的位置了。</p><p><img src="https://img-blog.csdnimg.cn/20210426161416707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>首先，我们发现我们要爬取的数据全在 li 标签里，所以我们可以先获得 li 标签的列表。伪代码就像这样。</p><pre class=" language-python"><code class="language-python">form lxml <span class="token keyword">import</span> etree……   ……tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>源码<span class="token punctuation">)</span>li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span> li 标签的路径<span class="token punctuation">)</span></code></pre><p>这时候我们获得的就是 li 标签的 etree 的类，可以继续使用 etree 类里的函数。然后我们就可以利用 for 循环提出不同房源的 li 标签，根据自己的需要获取文本信息。</p><p>欧克，了解了这些（感觉源码前前后后就是四个字 ”我是菜鸡“ ）我们就可以开始写代码了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> re<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> pg <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        <span class="token comment" spellcheck="true"># 指定 url</span>        url <span class="token operator">=</span> <span class="token string">"https://bj.c21.com.cn/ershoufang/pg%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>pg<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取网页源码</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="availability"]/li'</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 房子的名称</span>            <span class="token comment" spellcheck="true"># print(title[0]) # 测试</span>            add <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div/p//a/text()'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 地址</span>            add <span class="token operator">=</span> add<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token operator">+</span> add<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 地址范围由大到小</span>            <span class="token comment" spellcheck="true"># print(add) # 测试</span>            div_list <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div[2]/div'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 具体信息</span>            message_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"建筑面积"</span><span class="token punctuation">,</span> <span class="token string">"房屋户型"</span><span class="token punctuation">,</span> <span class="token string">"房屋朝向"</span><span class="token punctuation">,</span> <span class="token string">"所在楼层"</span><span class="token punctuation">,</span> <span class="token string">"装修情况"</span><span class="token punctuation">,</span> <span class="token string">"建成时间"</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                div <span class="token operator">=</span> div_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                message <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                message <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"\s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 因为发现获取的文本有很多换行符和空格，所以需要去掉</span>                message <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"\\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>                message_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> message_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> message            <span class="token comment" spellcheck="true"># print(message_list) # 测试</span>            <span class="token comment" spellcheck="true"># 交通情况</span>            traffic <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div[4]//text()'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(traffic) # 测试</span>            <span class="token comment" spellcheck="true"># 价格情况</span>            price <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div[3]//text()'</span><span class="token punctuation">)</span>            price <span class="token operator">=</span> price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> price<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(price) # 测试</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\二手房\\"</span> <span class="token operator">+</span> <span class="token string">"二手房.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> message <span class="token keyword">in</span> message_list<span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>message <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> traffic <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"交通情况：无介绍"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"交通情况："</span> <span class="token operator">+</span> traffic<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"价格："</span> <span class="token operator">+</span> price <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>最后的运行结果就像这样<br><img src="https://img-blog.csdnimg.cn/20210426162555822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="保存的二手房信息"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（1）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-1/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-1/</url>
      
        <content type="html"><![CDATA[<h1 id="xpah-的语法认识"><a href="#xpah-的语法认识" class="headerlink" title="xpah 的语法认识"></a>xpah 的语法认识</h1><p>闲话少说，直接上图<br><img src="https://img-blog.csdnimg.cn/20210424210554393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="xpath 介绍"></p><h1 id="xpath-爬取图片"><a href="#xpath-爬取图片" class="headerlink" title="xpath 爬取图片"></a>xpath 爬取图片</h1><p>代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图（xpath）"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图（xpath）"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        <span class="token comment" spellcheck="true"># 指定url</span>        url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取源码</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        src_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="thumb"]/a/img/@src'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(src_list) # 测试定位是否有错误</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> src_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 新的url</span>            new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> src            <span class="token comment" spellcheck="true"># 获取图片</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span>new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 存储</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./糗图（xpath）/"</span> <span class="token operator">+</span> title<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载成功！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><h1 id="xpath-爬取三国演义"><a href="#xpath-爬取三国演义" class="headerlink" title="xpath 爬取三国演义"></a>xpath 爬取三国演义</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url </span>    url <span class="token operator">=</span> <span class="token string">"http://sanguo.5000yan.com/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span>header<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span> <span class="token comment" spellcheck="true"># 编译源码，防止乱码</span>    response <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    src_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="sidamingzhu-list-mulu"]//li[@class="menu-item"]/a/@href'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(src_list) # 测试是否正确</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="sidamingzhu-list-mulu"]//li[@class="menu-item"]/a/text()'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(title_list) # 测试是否正确</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>src_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 指定新的url</span>        new_url <span class="token operator">=</span> src_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        title <span class="token operator">=</span> title_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 获取新的网页源码</span>        page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>        page_text<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>        page_text <span class="token operator">=</span> page_text<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># xpath 解析</span>        new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        page <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//section[@class="section-body"]//div[@class="grap"]//text()'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 存储</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n\n"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> page<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载成功！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——bs4</title>
      <link href="/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-bs4/"/>
      <url>/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-bs4/</url>
      
        <content type="html"><![CDATA[<h2 id="简单地使用bs4实现数据解析"><a href="#简单地使用bs4实现数据解析" class="headerlink" title="简单地使用bs4实现数据解析"></a>简单地使用bs4实现数据解析</h2><p>因为正则表达式本身有难度，所以在这里为大家介绍一下 bs4 实现数据解析。除此之外还有 xpath 解析。因为 xpath 不仅可以在 python 中使用，所以 bs4 和 正则解析一样，仅仅是简单地写两个案例（爬取可翻页的图片，以及爬取三国演义）。以后的重点会在 xpath 上。</p><p>闲话少说，我们先来安装 bs4 相关的外来库。比较简单，首先打开 cmd 命令面板，依次安装bs4 和 lxml。 命令分别是 pip install bs4 和 pip install lxml 。 安装完成后我们可以试着调用他们，看看会不会报错。因为本人水平有限，所以如果出现报错，兄弟们还是百度一下好啦。（总不至于 cmd 命令打错了吧 ~~） </p><p>闲话少说，先简单介绍一下 bs4 的用法。</p><p><img src="https://img-blog.csdnimg.cn/2021042418453326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210424184537952.png"></p><h2 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图（bs4）"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图（bs4）"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取源码数据</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 数据解析</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        data_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".thumb > a"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            url <span class="token operator">=</span> data<span class="token punctuation">.</span>img<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span>            title <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> url            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 存储</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./糗图（bs4）/"</span> <span class="token operator">+</span> title<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><h2 id="爬取三国演义"><a href="#爬取三国演义" class="headerlink" title="爬取三国演义"></a>爬取三国演义</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># URL</span>    url <span class="token operator">=</span> <span class="token string">"http://sanguo.5000yan.com/"</span>    <span class="token comment" spellcheck="true"># 请求命令</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    page_text<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>    page_text <span class="token operator">=</span> page_text<span class="token punctuation">.</span>text    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page_text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># bs4 解析</span>    li_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".sidamingzhu-list-mulu > ul > li"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>        new_url <span class="token operator">=</span> li<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 新的请求命令</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>        response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>        new_page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text        new_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>new_page_text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> new_soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> class_ <span class="token operator">=</span> <span class="token string">"grap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> page<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——正则解析（2）</title>
      <link href="/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-2/"/>
      <url>/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-2/</url>
      
        <content type="html"><![CDATA[<h1 id="上一篇的翻页爬取图片代码"><a href="#上一篇的翻页爬取图片代码" class="headerlink" title="上一篇的翻页爬取图片代码"></a>上一篇的翻页爬取图片代码</h1><p>话不多说，直接上代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图（翻页）"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图（翻页）"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我们观察不同页数的网址会发现不同页数的网址的差异在于最后的数字</span>        <span class="token comment" spellcheck="true"># 发送请求</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 正则解析</span>        ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb">.*?&lt;img src="(.*?)" alt=".*?&lt;/div>'</span>        data_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(data_list) # 试着打印看看这是不是我们需要的东西</span>        <span class="token comment" spellcheck="true"># 指定图片的 url</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> i            title <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            path <span class="token operator">=</span> <span class="token string">"./糗图（翻页）/"</span> <span class="token operator">+</span> title                        <span class="token comment" spellcheck="true"># 发送请求</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 保存</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><h1 id="爬取《三国演义》"><a href="#爬取《三国演义》" class="headerlink" title="爬取《三国演义》"></a>爬取《三国演义》</h1><p>爬取图片难道就可以满足我们了吗？俗话说的好，书中自有黄金屋，书中自有颜如玉。只爬取妹子图怎么可以满足我？要来就干票大的，钱和美女我都要！！！那么说来就来，就让我们来爬取《三国演义》吧。</p><p>首先我们打开《三国演义》的目录发现所有的章节都是一个超链接，所以我们需要对该网址进行数据解析，得到所有章节的url，然后对新的 url 进行数据解析，得到网址中的所有文本信息。</p><p><img src="https://img-blog.csdnimg.cn/20210424161705238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210424161717254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>思路比较简单，了解之后，就可以直接写代码了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"http://sanguo.5000yan.com/"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span> <span class="token comment" spellcheck="true"># 编译源码，不然我们得到的就是一些乱码</span>    page <span class="token operator">=</span> page<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 正则解析</span>    ex <span class="token operator">=</span> <span class="token string">'&lt;li .*? href="(.*?)">(.*?)&lt;/a>&lt;/li>'</span>    new_url_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(new_url_list) # 测试是否为我们要的 url</span>    <span class="token keyword">for</span> new_url <span class="token keyword">in</span> new_url_list<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> new_url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        new_page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>        new_page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span> <span class="token comment" spellcheck="true"># 编译源码，不然我们得到的就是一些乱码</span>        new_page <span class="token operator">=</span> new_page<span class="token punctuation">.</span>text        ex <span class="token operator">=</span> <span class="token string">'&lt;div>(.*?)&lt;/div>'</span>        page_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> new_page<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 存储</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">if</span> title <span class="token operator">==</span> <span class="token string">"第一回 宴桃园豪杰三结义 斩黄巾英雄首立功"</span><span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 因为我们用正则表达式得到的数据里有超链接，所以我们需要把这些都替换掉</span>        <span class="token keyword">for</span> sencetence <span class="token keyword">in</span> page_text<span class="token punctuation">:</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&lt;.*?>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;mdash;"</span><span class="token punctuation">,</span> <span class="token string">"—"</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;ldquo;"</span><span class="token punctuation">,</span> <span class="token string">"“"</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;rdquo;"</span><span class="token punctuation">,</span> <span class="token string">"”"</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"\s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>                        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                <span class="token keyword">if</span> sencetence <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> sencetence<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span></code></pre><p>运行结束后，我们打开文件，结果如下。</p><p><img src="https://img-blog.csdnimg.cn/20210424170658526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——正则解析（1）</title>
      <link href="/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-1/"/>
      <url>/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-1/</url>
      
        <content type="html"><![CDATA[<h2 id="正则解析爬取图片"><a href="#正则解析爬取图片" class="headerlink" title="正则解析爬取图片"></a>正则解析爬取图片</h2><p>因为讲的是正则解析，而不是正则表达式，所以我就默认大家会正则表达式了。最多在这里给大家看一下正则的语法。</p><p><img src="https://img-blog.csdnimg.cn/20210420193405429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这也是我从B站上截图截下来的。因为我自己都是学的半懂不懂的，实在没那脸说在这里讲正则表达式怎么写。</p><p>如果感觉学不会怎么办？没事，我们 python 的数据解析有正则解析、bs4解析和 xpath 解析。总有一款适合你。（这些后面都会讲到）</p><p>言归正传，什么是数据解析，在我看来，数据解析简单来说就是分析网页的源代码。</p><p>还记得像套娃一样的药监局吗？我似乎说过可以通过数据解析解决。欧克，那就让我们看一下，数据解析这么解决这个问题。</p><p>先点击左边圈起来的有鼠标样式的按键，将它移到我们的公司超链接上单击。神奇的事情发生了。<br><img src="https://img-blog.csdnimg.cn/20210420194645235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210420194844157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们看到了一个网址，我们直接点击网址看看会发生什么。</p><p><img src="https://img-blog.csdnimg.cn/20210420194952502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>哦豁，我们来到了这个页面，然后我们重复的步骤，将鼠标移到我们要爬取的数据上单击，然后我们就在网页上看到了我们要爬取的文本。</p><p><img src="https://img-blog.csdnimg.cn/20210420195144448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>那我们是不是只要爬取我们在网页源码上看到的文本就可以了。是不是很简单？你要套娃？我直接开拆，是不是很有趣？</p><p>那我们前面学的 requests 模块是不是没什么用？</p><p>当然不是，爬取整张网页不是 requests 简单吗？再说就算有数据解析，有时候也不见得简单。比如说百度翻译，你可以试试用数据解析爬取，相信我，还不如分析它的 XHR 。</p><p>当然我们今天不搞药监局，天天看文字，不得恶心？今天我们来爬取图片。嘿嘿嘿嘿，图片~。我们今天的目标是妹子，哦不，是糗图网（<a href="https://www.qiushibaike.com/imgrank/%EF%BC%89%E3%80%82">https://www.qiushibaike.com/imgrank/）。</a></p><p><img src="https://img-blog.csdnimg.cn/20210420200837255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>首先我们定位到一张图片，复制我们看到的链接，在前面加上 ” https: “ 会发现这就是我们需要的爬取东西。那么我们怎么爬取呢？很简单，在网页的源代码中查找。</p><p><img src="https://img-blog.csdnimg.cn/20210420201842147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>如果我们试着去定位多个图片的源码位置，我们会发现所有我们需要的数据都在标签<code>&lt;div class= &quot;thumb&quot;</code>下面的<code>&lt;img src</code>里面，这时候我们就可以发挥正则表达式的强大作用了。</p><p>话不多说，直接上代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果不存在这个文件，创建一个文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url </span>    url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/"</span>    <span class="token comment" spellcheck="true"># 发送请求，获取网页源码</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 对源代码进行正则解析</span>    ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb".*?&lt;img src="(.*?)" alt=".*?&lt;/div>'</span>    data_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># re.S 是必要的，因为我们是要单行查找</span>    <span class="token comment" spellcheck="true"># print(data_list)  我们可以先打印看看是否符合要求</span>        <span class="token comment" spellcheck="true"># 在爬取到的内容前加上 “https:”形成新的 url</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> data        title <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 请求命令</span>        photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content <span class="token comment" spellcheck="true"># conntent 命令是为了将爬取到的数据转换成数据流</span>        path <span class="token operator">=</span> <span class="token string">"./糗图/"</span> <span class="token operator">+</span> title        <span class="token comment" spellcheck="true"># 保存</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 给一个下载完成的提示</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>然后我们查看新建的文件夹</p><p><img src="https://img-blog.csdnimg.cn/20210420215110158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>这说明我们成功了。当然我们只爬取了一页网页的图片，如果我们要爬取动态的网页的图片要怎么做呢？</p><p>给个提示，观察一下第二页第三页网址的区别。</p><p>这不得自己试着写一下。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（6）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-6/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-6/</url>
      
        <content type="html"><![CDATA[<h1 id="药监局爬取"><a href="#药监局爬取" class="headerlink" title="药监局爬取"></a>药监局爬取</h1><p>是不是在看到 “ 药监局 ” 这三个字的时候，突然想到爬虫可能会进局子的事实？ 说到局子，我突然想到另一件事，因为前面写的是很基础的代码，没有代理池，所以在写的时候，特别是爬取翻页的时候，尽量减少爬取的页数，不然，额，后果自负。</p><p>开个玩笑，没什么大问题的，就是很有可能自己的 IP 会被对面拉入黑名单（目前学的代码而言）</p><p>欧克，言归正传，让我们回到药监局的爬取上吧。如果不出意外的话，这是 requests 模块的最后练习了，结束之后就是激动人心的数据解析了。</p><p>先说说药监局网站，我不清楚是因为我用的是学校局域网的原因，还是药监局网站本身的数据维护更新原因，我这边晚上八点半之后就打开不了药监局网站了。</p><p>闲话少说（其实说了很多），我们先打开药监局网站（<a href="http://scxk.nmpa.gov.cn:81/xk/%EF%BC%89%EF%BC%8C%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F%E3%80%82">http://scxk.nmpa.gov.cn:81/xk/），一探究竟。</a><br><img src="https://img-blog.csdnimg.cn/20210420150643122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>当我们随便点击一家企业时，得到的界面如下：</p><p><img src="https://img-blog.csdnimg.cn/20210420150720521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>而这些企业具体信息是我们今天要爬取的对象数据。</p><p>首先我们来爬取药监局的首页数据。<br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 URL</span>    url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 保存</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./药监局.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>然后我们打开保存的文件一看。<br><img src="https://img-blog.csdnimg.cn/20210420151921155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>唉，为什么，明明已经加载完成了，但我们看不到任何企业的信息？</p><p>别着急，让我们现在回到药监局的首页，打开抓包工具的 “ Network ” 分析一波（当然其实我们可以使用 数据解析 解决这个问题，但实际上我们还没学不是吗？）。欧克，回到抓包工具，点击 response。</p><p><img src="https://img-blog.csdnimg.cn/20210420152351636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后在按下 “ctrl” + “F”，开始查找</p><p><img src="https://img-blog.csdnimg.cn/20210420152537239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现网页源码上并没有 “海南” ， 但我们的公司名称里却有，这说明，我们对应的 url 并不能获取我们需要的数据，那么这些数据在哪里呢？不知道你们有没有想到我们前面提到过的 AJAX。好吧，既然我们没有别的办法，那就试试喽。</p><p>结果这一看真是不得了。</p><p><img src="https://img-blog.csdnimg.cn/20210420153033526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>response 里的 json 不就是我们想要的吗？赶紧兴奋地去在线解析一下<br><img src="https://img-blog.csdnimg.cn/20210420153306674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们会发现这些数据里面的 ID 特别显眼，然后再回到我们公司的具体信息的页面，一看，我的天呀，这是什么啊。<br><img src="https://img-blog.csdnimg.cn/20210420153703282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这不就是我们要的 url 里的动态部分吗？别太激动了，试验一下。</p><p><img src="https://img-blog.csdnimg.cn/20210420153841806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>一验证，发现果然如此，这不得仰天长啸一翻，天不亡我。</p><p>好了，既然得到了这些信息，我们是不是就可以写代码了吗？</p><p>当然你要写没有拦你，但你打开一看自己得到的数据或是网页，就会发现，结果和前面一样，没有任何数据。然后我们再一次重复上面的数据就会发现数据还是被保存在 XHR 的请求中，是不是特别想说一句 “ 禁止套娃 ”？</p><p>不管有多少脏话要骂，还是要写代码，唉，要不边写边骂？</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 XHR 的 url</span>    url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList"</span>    <span class="token comment" spellcheck="true"># data</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"on"</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>        <span class="token string">"page"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"pageSize"</span><span class="token punctuation">:</span> <span class="token string">"15"</span><span class="token punctuation">,</span>        <span class="token string">"productName"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token string">"conditionType"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"applyname"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"applysn"</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 存储最后的 ID 数据</span>    id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        data<span class="token punctuation">[</span><span class="token string">"page"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送请求命令，获取 json 数据</span>        data_json <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 分析一下 json 数据的结构</span>        data_list <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">"list"</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            id_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 公司具体信息网页的 XHR 中的 url</span>    new_url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"5eb10afc74a2462c8e86652ec8d90a48"</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> ID <span class="token keyword">in</span> id_list<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ID        <span class="token comment" spellcheck="true"># 发送请求</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>new_url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这是一个json串，我们可以先在线解析，再保存我们想要的东西</span>        name <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">"epsName"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 保存</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">".公司信息.text"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"公司名称："</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"epsName"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"公司地址："</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"epsProductAddress"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"法定代表人："</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"legalPerson"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 提示</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"的信息下载完成！！！"</span><span class="token punctuation">)</span></code></pre><p>我们运行一下程序，结果如下：<br><img src="https://img-blog.csdnimg.cn/20210420190105233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>打开文件一看<br><img src="https://img-blog.csdnimg.cn/20210420190154657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（5）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-5/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-5/</url>
      
        <content type="html"><![CDATA[<h1 id="肯德基餐厅地址查询"><a href="#肯德基餐厅地址查询" class="headerlink" title="肯德基餐厅地址查询"></a>肯德基餐厅地址查询</h1><p>前面我们学习了破解百度翻译，知道了 AJAX 的工作原理和爬取，那么我们今天就来巩固我们的学习成果吧。</p><p>首先我们打开肯德基的官网，点击 “餐厅查询”<br><img src="https://img-blog.csdnimg.cn/20210418212331439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后是没有地址的网页，然后我们输入地址<br><img src="https://img-blog.csdnimg.cn/20210418212616822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210418212546441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现不论有没有搜索，网址都没有发生变化，这说明肯德基官网的地址查询是通过 AJAX 实现的，知道了这样一点我们就可以使用抓包工具进行分析了。</p><p>我们可以从抓包工具中找到请求的 url 和相对应的请求命令和数据类型。<br><img src="https://img-blog.csdnimg.cn/20210418214041202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210418214055199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210418231617567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>我们发现这是一个 json 串，我们还需要像上次破解百度翻译一样先把 json 串爬取下来，再在线解析吗？答案当然是否定的，我们可以在抓包工具的 response 中得到目前的 json，然后在线解析。</p><p><img src="https://img-blog.csdnimg.cn/20210418213447336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210418213609839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>欧克，那么我就可以开始写爬取肯德基餐厅地址的代码了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定 URL</span>    url <span class="token operator">=</span> <span class="token string">"http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword"</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 数据</span>    kd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"需要查询的地点："</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"cname"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"pid"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token string">"keyword"</span><span class="token punctuation">:</span> kd <span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 要搜索的地址</span>        <span class="token string">"pageIndex"</span><span class="token punctuation">:</span> <span class="token string">"1"</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 要爬取的网页的页码</span>        <span class="token string">"pageSize"</span><span class="token punctuation">:</span> <span class="token string">"10"</span> <span class="token comment" spellcheck="true"># 每一页的数量</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 爬取两页</span>        data<span class="token punctuation">[</span><span class="token string">"pageIndex"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">"Table1"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 存储</span>        <span class="token keyword">for</span> detail <span class="token keyword">in</span> page<span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./肯德基地址.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"storeName:"</span> <span class="token operator">+</span> detail<span class="token punctuation">[</span><span class="token string">"storeName"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"addressDetail:"</span> <span class="token operator">+</span> detail<span class="token punctuation">[</span><span class="token string">"addressDetail"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>打开保存的文件如下</p><p><img src="https://img-blog.csdnimg.cn/20210418231504846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>说明爬取成功</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（4）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-4/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-4/</url>
      
        <content type="html"><![CDATA[<h1 id="“破解”百度翻译"><a href="#“破解”百度翻译" class="headerlink" title="“破解”百度翻译"></a>“破解”百度翻译</h1><p>翻译是一件麻烦的事情，如果可以写一个爬虫程序直接爬取百度翻译的翻译结果就好了，可当我打开百度翻译的页面，输入要翻译的词时突然发现不管我要翻译什么，网址都没有任何变化，那么百度翻译要怎么爬取呢？</p><p>爬取百度翻译之前，我们先要明白百度翻译是怎么在不改变网址的情况下实现翻译的。百度做到这一点是用 AJAX 实现的，简单地说，AJAX的作用是在不重新加载网页的情况下进行局部的刷新。</p><p>了解了这一点，那么我们要怎么得到 AJAX 工作时请求的URL呢？老规矩，使用抓包工具。步骤如下：</p><ol><li>在 “百度翻译” 页面右键，选择“Notework”</li><li>选择 “ XHR ”</li></ol><p><img src="https://img-blog.csdnimg.cn/2021041717220450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><ol start="3"><li>如果画面没有任何数据，可以试着输入要翻译的词，比如说我输入“dog”时，就发生了如下的变化</li></ol><p><img src="https://img-blog.csdnimg.cn/20210417172456378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们看到此时的 kw 是我要翻译的词，说明这是我们要找的东西。</p><p>（注意：我们发现其中有三个 sug ，我选的只是其中一个。如果我们全都带点开看，就会发现，他们的 kw 分别是：d 和 do。这是因为我打 dog 时一个单词一个单词打的，而 AJAX 是时时刷新。如果输入中文就不会出现这种情况。翻译中文时，我们找的也不是 sug 了，具体是什么，就看哪个包的 data 的值是我们要翻译的词。）</p><p>然后我们在回到上面，找到我们需要指定的 URL 、我们要选择的请求命令以及爬取到的数据的类型。</p><p><img src="https://img-blog.csdnimg.cn/2021041719215232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>欧克，做到这里我们的前期准备就完成了，下面就可以开始着手写代码了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    url <span class="token operator">=</span> <span class="token string">"https://fanyi.baidu.com/sug"</span>    <span class="token comment" spellcheck="true"># 要翻译的词</span>    keyword <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"需要翻译的词："</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"kw"</span><span class="token punctuation">:</span> keyword        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><p>我们运行程序发现结果是这样的：<br><img src="https://img-blog.csdnimg.cn/2021041719410599.png"><br>因为请求到的数据比较短，所以我们比较容易地看出数据的结构是字典里有列表，列表里又有字典结构。如果比较长，我们可以使用在线 json 转换,转换后的数据是这样的</p><p><img src="https://img-blog.csdnimg.cn/20210417194625764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们只需要 dog 的释义，所以我们还可以对我们代码进行优化</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"v"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>注意：<br>关于 data 的字典，并不是说只需要 “ kw ”: dog, data 的字典里要存储的是抓包工具里 from data 里所有的值，如果没有值，那么相对应的值就是空字符串。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（3）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-3/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-3/</url>
      
        <content type="html"><![CDATA[<h1 id="简易网页搜集器（2）"><a href="#简易网页搜集器（2）" class="headerlink" title="简易网页搜集器（2）"></a>简易网页搜集器（2）</h1><p>前面我们学会了如何用 UA 伪装骗过服务器爬取我们想要的网页数据，不知道你们会不会和我一样在学会 UA 伪装的兴奋后突然想到另一个问题——就是我们爬取一个页面就要改一次 url 吗？</p><p>答案当然是否定的。</p><p>我们观察下面两个网址<br><img src="https://img-blog.csdnimg.cn/2021041616565422.png"><br><img src="https://img-blog.csdnimg.cn/20210416165736945.png"><br>一个显然易见的区别是我圈起来的部分，即“wd &#x3D; ”<br>那我就怀疑搜索不同的关键词，“wd” 都不同，那么是不是这么一回事呢？我们可以试试。</p><p>结果就像这样<br><img src="https://img-blog.csdnimg.cn/20210416170212646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>欧克，这就说明关键在于 “wd”的值，那么我们就可以根据这点写一个动态的URL</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 要搜索的内容</span>    kd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"百度一下，你就知道："</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?"</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"wd"</span><span class="token punctuation">:</span> kd        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span>kd<span class="token operator">+</span><span class="token string">".html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取数据成功！！！"</span><span class="token punctuation">)</span></code></pre><p>当然，url 还可以写成这样的</p><pre class=" language-python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?"</span> <span class="token operator">+</span> <span class="token string">"wd="</span> <span class="token operator">+</span> kd</code></pre><p>我们打开保存的文件，看看结果<br><img src="https://img-blog.csdnimg.cn/20210416172140334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这说明我们的代码没有问题，我们可以不改变代码实现关键词搜索爬取网页了</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（2）</title>
      <link href="/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-2/"/>
      <url>/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-2/</url>
      
        <content type="html"><![CDATA[<h1 id="简易网页搜集器"><a href="#简易网页搜集器" class="headerlink" title="简易网页搜集器"></a>简易网页搜集器</h1><p>前面我们已经学会了简单爬取浏览器页面的爬虫。但事实上我们的需求当然不是爬取搜狗首页或是B站首页这么简单，再不济，我们都希望可以爬取某个特定的有信息的页面。</p><p>不知道在学会了爬取之后，你有没有跟我一样试着去爬取一些搜索页面，比如说百度。像这样的页面</p><p><img src="https://img-blog.csdnimg.cn/20210415104803318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="要爬取的网页"></p><p>注意我红笔划的部分，这是我打开的网页。现在我希望能爬取这一页的数据，按我们前面学的代码，应该是这样写的：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定URL</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=93923645_hao_pg&amp;wd=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;rsv_spt=1&amp;oq=%25E7%2588%25AC%25E5%258F%2596%25E7%2599%25BE%25E5%25BA%25A6%25E9%25A6%2596%25E9%25A1%25B5&amp;rsv_pq=b233dcfd0002d2d8&amp;rsv_t=ccdbEuqbJfqtjnkFvevj%2BfxQ0Sj2UP88ixXHTNUNsmTa9yWEWTUEgxTta9r%2Fj3mXxDs%2BT1SU&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_sug3=8&amp;rsv_sug1=5&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=t&amp;inputT=1424&amp;rsv_sug4=1424"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取数据</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./奥特曼.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取成功！！！"</span><span class="token punctuation">)</span></code></pre><p>然而打开我们保存的文件，发现结果跟我们想的不太一样<br><img src="https://img-blog.csdnimg.cn/20210415110105396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现我们保存的文件是一个空白的页面，这是为什么呢？</p><p>其实上我们把网址改成搜狗的可能或更直观一些（不知道为什么我这边的搜狗总是打不开，所以就用百度做例子，可以自己写写有关搜狗搜索的代码），同样的代码改成搜狗的网址结果是这样的</p><p><img src="https://img-blog.csdnimg.cn/20210415110721166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现其中有句话是 “ 网络中存在异常访问 ”，那么这句话是什么意思呢？这句话的意思就是说，搜狗或是百度注意到发送请求的是爬虫程序，而不是人工操作。</p><p>那么这其中的原理又是什么呢？简单来说，就是程序访问和我们使用浏览器访问是有区别的，被请求的服务器都是靠 user-agent 来判断访问者的身份，如果是浏览器就接受请求，否则就拒绝。这就是一个很常见的反爬机制。</p><p>那是不是我们就没有办法呢？非也~所谓魔高一尺，道高一丈。既然要识别 user-agent ，那么我们就让爬虫模拟 user-agent 好了。</p><p>在 python 中模拟输入数据或是 user-agent ，我们一般用字典<br>就这样子写：</p><pre class=" language-python"><code class="language-python">header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># user-agent 的值 是一个长字符串</span>    <span class="token punctuation">}</span></code></pre><p>那么  user-agent 的值又是怎么得到的呢？<br>    1. 打开任意网页，右键点击，选择“检查”<br><img src="https://img-blog.csdnimg.cn/20210415112140584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>    2. 选择“ Network ”（谷歌浏览器）（如果是中文，就选择 “网络” 这一项）<br><img src="https://img-blog.csdnimg.cn/20210415112339671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>    3. 如果发现点开是空白的，像这样，那就刷新网页<br>    <img src="https://img-blog.csdnimg.cn/2021041511261560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>    刷新后是这样的：<br>    <img src="https://img-blog.csdnimg.cn/20210415112717305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后随机选择红笔圈起来的一项，我们会看到这样的东西，然后在里面找到“user-agent”，把它的值复制下来就行了<br><img src="https://img-blog.csdnimg.cn/20210415113039196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>有了 “user-agent”， 我们在重新写我们的爬取网页的代码，就可以了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定URL</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=93923645_hao_pg&amp;wd=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;rsv_spt=1&amp;oq=%25E7%2588%25AC%25E5%258F%2596%25E7%2599%25BE%25E5%25BA%25A6%25E9%25A6%2596%25E9%25A1%25B5&amp;rsv_pq=b233dcfd0002d2d8&amp;rsv_t=ccdbEuqbJfqtjnkFvevj%2BfxQ0Sj2UP88ixXHTNUNsmTa9yWEWTUEgxTta9r%2Fj3mXxDs%2BT1SU&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_sug3=8&amp;rsv_sug1=5&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=t&amp;inputT=1424&amp;rsv_sug4=1424"</span>    <span class="token comment" spellcheck="true"># 模拟 “user-agent”，即 UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span> <span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># 复制的 user-agent 的值</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取数据</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./奥特曼(UA伪装).html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取成功！！！"</span><span class="token punctuation">)</span></code></pre><p>再次运行，然后打开文件<br><img src="https://img-blog.csdnimg.cn/20210415113826866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这次成功了，说明我们的爬虫程序完美地骗过了服务器</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（1）</title>
      <link href="/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-1/"/>
      <url>/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-1/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫的流程："><a href="#爬虫的流程：" class="headerlink" title="爬虫的流程："></a>爬虫的流程：</h1><p>在开始学习爬虫，我们必须了解爬虫的流程框架。在我看来爬虫的流程大概就是三步，即不论我们爬取的是什么数据，总是可以把爬虫的流程归纳总结为这三步：</p><ol><li>指定 url， 可以简单的理解为指定要爬取的网址</li><li>发送请求。requests 模块的请求一般为 get 和 post</li><li>将爬取的数据存储</li></ol><h1 id="requests-模块的下载导入："><a href="#requests-模块的下载导入：" class="headerlink" title="requests 模块的下载导入："></a>requests 模块的下载导入：</h1><p>因为 requests 模块属于外部库，所以需要我们自己导入库</p><p>导入的步骤：</p><ol><li>右键Windows图标</li><li>点击“运行”</li><li>输入“cmd”打开命令面板</li><li>输入“pip install requests”,等待下载完成</li></ol><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210413165648257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_1,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210413165904237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="打开cmd"></p><p><img src="https://img-blog.csdnimg.cn/20210413165910162.png" alt="下载 requests 模块 "></p><p>如果还是下载失败，我的建议是”百度一下，你就知道“（我也是边学边写，是在是水平有限）</p><p>欧克，既然导入成功后我们就简单的来爬取一下搜狗的首页吧！<br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.sougou.com/"</span>    <span class="token comment" spellcheck="true"># 发起请求</span>    <span class="token comment" spellcheck="true"># get方法会返回一个响应数据</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取响应数据</span>    page_txt <span class="token operator">=</span> response<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># text返回一个字符串的响应数据</span>    <span class="token comment" spellcheck="true"># print(page_txt)</span>    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./sougou.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_txt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取数据结束！！！"</span><span class="token punctuation">)</span></code></pre><p>我们打开保存的文件，如图<br><img src="https://img-blog.csdnimg.cn/2021041317282155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="成功保存的网页"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/18/hello-world/"/>
      <url>/2022/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
