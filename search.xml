<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>工欲善其事，必先利其器——线程池的使用（2）</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-2/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-2/</url>
      
        <content type="html"><![CDATA[<p>好吧，我们前面爬取图片发现使用了线程池后，其实我们的效率提高不是这么明显。那我们就来试一试爬取视频吧。因为不同的网站对视频的反爬的策略都不尽相同，所以我们这里讲的示例并没有普世的意义。唯一普世的做法是好好分析视频网址的存放地址。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>首先来讲一讲我们这次爬取的视频。</p><p>我们这次爬取的视频是梨视频娱乐模块最热的视频</p><p>即图片里的前三个（但我们打开抓包工具时，又发现其实是 4 个视频，不管是几个，关系都不大）</p><p><img src="https://img-blog.csdnimg.cn/20210511163822795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先我们先随便定位一个视频，得到如下的网页源码</p><p><img src="https://img-blog.csdnimg.cn/20210511164148109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这里的 a 标签下面有一个超链接，然后我们点击这个超链接，跳转网页，来到了视频播放页。注意这个超链接的内容，后面要用到。</p><p>接着我们再一次试图定位时，却发现我们找不到 .mp4 的网页。怎么办呢？</p><p><img src="https://img-blog.csdnimg.cn/2021051116464288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>没事，我们可以试着播放视频再进行定位。下面就是见证奇迹的时候了。</p><p><img src="https://img-blog.csdnimg.cn/20210511165135797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>当然，以我们目前所学是拿不到在这个动态加载的数据的，但这个步骤不是毫无用处的，我们要记住这串网址。</p><p><a href="https://video.pearvideo.com/mp4/third/20210508/cont-1728888-11721137-174842-hd.mp4">https://video.pearvideo.com/mp4/third/20210508/cont-1728888-11721137-174842-hd.mp4</a></p><p>因为是动态加载的数据，我们可以到 XHR 里面去找网址会不会在这里面。</p><p><img src="https://img-blog.csdnimg.cn/20210511165819832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们一看，果然在！</p><p>不过先别太激动，我们把阿贾克斯加载的网址复制下来，就又发现问题了。</p><p><a href="https://video.pearvideo.com/mp4/third/20210508/1620721592006-11721137-174842-hd.mp4">https://video.pearvideo.com/mp4/third/20210508/1620721592006-11721137-174842-hd.mp4</a></p><p>我们两相对比后，发现相差的部分是：“ cont-1728888 ”。那么 count 后面的数字是从什么地方来的呢？</p><p>还记得我们一开始爬取的超链接吗？</p><p>video_1728888。这里的数字不就是我们要的吗？</p><p>欧克，分析了之后，我们还要阿贾克斯加载的参数。</p><p><img src="https://img-blog.csdnimg.cn/20210511181811947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现其中的 contld 是已知的，那么剩下的 mrd 是什么呢？</p><p>很简单，什么都不是，只是一串随机数</p><p>到这里，我们就完成了对爬取梨视频的分析，剩下的就是代码的问题了。</p><h2 id="同步爬虫爬取梨视频"><a href="#同步爬虫爬取梨视频" class="headerlink" title="同步爬虫爬取梨视频"></a>同步爬虫爬取梨视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">save_video</span><span class="token punctuation">(</span>videoNum_title<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_num <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    title <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span><span class="token punctuation">,</span>        <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"https://www.pearvideo.com/"</span> <span class="token operator">+</span> <span class="token string">"video_"</span> <span class="token operator">+</span> video_num    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/videoStatus.jsp"</span>    <span class="token comment" spellcheck="true"># 传入参数</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"contId"</span><span class="token punctuation">:</span> video_num<span class="token punctuation">,</span>        <span class="token string">"mrd"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 获取假网址</span>    json <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    href <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"videos"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取真正的网址</span>    url <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"/.{13}-"</span><span class="token punctuation">,</span> <span class="token string">"/cont-"</span> <span class="token operator">+</span> video_num <span class="token operator">+</span> <span class="token string">"-"</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存视频</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"正在下载……"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/category_4"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="listvideoListUl"]/li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># li 标签列表</span>    List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div//div[@class="vervideo-title"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        video_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        List<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>video_num<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> videoNum_title <span class="token keyword">in</span> List<span class="token punctuation">:</span>        save_video<span class="token punctuation">(</span>videoNum_title<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210511195534468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>同步用时 45 秒，现在让我们试试异步</p><h2 id="异步爬虫爬取梨视频"><a href="#异步爬虫爬取梨视频" class="headerlink" title="异步爬虫爬取梨视频"></a>异步爬虫爬取梨视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> re<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">save_video</span><span class="token punctuation">(</span>videoNum_title<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_num <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    title <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span><span class="token punctuation">,</span>        <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"https://www.pearvideo.com/"</span> <span class="token operator">+</span> <span class="token string">"video_"</span> <span class="token operator">+</span> video_num    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/videoStatus.jsp"</span>    <span class="token comment" spellcheck="true"># 传入参数</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"contId"</span><span class="token punctuation">:</span> video_num<span class="token punctuation">,</span>        <span class="token string">"mrd"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 获取假网址</span>    json <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    href <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"videos"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取真正的网址</span>    url <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"/.{13}-"</span><span class="token punctuation">,</span> <span class="token string">"/cont-"</span> <span class="token operator">+</span> video_num <span class="token operator">+</span> <span class="token string">"-"</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存视频</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"正在下载……"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/category_4"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="listvideoListUl"]/li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># li 标签列表</span>    List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div//div[@class="vervideo-title"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        video_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        List<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>video_num<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用线程池</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>save_video<span class="token punctuation">,</span> List<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——线程池的使用(1)</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-1/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-1/</url>
      
        <content type="html"><![CDATA[<p>学到现在，我们可以说已经学习了爬虫的基础知识，如果没有那些奇奇怪怪的反爬虫机制，基本上只要有时间分析，一般的数据都是可以爬取的，那么到了这个时候我们需要考虑的就是爬取的效率了，关于提高爬虫效率，也就是实现异步爬虫，我们可以考虑以下两种方式：一是线程池的使用（也就是实现单进程下的多线程），一是协程的使用（如果没有记错，我所使用的协程模块是从python3.4以后引入的，我写博客时使用的python版本是3.9）。</p><p>今天我们先来讲讲线程池。</p><h2 id="同步代码演示"><a href="#同步代码演示" class="headerlink" title="同步代码演示"></a>同步代码演示</h2><p>我们先用普通的同步的形式写一段代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开始时间</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        func<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>对于代码运行的结果我们心里都有数，但还是让我们来看一下吧</p><p><img src="https://img-blog.csdnimg.cn/2021051020454987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>不出所料。运行时间果然是六秒</p><h2 id="异步，线程池代码"><a href="#异步，线程池代码" class="headerlink" title="异步，线程池代码"></a>异步，线程池代码</h2><p>那么如果我们使用线程池运行上述代码又会怎样呢？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开始时间</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span>    <span class="token punctuation">]</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>len<span class="token punctuation">(</span>url_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 实例化一个线程池对象，并且设定线程池的上限数量为列表长度。不设置上限也可以。</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> url_list<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>下面就是见证奇迹的时候了，让我们运行程序</p><p><img src="https://img-blog.csdnimg.cn/20210510205733844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这次我们的运行时间只用2～3秒。其实我们可以将线程池简单的理解为将多个任务同时进行。</p><p>注意：</p><ol><li>我使用的是 pycharm，如果使用的是 VS 或者说是 python 自带的 idle，在运行时我们只能看到最后时间的输出。</li><li>我们输出结果可能并不是按 abc 的顺序输出的。</li></ol><h2 id="同步爬虫爬取图片"><a href="#同步爬虫爬取图片" class="headerlink" title="同步爬虫爬取图片"></a>同步爬虫爬取图片</h2><p>因为我们的重点是线程池的爬取效率提高，我们就简单的爬取一页的图片。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">def</span> <span class="token function">save_photo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment" spellcheck="true"># 创建路径，避免重复下载</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"开始下载！！！"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 发送请求，获取源码</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析，获取图片的下载地址的列表</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li/a/@href'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过下载地址获取高清图片的地址和图片名称</span>    <span class="token keyword">for</span> href <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> href        <span class="token comment" spellcheck="true"># 再一次发送请求</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 再一次 xpath 解析</span>        new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 编译文字</span>        title <span class="token operator">=</span> title<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下载，保存</span>        save_photo<span class="token punctuation">(</span>src<span class="token punctuation">,</span> title<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>让我们看看同步爬虫需要多长时间</p><p><img src="https://img-blog.csdnimg.cn/2021051021433347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后再让我们看看使用线程池的异步爬虫爬取这些图片需要多久</p><h2 id="使用线程池的异步爬虫爬取4K美女图片"><a href="#使用线程池的异步爬虫爬取4K美女图片" class="headerlink" title="使用线程池的异步爬虫爬取4K美女图片"></a>使用线程池的异步爬虫爬取4K美女图片</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">save_photo</span><span class="token punctuation">(</span>src_title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    url <span class="token operator">=</span> src_title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    title <span class="token operator">=</span> src_title<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment" spellcheck="true"># 创建路径，避免重复下载</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"开始下载！！！"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 发送请求，获取源码</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析，获取图片的下载地址的列表</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li/a/@href'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 存储最后的网址和标题的列表</span>    src_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    title_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 通过下载地址获取高清图片的地址和图片名称</span>    <span class="token keyword">for</span> href <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> href        <span class="token comment" spellcheck="true"># 再一次发送请求</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 再一次 xpath 解析</span>        new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        src_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        title <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 编译文字</span>        title <span class="token operator">=</span> title<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>        title_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 下载，保存。使用线程池</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    src_title <span class="token operator">=</span> zip<span class="token punctuation">(</span>src_list<span class="token punctuation">,</span> title_list<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>save_photo<span class="token punctuation">,</span> list<span class="token punctuation">(</span>src_title<span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>让我们来看看运行的结果</p><p><img src="https://img-blog.csdnimg.cn/2021051022075983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>只用了 17 秒，可不要小瞧这几秒，如果数据太大，这些差距后来就会更大了。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不过我们必须要明白 线程池 是有上限的，这就是说数据太大，线程池的效率也会降低，所以这就要用到协程模块了。</p><p>欲知协程如何，且听下回分解。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——识别验证码（2）</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-2/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-2/</url>
      
        <content type="html"><![CDATA[<h2 id="模拟登录人人网"><a href="#模拟登录人人网" class="headerlink" title="模拟登录人人网"></a>模拟登录人人网</h2><p>前面我们学习了使用第三方平台实现验证码的识别，那现在就让我们来用验证码的识别实现人人网的登录。</p><p>首先我们先到人人网的登录页面去踩点。</p><p><img src="https://img-blog.csdnimg.cn/20210503195009957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>人人网登录在三次失败后需要输入验证码，那我们现在需要做的就是通过数据解析将验证码保存到本地（为了更好的使用第三方验证码识别平台）。</p><p>有了验证码之后，我们又要怎么通过爬虫实现登录呢？首先我们打开抓包工具，看看登陆时会发生什么。</p><p><img src="https://img-blog.csdnimg.cn/20210503201139254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>首先我们先点击那个禁止符号的符号，将数据清空，然后再点击 “ preserve log ”，然后我们再实现登录。</p><p><img src="https://img-blog.csdnimg.cn/20210503201520822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这里有一个 login 的文件，我们点开它。</p><p><img src="https://img-blog.csdnimg.cn/20210503201643494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这个文件的 data 一栏里的 icode 是我们输入的验证码，那么我们就有理由怀疑这一栏需要动态改变的就是 icode 这一栏，这就是说我们前面保存的验证码在这里就有用武之地。</p><p>分析结束，就开始写代码了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">base64_api</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> img<span class="token punctuation">,</span> typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b64 <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> uname<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> pwd<span class="token punctuation">,</span><span class="token string">"typeid"</span><span class="token punctuation">:</span>typeid<span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> b64<span class="token punctuation">}</span>    result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://api.ttshitu.com/predict"</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    src <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="verifyPic_login"]/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 验证码网址</span>    <span class="token comment" spellcheck="true"># 保存验证码</span>    photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./验证码.jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>    img_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\验证码识别\\验证码.jpg"</span>    result <span class="token operator">=</span> base64_api<span class="token punctuation">(</span>uname<span class="token operator">=</span><span class="token string">'账号'</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span> img<span class="token operator">=</span>img_path<span class="token punctuation">,</span> typeid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 登录网址</span>    url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=20214120314"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"15157485037"</span><span class="token punctuation">,</span>        <span class="token string">"icode"</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span>        <span class="token string">"origURL"</span><span class="token punctuation">:</span> <span class="token string">"http://www.renren.com/home"</span><span class="token punctuation">,</span>        <span class="token string">"domain"</span><span class="token punctuation">:</span> <span class="token string">"renren.com"</span><span class="token punctuation">,</span>        <span class="token string">"key_id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"captcha_type"</span><span class="token punctuation">:</span> <span class="token string">"web_login"</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"8a62222be07c2cf68e8d68f4617fe01d7dbc488427d0bc61666ab8a6e56e94f0"</span><span class="token punctuation">,</span>        <span class="token string">"rkey"</span><span class="token punctuation">:</span> <span class="token string">"07a9f1810ecf9b507634a45447a628e7"</span><span class="token punctuation">,</span>        <span class="token string">"f"</span><span class="token punctuation">:</span> <span class="token string">"http%3A%2F%2Fwww.renren.com%2F976706166%2Fprofile"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 模拟登录</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断登录状态。 200 说明登录成功</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>我们看一下运行结果</p><p><img src="https://img-blog.csdnimg.cn/20210503204354483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>说明登录成功。</p><p>注意：</p><p>我们一般用这种方法判断是否登录，其实也可以保存页面来判断，但有一些网站登录成功后返回的并非是网页而是 json 串，所以我们通常用 status code 来判断是否成功，200 表示和网页连接成功。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 爬虫识别验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——识别验证码（1）</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-1/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-1/</url>
      
        <content type="html"><![CDATA[<h2 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h2><p>我们使用爬虫时很有可能需要登录，而现在的平台登陆时都需要验证码才能完成登录，所以我们使用爬虫模拟登录时验证码是必须要跨过的坎。一般情况下，我们使用第三方平台实现验证码的识别。</p><p>所以我在这里介绍一个识别验证码的平台——图鉴（比较常见的有超级鹰，反正其实这些平台注册、使用流程都差不多）。</p><p>首先我们打开图鉴的网址 “ <a href="http://www.ttshitu.com/">http://www.ttshitu.com/</a> ”，点击注册</p><p><img src="https://img-blog.csdnimg.cn/20210502163426391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210502163508464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>登录成功后，我们首先看一下“价格”，其实也可以在注册帐号前看一看价格，再决定是否注册。在登陆后，因为识别验证码需要登录，所以我们在使用前要确定自己的帐号里是否还有余额。我觉得这些平台的充值还是挺人性化的，，是允许我们在平台上充值一块五毛的。</p><p>我们的账号里有钱了，然后再打开开发文档。因为我们使用的是python，所以我们选择python的开发文档</p><p><img src="https://img-blog.csdnimg.cn/20210502164158248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210502164255701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>将第一个脚本复制下来，用 IDLE 打开，我们看到代码部分的注释是提示我们 typeid 的参数选择。</p><p>在我们开始分析代码，代码自定义了一个函数，这个函数我们不需要看懂，重要的是下面的主程序，我们需要改的是我上面圈起来的部分，也就是运行程序时需要输入验证码的保存路径（也就是说我们需要将验证码先保存到本机），需要在程序中输入我们图鉴的账号和密码。</p><p>我这里有一张验证码，现在就让我们试试图鉴的脚本</p><p><img src="https://img-blog.csdnimg.cn/20210502164849608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">base64_api</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> img<span class="token punctuation">,</span> typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b64 <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> uname<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> pwd<span class="token punctuation">,</span> <span class="token string">"typeid"</span><span class="token punctuation">:</span> typeid<span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> b64<span class="token punctuation">}</span>    result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://api.ttshitu.com/predict"</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    img_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\验证码.jpg"</span> <span class="token comment" spellcheck="true"># 这里填写验证码的路径</span>    result <span class="token operator">=</span> base64_api<span class="token punctuation">(</span>uname<span class="token operator">=</span><span class="token string">'账号'</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span> img<span class="token operator">=</span>img_path<span class="token punctuation">,</span> typeid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 因为验证码里有数字和中文，我们 typeid 选择 3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>结果如下</p><p><img src="https://img-blog.csdnimg.cn/20210502165649844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后我们回到图鉴网站个人中心看看，结果如下</p><p><img src="https://img-blog.csdnimg.cn/20210502165922741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>注意：<br>验证码的识别正确率并不是 100% 的，有时需要多次识别</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 爬虫识别验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（4）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-4/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-4/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取全国的城市名称以及“或”的简单介绍"><a href="#爬取全国的城市名称以及“或”的简单介绍" class="headerlink" title="爬取全国的城市名称以及“或”的简单介绍"></a>爬取全国的城市名称以及“或”的简单介绍</h2><p>首先是爬取全国城市名称</p><p>网址如下：<a href="https://www.aqistudy.cn/historydata/">https://www.aqistudy.cn/historydata/</a></p><p>我们打开网页进行简单的数据分析</p><p><img src="https://img-blog.csdnimg.cn/20210501164316716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现我们需要爬取的名称都在 li 标签里。根据这个我们可以很简单地写我们的代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.aqistudy.cn/historydata/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析。热门城市名称爬取</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    hot_city_name_li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="hot"]//li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 热门城市名称的 li 标签的列表</span>    hot_city_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> hot_city_name_li_list<span class="token punctuation">:</span>        hot_city_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hot_city_name<span class="token punctuation">,</span> len<span class="token punctuation">(</span>hot_city_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># xpath 解析。全部城市名称爬取</span>    all_city_li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="all"]//li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 全部城市名称的 li 标签的列表</span>    all_city_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> all_city_li_list<span class="token punctuation">:</span>        all_city_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>all_city_name<span class="token punctuation">,</span> len<span class="token punctuation">(</span>all_city_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>看一下我们的运行结果</p><p><img src="https://img-blog.csdnimg.cn/20210501174210248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>我们这里爬取的名称是所有城市里包括热门城市的，要是不包括，我们要获取这些城市的名称，难道要把两个列表直接加起来吗？虽然不是不行，但实际上还是多写了几行代码的。</p><p>所以在这里介绍一下 xpath 里面的 “或”（“|”）和 “or” 的作用一样</p><p>闲话少说，直接看代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.aqistudy.cn/historydata/"</span>        <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析。“|”的使用</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    city_name <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="hot"]//li/a/text() | //div[@class="all"]//li/a/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>city_name<span class="token punctuation">,</span> len<span class="token punctuation">(</span>city_name<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行一下</p><p><img src="https://img-blog.csdnimg.cn/20210501175310824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>名称个数正好是 394 &#x3D; 384 + 10</p><p>xpath 的 “或” 你学会了吗？</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（3）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-3/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-3/</url>
      
        <content type="html"><![CDATA[<p>什么？我怎么又讲爬取图片？拜托，这可是 4k 图片，清晰度杠杠的。再说，爬取糗图算什么本事，做人要爬取的肯定是妹子图片，而且是 4k 的妹子图片，是不是很激动？放心，这次不晃你。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>首先让我们打开网页，好好欣赏一下美丽的妹子……哦不，我是说，好好的欣赏一下优美的网页源码。网址如下：<a href="https://pic.netbian.com/4kmeinv/">https://pic.netbian.com/4kmeinv/</a></p><p><img src="https://img-blog.csdnimg.cn/20210427102805472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>看，是不是优美的妹子？……额咳咳，我是说优美的源码。</p><p>很好，我们注意一下定位到的源码数据，也就是我圈的地方，这里有图片的网址和图片的标题。我们就把原标题作为我们下载后的标题。注意，这里的网址没有域名，是需要我们自己加的，也就是 “<a href="https://pic.netbian.com”./">https://pic.netbian.com”。</a></p><p>欧克，是不是迫不及待了，让我们和小姐姐更进一步吧，咳咳，我是说，不说了，你懂的！</p><h1 id="文字编译"><a href="#文字编译" class="headerlink" title="文字编译"></a>文字编译</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定网址</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_url_ist<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果测试的时候发现不对了，我们的标题全都变成乱码了<br><img src="https://img-blog.csdnimg.cn/20210427104018346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>再一看，哦，我们太激动忘记编译了，赶紧编译一下。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定网址</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encode <span class="token operator">=</span> <span class="token string">"utf-8"</span>    response <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这回总该可以了吧，再一看，怎么回事，还是乱码。<br><img src="https://img-blog.csdnimg.cn/20210427104924212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这是为什么？难道说所谓的 4k 美女图片只可远观不可亵玩吗？我不相信，赶紧去研究研究。正所谓，“X 是第一生产力”，我很快就研究出结果了，一般情况下，如果源码里有中文，我们可以有两种办法。一种是我们用的方法，另一种方法如下：</p><pre class=" language-python"><code class="language-python">response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span></code></pre><p>我们再试一次</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定网址</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>测试一下<br><img src="https://img-blog.csdnimg.cn/20210427112301876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>欧克，是中文了，接着可以爬取4k妹子图片了。</p><h1 id="爬取妹子图"><a href="#爬取妹子图" class="headerlink" title="爬取妹子图"></a>爬取妹子图</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻三页</span>        <span class="token comment" spellcheck="true"># 指定网址</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/index_%s.html"</span> <span class="token operator">%</span> index        <span class="token comment" spellcheck="true"># 获取源码</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>        title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 测试</span>        <span class="token comment" spellcheck="true"># print(new_url_list)</span>        <span class="token comment" spellcheck="true"># print()</span>        <span class="token comment" spellcheck="true"># print(title_list)</span>        <span class="token comment" spellcheck="true"># print(len(title_list) == len(new_url_list))</span>        num <span class="token operator">=</span> len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_url_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            title <span class="token operator">=</span> title_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 保存</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>完成后，我们激动地打开图片，滚烫的热血突然就冷下来了，不是说是4k高清图吗，怎么不仅是缩略图，而且画质还不行。</p><p><img src="https://img-blog.csdnimg.cn/20210427161904231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>别着急，这可不是我骗你，是网址留了一手。</p><h1 id="爬取真正的4k妹子图"><a href="#爬取真正的4k妹子图" class="headerlink" title="爬取真正的4k妹子图"></a>爬取真正的4k妹子图</h1><p>现在我们知道了网址源码里的网址是缩略图，那么我们怎么办呢？很简单，我们点击一下会怎样？</p><p><img src="https://img-blog.csdnimg.cn/20210427162913212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>然后我们来到了下载页面。</p><p><img src="https://img-blog.csdnimg.cn/20210427162227702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>现在我们没有任何办法，那就试着看看现在的网页源码好了。</p><p>结果我们发现了两个图片的地址，点开，发现一个是缩略图，一个是4k妹子图。如图。</p><p><img src="https://img-blog.csdnimg.cn/20210427162537689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>是不是又感觉热血沸腾了？嘿嘿</p><p>闲话少说，赶紧改进代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片(4k)"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片(4k)"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻三页</span>        <span class="token comment" spellcheck="true"># 指定网址</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/index_%s.html"</span> <span class="token operator">%</span> index        <span class="token comment" spellcheck="true"># 获取源码</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># li 标签所在的列表，下载页面的网址在 li 标签内</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 获取下载页面的网址</span>            new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 获取下载页面的网页源码</span>            new_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text            new_response <span class="token operator">=</span> new_response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 编译文字</span>            <span class="token comment" spellcheck="true"># xpath 解析</span>            new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>new_response<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 下载的地址</span>            src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 图片标题</span>            title <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 获取图片</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 保存</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片(4k)\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载成功！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>运行结束了，赶紧打开照片看一看，很好，这次真的是4k妹子图片了。</p><p><img src="https://img-blog.csdnimg.cn/2021042716474955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（2）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-2/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-2/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取二手房信息"><a href="#爬取二手房信息" class="headerlink" title="爬取二手房信息"></a>爬取二手房信息</h2><p>说到二手房信息，不知道你们心里最先跳出来的公司（网站）是什么，反正我心里第一个跳出来的是网站是 58 同城。哎呦，我这暴脾气，想到就赶紧去干。</p><p>但很显然，我失败了。说显然，而不是不幸，这是因为 58 同城是大公司，我这点本事爬不了数据是再正常不过的了。下面来看看 58 同城的反爬手段了。这是我爬取下来的网页源码。</p><p><img src="https://img-blog.csdnimg.cn/20210425210918311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们看到爬取下来的源码有很多英文大写字母和数字是网页源码中没有的，后来我了解到 58 同城对自己的网站的源码进行了文本加密，所以就出现了我爬取到的情况。</p><p>然后我再打开 58 同城的 robots 协议。</p><p><img src="https://img-blog.csdnimg.cn/20210425211451911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>好家伙，不愧是大公司，所有的动态网址都不让爬取，打扰了。我只好转头离开，去寻找可以让我这种小白爬取的二手房网站。于是我找到了这个网站<a href="https://bj.c21.com.cn/ershoufang/">https://bj.c21.com.cn/ershoufang/</a> 不知道是我的原因，还是别的原因，反正我是没有找到这个网站的 robots 协议。不管了，既然没找到，就默认没有吧，直接开始爬取。</p><p>我本来打算通过二手房的目录跳到一个具体信息，然后爬取二手房的一些基本信息和属性。</p><p><img src="https://img-blog.csdnimg.cn/20210425213046811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210425213052882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>像我红笔圈起来的部分。但很可惜我失败了，后来我看了看红笔圈起来的部分的爬取到的源码。</p><p><img src="https://img-blog.csdnimg.cn/20210425213736240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>好家伙，还可以这样。不过这怎么可以难倒机智的我？（其实我真不知道怎么解决它）。没关系，之前的源码里不是有类似的信息吗？我只好将就一下了。</p><p><img src="https://img-blog.csdnimg.cn/20210425213956189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后是翻页。翻页问题很好解决，我们很快就发现网页都是 <a href="https://bj.c21.com.cn/ershoufang/pg2/">https://bj.c21.com.cn/ershoufang/pg2/</a><br>其中的页数和 pg 后面的数字有关。</p><p>然后就是分析这些数据源码的位置了。</p><p><img src="https://img-blog.csdnimg.cn/20210426161416707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>首先，我们发现我们要爬取的数据全在 li 标签里，所以我们可以先获得 li 标签的列表。伪代码就像这样。</p><pre class=" language-python"><code class="language-python">form lxml <span class="token keyword">import</span> etree……   ……tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>源码<span class="token punctuation">)</span>li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span> li 标签的路径<span class="token punctuation">)</span></code></pre><p>这时候我们获得的就是 li 标签的 etree 的类，可以继续使用 etree 类里的函数。然后我们就可以利用 for 循环提出不同房源的 li 标签，根据自己的需要获取文本信息。</p><p>欧克，了解了这些（感觉源码前前后后就是四个字 ”我是菜鸡“ ）我们就可以开始写代码了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> re<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> pg <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        <span class="token comment" spellcheck="true"># 指定 url</span>        url <span class="token operator">=</span> <span class="token string">"https://bj.c21.com.cn/ershoufang/pg%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>pg<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取网页源码</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="availability"]/li'</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 房子的名称</span>            <span class="token comment" spellcheck="true"># print(title[0]) # 测试</span>            add <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div/p//a/text()'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 地址</span>            add <span class="token operator">=</span> add<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token operator">+</span> add<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 地址范围由大到小</span>            <span class="token comment" spellcheck="true"># print(add) # 测试</span>            div_list <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div[2]/div'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 具体信息</span>            message_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"建筑面积"</span><span class="token punctuation">,</span> <span class="token string">"房屋户型"</span><span class="token punctuation">,</span> <span class="token string">"房屋朝向"</span><span class="token punctuation">,</span> <span class="token string">"所在楼层"</span><span class="token punctuation">,</span> <span class="token string">"装修情况"</span><span class="token punctuation">,</span> <span class="token string">"建成时间"</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                div <span class="token operator">=</span> div_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                message <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                message <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"\s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 因为发现获取的文本有很多换行符和空格，所以需要去掉</span>                message <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"\\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>                message_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> message_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> message            <span class="token comment" spellcheck="true"># print(message_list) # 测试</span>            <span class="token comment" spellcheck="true"># 交通情况</span>            traffic <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div[4]//text()'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(traffic) # 测试</span>            <span class="token comment" spellcheck="true"># 价格情况</span>            price <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div[3]//text()'</span><span class="token punctuation">)</span>            price <span class="token operator">=</span> price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> price<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(price) # 测试</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\二手房\\"</span> <span class="token operator">+</span> <span class="token string">"二手房.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> message <span class="token keyword">in</span> message_list<span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>message <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> traffic <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"交通情况：无介绍"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"交通情况："</span> <span class="token operator">+</span> traffic<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"价格："</span> <span class="token operator">+</span> price <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>最后的运行结果就像这样<br><img src="https://img-blog.csdnimg.cn/20210426162555822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="保存的二手房信息"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（1）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-1/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-1/</url>
      
        <content type="html"><![CDATA[<h1 id="xpah-的语法认识"><a href="#xpah-的语法认识" class="headerlink" title="xpah 的语法认识"></a>xpah 的语法认识</h1><p>闲话少说，直接上图<br><img src="https://img-blog.csdnimg.cn/20210424210554393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="xpath 介绍"></p><h1 id="xpath-爬取图片"><a href="#xpath-爬取图片" class="headerlink" title="xpath 爬取图片"></a>xpath 爬取图片</h1><p>代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图（xpath）"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图（xpath）"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        <span class="token comment" spellcheck="true"># 指定url</span>        url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取源码</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        src_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="thumb"]/a/img/@src'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(src_list) # 测试定位是否有错误</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> src_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 新的url</span>            new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> src            <span class="token comment" spellcheck="true"># 获取图片</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span>new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 存储</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./糗图（xpath）/"</span> <span class="token operator">+</span> title<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载成功！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><h1 id="xpath-爬取三国演义"><a href="#xpath-爬取三国演义" class="headerlink" title="xpath 爬取三国演义"></a>xpath 爬取三国演义</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url </span>    url <span class="token operator">=</span> <span class="token string">"http://sanguo.5000yan.com/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span>header<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span> <span class="token comment" spellcheck="true"># 编译源码，防止乱码</span>    response <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    src_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="sidamingzhu-list-mulu"]//li[@class="menu-item"]/a/@href'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(src_list) # 测试是否正确</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="sidamingzhu-list-mulu"]//li[@class="menu-item"]/a/text()'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(title_list) # 测试是否正确</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>src_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 指定新的url</span>        new_url <span class="token operator">=</span> src_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        title <span class="token operator">=</span> title_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 获取新的网页源码</span>        page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>        page_text<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>        page_text <span class="token operator">=</span> page_text<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># xpath 解析</span>        new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        page <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//section[@class="section-body"]//div[@class="grap"]//text()'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 存储</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n\n"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> page<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载成功！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——bs4</title>
      <link href="/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-bs4/"/>
      <url>/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-bs4/</url>
      
        <content type="html"><![CDATA[<h2 id="简单地使用bs4实现数据解析"><a href="#简单地使用bs4实现数据解析" class="headerlink" title="简单地使用bs4实现数据解析"></a>简单地使用bs4实现数据解析</h2><p>因为正则表达式本身有难度，所以在这里为大家介绍一下 bs4 实现数据解析。除此之外还有 xpath 解析。因为 xpath 不仅可以在 python 中使用，所以 bs4 和 正则解析一样，仅仅是简单地写两个案例（爬取可翻页的图片，以及爬取三国演义）。以后的重点会在 xpath 上。</p><p>闲话少说，我们先来安装 bs4 相关的外来库。比较简单，首先打开 cmd 命令面板，依次安装bs4 和 lxml。 命令分别是 pip install bs4 和 pip install lxml 。 安装完成后我们可以试着调用他们，看看会不会报错。因为本人水平有限，所以如果出现报错，兄弟们还是百度一下好啦。（总不至于 cmd 命令打错了吧 ~~） </p><p>闲话少说，先简单介绍一下 bs4 的用法。</p><p><img src="https://img-blog.csdnimg.cn/2021042418453326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210424184537952.png"></p><h2 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图（bs4）"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图（bs4）"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取源码数据</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 数据解析</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        data_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".thumb > a"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            url <span class="token operator">=</span> data<span class="token punctuation">.</span>img<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span>            title <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> url            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 存储</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./糗图（bs4）/"</span> <span class="token operator">+</span> title<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><h2 id="爬取三国演义"><a href="#爬取三国演义" class="headerlink" title="爬取三国演义"></a>爬取三国演义</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># URL</span>    url <span class="token operator">=</span> <span class="token string">"http://sanguo.5000yan.com/"</span>    <span class="token comment" spellcheck="true"># 请求命令</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    page_text<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>    page_text <span class="token operator">=</span> page_text<span class="token punctuation">.</span>text    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page_text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># bs4 解析</span>    li_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".sidamingzhu-list-mulu > ul > li"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>        new_url <span class="token operator">=</span> li<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 新的请求命令</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>        response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>        new_page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text        new_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>new_page_text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> new_soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> class_ <span class="token operator">=</span> <span class="token string">"grap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> page<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——正则解析（2）</title>
      <link href="/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-2/"/>
      <url>/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-2/</url>
      
        <content type="html"><![CDATA[<h1 id="上一篇的翻页爬取图片代码"><a href="#上一篇的翻页爬取图片代码" class="headerlink" title="上一篇的翻页爬取图片代码"></a>上一篇的翻页爬取图片代码</h1><p>话不多说，直接上代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图（翻页）"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图（翻页）"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我们观察不同页数的网址会发现不同页数的网址的差异在于最后的数字</span>        <span class="token comment" spellcheck="true"># 发送请求</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 正则解析</span>        ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb">.*?&lt;img src="(.*?)" alt=".*?&lt;/div>'</span>        data_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(data_list) # 试着打印看看这是不是我们需要的东西</span>        <span class="token comment" spellcheck="true"># 指定图片的 url</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> i            title <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            path <span class="token operator">=</span> <span class="token string">"./糗图（翻页）/"</span> <span class="token operator">+</span> title                        <span class="token comment" spellcheck="true"># 发送请求</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 保存</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><h1 id="爬取《三国演义》"><a href="#爬取《三国演义》" class="headerlink" title="爬取《三国演义》"></a>爬取《三国演义》</h1><p>爬取图片难道就可以满足我们了吗？俗话说的好，书中自有黄金屋，书中自有颜如玉。只爬取妹子图怎么可以满足我？要来就干票大的，钱和美女我都要！！！那么说来就来，就让我们来爬取《三国演义》吧。</p><p>首先我们打开《三国演义》的目录发现所有的章节都是一个超链接，所以我们需要对该网址进行数据解析，得到所有章节的url，然后对新的 url 进行数据解析，得到网址中的所有文本信息。</p><p><img src="https://img-blog.csdnimg.cn/20210424161705238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210424161717254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>思路比较简单，了解之后，就可以直接写代码了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"http://sanguo.5000yan.com/"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span> <span class="token comment" spellcheck="true"># 编译源码，不然我们得到的就是一些乱码</span>    page <span class="token operator">=</span> page<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 正则解析</span>    ex <span class="token operator">=</span> <span class="token string">'&lt;li .*? href="(.*?)">(.*?)&lt;/a>&lt;/li>'</span>    new_url_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(new_url_list) # 测试是否为我们要的 url</span>    <span class="token keyword">for</span> new_url <span class="token keyword">in</span> new_url_list<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> new_url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        new_page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>        new_page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span> <span class="token comment" spellcheck="true"># 编译源码，不然我们得到的就是一些乱码</span>        new_page <span class="token operator">=</span> new_page<span class="token punctuation">.</span>text        ex <span class="token operator">=</span> <span class="token string">'&lt;div>(.*?)&lt;/div>'</span>        page_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> new_page<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 存储</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">if</span> title <span class="token operator">==</span> <span class="token string">"第一回 宴桃园豪杰三结义 斩黄巾英雄首立功"</span><span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 因为我们用正则表达式得到的数据里有超链接，所以我们需要把这些都替换掉</span>        <span class="token keyword">for</span> sencetence <span class="token keyword">in</span> page_text<span class="token punctuation">:</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&lt;.*?>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;mdash;"</span><span class="token punctuation">,</span> <span class="token string">"—"</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;ldquo;"</span><span class="token punctuation">,</span> <span class="token string">"“"</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;rdquo;"</span><span class="token punctuation">,</span> <span class="token string">"”"</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"\s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>                        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                <span class="token keyword">if</span> sencetence <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> sencetence<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span></code></pre><p>运行结束后，我们打开文件，结果如下。</p><p><img src="https://img-blog.csdnimg.cn/20210424170658526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——正则解析（1）</title>
      <link href="/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-1/"/>
      <url>/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-1/</url>
      
        <content type="html"><![CDATA[<h2 id="正则解析爬取图片"><a href="#正则解析爬取图片" class="headerlink" title="正则解析爬取图片"></a>正则解析爬取图片</h2><p>因为讲的是正则解析，而不是正则表达式，所以我就默认大家会正则表达式了。最多在这里给大家看一下正则的语法。</p><p><img src="https://img-blog.csdnimg.cn/20210420193405429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这也是我从B站上截图截下来的。因为我自己都是学的半懂不懂的，实在没那脸说在这里讲正则表达式怎么写。</p><p>如果感觉学不会怎么办？没事，我们 python 的数据解析有正则解析、bs4解析和 xpath 解析。总有一款适合你。（这些后面都会讲到）</p><p>言归正传，什么是数据解析，在我看来，数据解析简单来说就是分析网页的源代码。</p><p>还记得像套娃一样的药监局吗？我似乎说过可以通过数据解析解决。欧克，那就让我们看一下，数据解析这么解决这个问题。</p><p>先点击左边圈起来的有鼠标样式的按键，将它移到我们的公司超链接上单击。神奇的事情发生了。<br><img src="https://img-blog.csdnimg.cn/20210420194645235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210420194844157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们看到了一个网址，我们直接点击网址看看会发生什么。</p><p><img src="https://img-blog.csdnimg.cn/20210420194952502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>哦豁，我们来到了这个页面，然后我们重复的步骤，将鼠标移到我们要爬取的数据上单击，然后我们就在网页上看到了我们要爬取的文本。</p><p><img src="https://img-blog.csdnimg.cn/20210420195144448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>那我们是不是只要爬取我们在网页源码上看到的文本就可以了。是不是很简单？你要套娃？我直接开拆，是不是很有趣？</p><p>那我们前面学的 requests 模块是不是没什么用？</p><p>当然不是，爬取整张网页不是 requests 简单吗？再说就算有数据解析，有时候也不见得简单。比如说百度翻译，你可以试试用数据解析爬取，相信我，还不如分析它的 XHR 。</p><p>当然我们今天不搞药监局，天天看文字，不得恶心？今天我们来爬取图片。嘿嘿嘿嘿，图片~。我们今天的目标是妹子，哦不，是糗图网（<a href="https://www.qiushibaike.com/imgrank/%EF%BC%89%E3%80%82">https://www.qiushibaike.com/imgrank/）。</a></p><p><img src="https://img-blog.csdnimg.cn/20210420200837255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>首先我们定位到一张图片，复制我们看到的链接，在前面加上 ” https: “ 会发现这就是我们需要的爬取东西。那么我们怎么爬取呢？很简单，在网页的源代码中查找。</p><p><img src="https://img-blog.csdnimg.cn/20210420201842147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>如果我们试着去定位多个图片的源码位置，我们会发现所有我们需要的数据都在标签<code>&lt;div class= &quot;thumb&quot;</code>下面的<code>&lt;img src</code>里面，这时候我们就可以发挥正则表达式的强大作用了。</p><p>话不多说，直接上代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果不存在这个文件，创建一个文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url </span>    url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/"</span>    <span class="token comment" spellcheck="true"># 发送请求，获取网页源码</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 对源代码进行正则解析</span>    ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb".*?&lt;img src="(.*?)" alt=".*?&lt;/div>'</span>    data_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># re.S 是必要的，因为我们是要单行查找</span>    <span class="token comment" spellcheck="true"># print(data_list)  我们可以先打印看看是否符合要求</span>        <span class="token comment" spellcheck="true"># 在爬取到的内容前加上 “https:”形成新的 url</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> data        title <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 请求命令</span>        photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content <span class="token comment" spellcheck="true"># conntent 命令是为了将爬取到的数据转换成数据流</span>        path <span class="token operator">=</span> <span class="token string">"./糗图/"</span> <span class="token operator">+</span> title        <span class="token comment" spellcheck="true"># 保存</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 给一个下载完成的提示</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>然后我们查看新建的文件夹</p><p><img src="https://img-blog.csdnimg.cn/20210420215110158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>这说明我们成功了。当然我们只爬取了一页网页的图片，如果我们要爬取动态的网页的图片要怎么做呢？</p><p>给个提示，观察一下第二页第三页网址的区别。</p><p>这不得自己试着写一下。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（6）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-6/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-6/</url>
      
        <content type="html"><![CDATA[<h1 id="药监局爬取"><a href="#药监局爬取" class="headerlink" title="药监局爬取"></a>药监局爬取</h1><p>是不是在看到 “ 药监局 ” 这三个字的时候，突然想到爬虫可能会进局子的事实？ 说到局子，我突然想到另一件事，因为前面写的是很基础的代码，没有代理池，所以在写的时候，特别是爬取翻页的时候，尽量减少爬取的页数，不然，额，后果自负。</p><p>开个玩笑，没什么大问题的，就是很有可能自己的 IP 会被对面拉入黑名单（目前学的代码而言）</p><p>欧克，言归正传，让我们回到药监局的爬取上吧。如果不出意外的话，这是 requests 模块的最后练习了，结束之后就是激动人心的数据解析了。</p><p>先说说药监局网站，我不清楚是因为我用的是学校局域网的原因，还是药监局网站本身的数据维护更新原因，我这边晚上八点半之后就打开不了药监局网站了。</p><p>闲话少说（其实说了很多），我们先打开药监局网站（<a href="http://scxk.nmpa.gov.cn:81/xk/%EF%BC%89%EF%BC%8C%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F%E3%80%82">http://scxk.nmpa.gov.cn:81/xk/），一探究竟。</a><br><img src="https://img-blog.csdnimg.cn/20210420150643122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>当我们随便点击一家企业时，得到的界面如下：</p><p><img src="https://img-blog.csdnimg.cn/20210420150720521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>而这些企业具体信息是我们今天要爬取的对象数据。</p><p>首先我们来爬取药监局的首页数据。<br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 URL</span>    url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 保存</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./药监局.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>然后我们打开保存的文件一看。<br><img src="https://img-blog.csdnimg.cn/20210420151921155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>唉，为什么，明明已经加载完成了，但我们看不到任何企业的信息？</p><p>别着急，让我们现在回到药监局的首页，打开抓包工具的 “ Network ” 分析一波（当然其实我们可以使用 数据解析 解决这个问题，但实际上我们还没学不是吗？）。欧克，回到抓包工具，点击 response。</p><p><img src="https://img-blog.csdnimg.cn/20210420152351636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后在按下 “ctrl” + “F”，开始查找</p><p><img src="https://img-blog.csdnimg.cn/20210420152537239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现网页源码上并没有 “海南” ， 但我们的公司名称里却有，这说明，我们对应的 url 并不能获取我们需要的数据，那么这些数据在哪里呢？不知道你们有没有想到我们前面提到过的 AJAX。好吧，既然我们没有别的办法，那就试试喽。</p><p>结果这一看真是不得了。</p><p><img src="https://img-blog.csdnimg.cn/20210420153033526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>response 里的 json 不就是我们想要的吗？赶紧兴奋地去在线解析一下<br><img src="https://img-blog.csdnimg.cn/20210420153306674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们会发现这些数据里面的 ID 特别显眼，然后再回到我们公司的具体信息的页面，一看，我的天呀，这是什么啊。<br><img src="https://img-blog.csdnimg.cn/20210420153703282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这不就是我们要的 url 里的动态部分吗？别太激动了，试验一下。</p><p><img src="https://img-blog.csdnimg.cn/20210420153841806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>一验证，发现果然如此，这不得仰天长啸一翻，天不亡我。</p><p>好了，既然得到了这些信息，我们是不是就可以写代码了吗？</p><p>当然你要写没有拦你，但你打开一看自己得到的数据或是网页，就会发现，结果和前面一样，没有任何数据。然后我们再一次重复上面的数据就会发现数据还是被保存在 XHR 的请求中，是不是特别想说一句 “ 禁止套娃 ”？</p><p>不管有多少脏话要骂，还是要写代码，唉，要不边写边骂？</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 XHR 的 url</span>    url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList"</span>    <span class="token comment" spellcheck="true"># data</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"on"</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>        <span class="token string">"page"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"pageSize"</span><span class="token punctuation">:</span> <span class="token string">"15"</span><span class="token punctuation">,</span>        <span class="token string">"productName"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token string">"conditionType"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"applyname"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"applysn"</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 存储最后的 ID 数据</span>    id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        data<span class="token punctuation">[</span><span class="token string">"page"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送请求命令，获取 json 数据</span>        data_json <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 分析一下 json 数据的结构</span>        data_list <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">"list"</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            id_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 公司具体信息网页的 XHR 中的 url</span>    new_url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"5eb10afc74a2462c8e86652ec8d90a48"</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> ID <span class="token keyword">in</span> id_list<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ID        <span class="token comment" spellcheck="true"># 发送请求</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>new_url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这是一个json串，我们可以先在线解析，再保存我们想要的东西</span>        name <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">"epsName"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 保存</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">".公司信息.text"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"公司名称："</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"epsName"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"公司地址："</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"epsProductAddress"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"法定代表人："</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"legalPerson"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 提示</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"的信息下载完成！！！"</span><span class="token punctuation">)</span></code></pre><p>我们运行一下程序，结果如下：<br><img src="https://img-blog.csdnimg.cn/20210420190105233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>打开文件一看<br><img src="https://img-blog.csdnimg.cn/20210420190154657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（5）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-5/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-5/</url>
      
        <content type="html"><![CDATA[<h1 id="肯德基餐厅地址查询"><a href="#肯德基餐厅地址查询" class="headerlink" title="肯德基餐厅地址查询"></a>肯德基餐厅地址查询</h1><p>前面我们学习了破解百度翻译，知道了 AJAX 的工作原理和爬取，那么我们今天就来巩固我们的学习成果吧。</p><p>首先我们打开肯德基的官网，点击 “餐厅查询”<br><img src="https://img-blog.csdnimg.cn/20210418212331439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后是没有地址的网页，然后我们输入地址<br><img src="https://img-blog.csdnimg.cn/20210418212616822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210418212546441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现不论有没有搜索，网址都没有发生变化，这说明肯德基官网的地址查询是通过 AJAX 实现的，知道了这样一点我们就可以使用抓包工具进行分析了。</p><p>我们可以从抓包工具中找到请求的 url 和相对应的请求命令和数据类型。<br><img src="https://img-blog.csdnimg.cn/20210418214041202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210418214055199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210418231617567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>我们发现这是一个 json 串，我们还需要像上次破解百度翻译一样先把 json 串爬取下来，再在线解析吗？答案当然是否定的，我们可以在抓包工具的 response 中得到目前的 json，然后在线解析。</p><p><img src="https://img-blog.csdnimg.cn/20210418213447336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210418213609839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>欧克，那么我就可以开始写爬取肯德基餐厅地址的代码了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定 URL</span>    url <span class="token operator">=</span> <span class="token string">"http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword"</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 数据</span>    kd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"需要查询的地点："</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"cname"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"pid"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token string">"keyword"</span><span class="token punctuation">:</span> kd <span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 要搜索的地址</span>        <span class="token string">"pageIndex"</span><span class="token punctuation">:</span> <span class="token string">"1"</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 要爬取的网页的页码</span>        <span class="token string">"pageSize"</span><span class="token punctuation">:</span> <span class="token string">"10"</span> <span class="token comment" spellcheck="true"># 每一页的数量</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 爬取两页</span>        data<span class="token punctuation">[</span><span class="token string">"pageIndex"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">"Table1"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 存储</span>        <span class="token keyword">for</span> detail <span class="token keyword">in</span> page<span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./肯德基地址.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"storeName:"</span> <span class="token operator">+</span> detail<span class="token punctuation">[</span><span class="token string">"storeName"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"addressDetail:"</span> <span class="token operator">+</span> detail<span class="token punctuation">[</span><span class="token string">"addressDetail"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>打开保存的文件如下</p><p><img src="https://img-blog.csdnimg.cn/20210418231504846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>说明爬取成功</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（4）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-4/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-4/</url>
      
        <content type="html"><![CDATA[<h1 id="“破解”百度翻译"><a href="#“破解”百度翻译" class="headerlink" title="“破解”百度翻译"></a>“破解”百度翻译</h1><p>翻译是一件麻烦的事情，如果可以写一个爬虫程序直接爬取百度翻译的翻译结果就好了，可当我打开百度翻译的页面，输入要翻译的词时突然发现不管我要翻译什么，网址都没有任何变化，那么百度翻译要怎么爬取呢？</p><p>爬取百度翻译之前，我们先要明白百度翻译是怎么在不改变网址的情况下实现翻译的。百度做到这一点是用 AJAX 实现的，简单地说，AJAX的作用是在不重新加载网页的情况下进行局部的刷新。</p><p>了解了这一点，那么我们要怎么得到 AJAX 工作时请求的URL呢？老规矩，使用抓包工具。步骤如下：</p><ol><li>在 “百度翻译” 页面右键，选择“Notework”</li><li>选择 “ XHR ”</li></ol><p><img src="https://img-blog.csdnimg.cn/2021041717220450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><ol start="3"><li>如果画面没有任何数据，可以试着输入要翻译的词，比如说我输入“dog”时，就发生了如下的变化</li></ol><p><img src="https://img-blog.csdnimg.cn/20210417172456378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们看到此时的 kw 是我要翻译的词，说明这是我们要找的东西。</p><p>（注意：我们发现其中有三个 sug ，我选的只是其中一个。如果我们全都带点开看，就会发现，他们的 kw 分别是：d 和 do。这是因为我打 dog 时一个单词一个单词打的，而 AJAX 是时时刷新。如果输入中文就不会出现这种情况。翻译中文时，我们找的也不是 sug 了，具体是什么，就看哪个包的 data 的值是我们要翻译的词。）</p><p>然后我们在回到上面，找到我们需要指定的 URL 、我们要选择的请求命令以及爬取到的数据的类型。</p><p><img src="https://img-blog.csdnimg.cn/2021041719215232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>欧克，做到这里我们的前期准备就完成了，下面就可以开始着手写代码了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    url <span class="token operator">=</span> <span class="token string">"https://fanyi.baidu.com/sug"</span>    <span class="token comment" spellcheck="true"># 要翻译的词</span>    keyword <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"需要翻译的词："</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"kw"</span><span class="token punctuation">:</span> keyword        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><p>我们运行程序发现结果是这样的：<br><img src="https://img-blog.csdnimg.cn/2021041719410599.png"><br>因为请求到的数据比较短，所以我们比较容易地看出数据的结构是字典里有列表，列表里又有字典结构。如果比较长，我们可以使用在线 json 转换,转换后的数据是这样的</p><p><img src="https://img-blog.csdnimg.cn/20210417194625764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们只需要 dog 的释义，所以我们还可以对我们代码进行优化</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"v"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>注意：<br>关于 data 的字典，并不是说只需要 “ kw ”: dog, data 的字典里要存储的是抓包工具里 from data 里所有的值，如果没有值，那么相对应的值就是空字符串。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（3）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-3/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-3/</url>
      
        <content type="html"><![CDATA[<h1 id="简易网页搜集器（2）"><a href="#简易网页搜集器（2）" class="headerlink" title="简易网页搜集器（2）"></a>简易网页搜集器（2）</h1><p>前面我们学会了如何用 UA 伪装骗过服务器爬取我们想要的网页数据，不知道你们会不会和我一样在学会 UA 伪装的兴奋后突然想到另一个问题——就是我们爬取一个页面就要改一次 url 吗？</p><p>答案当然是否定的。</p><p>我们观察下面两个网址<br><img src="https://img-blog.csdnimg.cn/2021041616565422.png"><br><img src="https://img-blog.csdnimg.cn/20210416165736945.png"><br>一个显然易见的区别是我圈起来的部分，即“wd &#x3D; ”<br>那我就怀疑搜索不同的关键词，“wd” 都不同，那么是不是这么一回事呢？我们可以试试。</p><p>结果就像这样<br><img src="https://img-blog.csdnimg.cn/20210416170212646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>欧克，这就说明关键在于 “wd”的值，那么我们就可以根据这点写一个动态的URL</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 要搜索的内容</span>    kd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"百度一下，你就知道："</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?"</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"wd"</span><span class="token punctuation">:</span> kd        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span>kd<span class="token operator">+</span><span class="token string">".html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取数据成功！！！"</span><span class="token punctuation">)</span></code></pre><p>当然，url 还可以写成这样的</p><pre class=" language-python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?"</span> <span class="token operator">+</span> <span class="token string">"wd="</span> <span class="token operator">+</span> kd</code></pre><p>我们打开保存的文件，看看结果<br><img src="https://img-blog.csdnimg.cn/20210416172140334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这说明我们的代码没有问题，我们可以不改变代码实现关键词搜索爬取网页了</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（2）</title>
      <link href="/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-2/"/>
      <url>/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-2/</url>
      
        <content type="html"><![CDATA[<h1 id="简易网页搜集器"><a href="#简易网页搜集器" class="headerlink" title="简易网页搜集器"></a>简易网页搜集器</h1><p>前面我们已经学会了简单爬取浏览器页面的爬虫。但事实上我们的需求当然不是爬取搜狗首页或是B站首页这么简单，再不济，我们都希望可以爬取某个特定的有信息的页面。</p><p>不知道在学会了爬取之后，你有没有跟我一样试着去爬取一些搜索页面，比如说百度。像这样的页面</p><p><img src="https://img-blog.csdnimg.cn/20210415104803318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="要爬取的网页"></p><p>注意我红笔划的部分，这是我打开的网页。现在我希望能爬取这一页的数据，按我们前面学的代码，应该是这样写的：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定URL</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=93923645_hao_pg&amp;wd=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;rsv_spt=1&amp;oq=%25E7%2588%25AC%25E5%258F%2596%25E7%2599%25BE%25E5%25BA%25A6%25E9%25A6%2596%25E9%25A1%25B5&amp;rsv_pq=b233dcfd0002d2d8&amp;rsv_t=ccdbEuqbJfqtjnkFvevj%2BfxQ0Sj2UP88ixXHTNUNsmTa9yWEWTUEgxTta9r%2Fj3mXxDs%2BT1SU&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_sug3=8&amp;rsv_sug1=5&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=t&amp;inputT=1424&amp;rsv_sug4=1424"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取数据</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./奥特曼.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取成功！！！"</span><span class="token punctuation">)</span></code></pre><p>然而打开我们保存的文件，发现结果跟我们想的不太一样<br><img src="https://img-blog.csdnimg.cn/20210415110105396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现我们保存的文件是一个空白的页面，这是为什么呢？</p><p>其实上我们把网址改成搜狗的可能或更直观一些（不知道为什么我这边的搜狗总是打不开，所以就用百度做例子，可以自己写写有关搜狗搜索的代码），同样的代码改成搜狗的网址结果是这样的</p><p><img src="https://img-blog.csdnimg.cn/20210415110721166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现其中有句话是 “ 网络中存在异常访问 ”，那么这句话是什么意思呢？这句话的意思就是说，搜狗或是百度注意到发送请求的是爬虫程序，而不是人工操作。</p><p>那么这其中的原理又是什么呢？简单来说，就是程序访问和我们使用浏览器访问是有区别的，被请求的服务器都是靠 user-agent 来判断访问者的身份，如果是浏览器就接受请求，否则就拒绝。这就是一个很常见的反爬机制。</p><p>那是不是我们就没有办法呢？非也~所谓魔高一尺，道高一丈。既然要识别 user-agent ，那么我们就让爬虫模拟 user-agent 好了。</p><p>在 python 中模拟输入数据或是 user-agent ，我们一般用字典<br>就这样子写：</p><pre class=" language-python"><code class="language-python">header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># user-agent 的值 是一个长字符串</span>    <span class="token punctuation">}</span></code></pre><p>那么  user-agent 的值又是怎么得到的呢？<br>    1. 打开任意网页，右键点击，选择“检查”<br><img src="https://img-blog.csdnimg.cn/20210415112140584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>    2. 选择“ Network ”（谷歌浏览器）（如果是中文，就选择 “网络” 这一项）<br><img src="https://img-blog.csdnimg.cn/20210415112339671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>    3. 如果发现点开是空白的，像这样，那就刷新网页<br>    <img src="https://img-blog.csdnimg.cn/2021041511261560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>    刷新后是这样的：<br>    <img src="https://img-blog.csdnimg.cn/20210415112717305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后随机选择红笔圈起来的一项，我们会看到这样的东西，然后在里面找到“user-agent”，把它的值复制下来就行了<br><img src="https://img-blog.csdnimg.cn/20210415113039196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>有了 “user-agent”， 我们在重新写我们的爬取网页的代码，就可以了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定URL</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=93923645_hao_pg&amp;wd=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;rsv_spt=1&amp;oq=%25E7%2588%25AC%25E5%258F%2596%25E7%2599%25BE%25E5%25BA%25A6%25E9%25A6%2596%25E9%25A1%25B5&amp;rsv_pq=b233dcfd0002d2d8&amp;rsv_t=ccdbEuqbJfqtjnkFvevj%2BfxQ0Sj2UP88ixXHTNUNsmTa9yWEWTUEgxTta9r%2Fj3mXxDs%2BT1SU&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_sug3=8&amp;rsv_sug1=5&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=t&amp;inputT=1424&amp;rsv_sug4=1424"</span>    <span class="token comment" spellcheck="true"># 模拟 “user-agent”，即 UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span> <span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># 复制的 user-agent 的值</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取数据</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./奥特曼(UA伪装).html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取成功！！！"</span><span class="token punctuation">)</span></code></pre><p>再次运行，然后打开文件<br><img src="https://img-blog.csdnimg.cn/20210415113826866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这次成功了，说明我们的爬虫程序完美地骗过了服务器</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（1）</title>
      <link href="/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-1/"/>
      <url>/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-1/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫的流程："><a href="#爬虫的流程：" class="headerlink" title="爬虫的流程："></a>爬虫的流程：</h1><p>在开始学习爬虫，我们必须了解爬虫的流程框架。在我看来爬虫的流程大概就是三步，即不论我们爬取的是什么数据，总是可以把爬虫的流程归纳总结为这三步：</p><ol><li>指定 url， 可以简单的理解为指定要爬取的网址</li><li>发送请求。requests 模块的请求一般为 get 和 post</li><li>将爬取的数据存储</li></ol><h1 id="requests-模块的下载导入："><a href="#requests-模块的下载导入：" class="headerlink" title="requests 模块的下载导入："></a>requests 模块的下载导入：</h1><p>因为 requests 模块属于外部库，所以需要我们自己导入库</p><p>导入的步骤：</p><ol><li>右键Windows图标</li><li>点击“运行”</li><li>输入“cmd”打开命令面板</li><li>输入“pip install requests”,等待下载完成</li></ol><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210413165648257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_1,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210413165904237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="打开cmd"></p><p><img src="https://img-blog.csdnimg.cn/20210413165910162.png" alt="下载 requests 模块 "></p><p>如果还是下载失败，我的建议是”百度一下，你就知道“（我也是边学边写，是在是水平有限）</p><p>欧克，既然导入成功后我们就简单的来爬取一下搜狗的首页吧！<br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.sougou.com/"</span>    <span class="token comment" spellcheck="true"># 发起请求</span>    <span class="token comment" spellcheck="true"># get方法会返回一个响应数据</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取响应数据</span>    page_txt <span class="token operator">=</span> response<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># text返回一个字符串的响应数据</span>    <span class="token comment" spellcheck="true"># print(page_txt)</span>    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./sougou.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_txt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取数据结束！！！"</span><span class="token punctuation">)</span></code></pre><p>我们打开保存的文件，如图<br><img src="https://img-blog.csdnimg.cn/2021041317282155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="成功保存的网页"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/18/hello-world/"/>
      <url>/2022/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
