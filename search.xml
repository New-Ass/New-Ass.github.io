<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程FTP项目（4）—— Mysql数据库 + FTP</title>
      <link href="/2022/11/25/duo-xian-cheng-ftp-xiang-mu-4-mysql-shu-ju-ku-ftp/"/>
      <url>/2022/11/25/duo-xian-cheng-ftp-xiang-mu-4-mysql-shu-ju-ku-ftp/</url>
      
        <content type="html"><![CDATA[<h2 id="项目开发目录"><a href="#项目开发目录" class="headerlink" title="项目开发目录"></a>项目开发目录</h2><p><img src="https://img-blog.csdnimg.cn/5d606e1d0eac49d4ac0170b3893e29b3.png"></p><h2 id="FTPClient"><a href="#FTPClient" class="headerlink" title="FTPClient"></a>FTPClient</h2><h3 id="bin文件夹-Client-py"><a href="#bin文件夹-Client-py" class="headerlink" title="bin文件夹 Client.py"></a>bin文件夹 Client.py</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding=gbk -*-</span><span class="token comment" spellcheck="true"># @author   : aoteman</span><span class="token comment" spellcheck="true"># @time     : 2022/7/10 10:36</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span> os<span class="token punctuation">,</span> sysPATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>PATH<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">FTPclient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> optparse <span class="token keyword">import</span> OptionParser        opt <span class="token operator">=</span> OptionParser<span class="token punctuation">(</span><span class="token punctuation">)</span>        opt<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-H"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"HOST"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"FTP Server HOST"</span><span class="token punctuation">)</span>        opt<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-P"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"PORT"</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">"int"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"FTP Serve PORT"</span><span class="token punctuation">)</span>        values<span class="token punctuation">,</span> args <span class="token operator">=</span> opt<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(values, args)</span>        self<span class="token punctuation">.</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 实例化 socket</span>        self<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>values<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 登录的用户名</span>        self<span class="token punctuation">.</span>user <span class="token operator">=</span> None        <span class="token comment" spellcheck="true"># 展示给用户的信息头</span>        self<span class="token punctuation">.</span>show <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>        HOST <span class="token operator">=</span> values<span class="token punctuation">.</span>HOST        PORT <span class="token operator">=</span> values<span class="token punctuation">.</span>PORT        <span class="token comment" spellcheck="true"># print(host, port)</span>        <span class="token keyword">if</span> HOST <span class="token operator">and</span> PORT<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 输入的 HOST 和 PORT 都不能为空</span>            self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect succeed"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 连接完成后，进行用户登录</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token string">"ERROR: should supply HOST and PORT !"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 退出并打印提示</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">while</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"please enter your username>>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"enter your password>>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            sql <span class="token operator">=</span> <span class="token string">"select password from user where username = %s"</span>            <span class="token keyword">from</span> core <span class="token keyword">import</span> connect_database            cursor <span class="token operator">=</span> connect_database<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>            rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> rows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 输入的用户名不存在</span>                count <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"用户名错误，请重新输入，您还有{}次机会重新输入"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> rows <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 密码错误</span>                res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> res <span class="token operator">!=</span> password<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 密码错误</span>                    count <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码错误，请重新输入，您还有{}次机会重新输入"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 登录成功</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>user <span class="token operator">=</span> username                    <span class="token keyword">from</span> log <span class="token keyword">import</span> log                    log<span class="token punctuation">.</span>log<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">"login"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>user<span class="token punctuation">)</span>                    msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">"log"</span><span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token punctuation">)</span>                    msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>show <span class="token operator">=</span> msg_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>handle<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_dict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> dict<span class="token punctuation">:</span>        msg_dic <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"action"</span><span class="token punctuation">:</span> action        <span class="token punctuation">}</span>        msg_dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> msg_dic    <span class="token keyword">def</span> <span class="token function">send_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg_dic<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>None<span class="token punctuation">:</span>        <span class="token keyword">import</span> struct<span class="token punctuation">,</span>json        str_msg <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>msg_dic<span class="token punctuation">)</span>        length <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>str_msg<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>length<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str_msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">recv_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>dict<span class="token punctuation">:</span>        length_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">import</span> struct<span class="token punctuation">,</span>json        str_dic_length <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> length_dic<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        str_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>str_dic_length<span class="token punctuation">)</span>        dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str_dic<span class="token punctuation">)</span>        <span class="token keyword">return</span> dic    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""和服务端交互"""</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"{}>>: "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>show<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            cmd_list <span class="token operator">=</span> cmd<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>cmd_list<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                action <span class="token operator">=</span> cmd_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                content <span class="token operator">=</span> cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                action <span class="token operator">=</span> cmd_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                content <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 有该方法</span>                func <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">)</span>                func<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">md</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""在服务端家目录"""</span>        msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">"md"</span><span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>        recv_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"stdout"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"stderr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">from</span> log <span class="token keyword">import</span> log        log<span class="token punctuation">.</span>log<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">"md"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""查看服务端用户当前路径"""</span>        msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">"dir"</span><span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>        recv_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"stdout"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"stderr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">from</span> log <span class="token keyword">import</span> log        log<span class="token punctuation">.</span>log<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">"dir"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">cd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""切换用户在服务端目录"""</span>        msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">"cd"</span><span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>        recv_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(recv_dic.get("stdout"), recv_dic.get("stderr"))</span>        <span class="token keyword">if</span> recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>show <span class="token operator">=</span> recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span>            <span class="token keyword">from</span> log <span class="token keyword">import</span> log            log<span class="token punctuation">.</span>log<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">"cd"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""从服务端下载文件"""</span>        msg_dic<span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">"download"</span><span class="token punctuation">,</span> file_name<span class="token operator">=</span>content<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>        recv_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">102</span><span class="token punctuation">:</span>            file_path <span class="token operator">=</span> recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_path"</span><span class="token punctuation">)</span>            file_size <span class="token operator">=</span> recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_size"</span><span class="token punctuation">)</span>            <span class="token keyword">import</span> time            <span class="token keyword">from</span> config <span class="token keyword">import</span> setting            now <span class="token operator">=</span> str<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d-%H-%M-%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            download_file_path <span class="token operator">=</span> setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now <span class="token operator">+</span> <span class="token string">".download"</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>download_file_path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                sql <span class="token operator">=</span> <span class="token string">"insert into UNDOWNLOAD_FILE(username, file_name, file_path, file_size) values(%s, %s, %s, %s)"</span>                <span class="token keyword">from</span> core <span class="token keyword">import</span> connect_database                cursor <span class="token operator">=</span> connect_database<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span> content <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now <span class="token operator">+</span> <span class="token string">".download"</span><span class="token punctuation">,</span> file_path<span class="token punctuation">,</span> file_size<span class="token punctuation">)</span><span class="token punctuation">)</span>                recv_size <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> file_size<span class="token punctuation">:</span>                    recv_content <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>recv_content<span class="token punctuation">)</span>                    recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>recv_content<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载进度：{}{}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">*</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\r"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n下载完成！！！"</span><span class="token punctuation">)</span>            sql <span class="token operator">=</span> <span class="token string">"delete from UNDOWNLOAD_FILE where username = %s and file_name = %s"</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span> content <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now <span class="token operator">+</span> <span class="token string">".download"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(content + "." + now + ".download")</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>download_file_path<span class="token punctuation">,</span> setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                download_file_path_ <span class="token operator">=</span> download_file_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">".download"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>download_file_path<span class="token punctuation">,</span> download_file_path_<span class="token punctuation">)</span>            <span class="token keyword">from</span> log <span class="token keyword">import</span> log            log<span class="token punctuation">.</span>log<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">"download"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">download_bar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> recv_size<span class="token punctuation">,</span> file_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># recv_size = recv_size</span>        recv_size <span class="token operator">=</span> int<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span>        file_size <span class="token operator">=</span> int<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span>        <span class="token keyword">if</span> recv_size <span class="token operator">&lt;</span> file_size<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载进度：{}{}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">*</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\r"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">re_get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""断点续存"""</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">from</span> core <span class="token keyword">import</span> connect_database            cursor <span class="token operator">=</span> connect_database<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>            sql <span class="token operator">=</span> <span class="token string">"select id,file_name from undownload_file where username = %s"</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>            tips <span class="token operator">=</span> <span class="token triple-quoted-string string">"""--------------------------            id            file_name"""</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>tips<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>                id <span class="token operator">=</span> i<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>                file_name <span class="token operator">=</span> i<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_name"</span><span class="token punctuation">)</span>                tips <span class="token operator">=</span> <span class="token triple-quoted-string string">"""--------------------------            {}            {}"""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>id<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>tips<span class="token punctuation">)</span>            input_id <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"please enter the id to download file(enter 'exit' to exit):>> "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> input_id <span class="token operator">==</span> <span class="token string">"exit"</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> input_id<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果是数字</span>                input_id <span class="token operator">=</span> int<span class="token punctuation">(</span>input_id<span class="token punctuation">)</span>                sql <span class="token operator">=</span> <span class="token string">"select file_name,file_path,file_size from undownload_file where id = %d"</span> <span class="token operator">%</span> input_id                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>                res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                file_name <span class="token operator">=</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_name"</span><span class="token punctuation">)</span>                file_path <span class="token operator">=</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_path"</span><span class="token punctuation">)</span>                file_size <span class="token operator">=</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_size"</span><span class="token punctuation">)</span>                <span class="token keyword">from</span> config <span class="token keyword">import</span> setting                <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果未下载完成的文件未被删除</span>                    recv_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span>                    msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">"re_get"</span><span class="token punctuation">,</span> file_name<span class="token operator">=</span>file_name<span class="token punctuation">,</span> file_path<span class="token operator">=</span>file_path<span class="token punctuation">,</span> file_size<span class="token operator">=</span>file_size<span class="token punctuation">,</span> recv_size<span class="token operator">=</span>recv_size<span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>                    recv_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">102</span><span class="token punctuation">:</span>                        <span class="token keyword">with</span> open<span class="token punctuation">(</span>setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                            <span class="token keyword">while</span> int<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> int<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span><span class="token punctuation">:</span>                                recv_content <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>                                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>recv_content<span class="token punctuation">)</span>                                recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>recv_content<span class="token punctuation">)</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载进度：{}{}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">*</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\r"</span><span class="token punctuation">)</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n下载完成！！！"</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">,</span> setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            download_file_path_ <span class="token operator">=</span> <span class="token punctuation">(</span>setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">".download"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                            os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token punctuation">(</span>setting<span class="token punctuation">.</span>DOWNLOAD_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span><span class="token punctuation">,</span> download_file_path_<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>recv_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                sql <span class="token operator">=</span> <span class="token string">"delete from undownload_file where id = %d"</span> <span class="token operator">%</span> input_id                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>                <span class="token keyword">from</span> log <span class="token keyword">import</span> log                log<span class="token punctuation">.</span>log<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">"re_get"</span><span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"enter wrong"</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>client <span class="token operator">=</span> FTPclient<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="config-文件夹-setting-py-文件"><a href="#config-文件夹-setting-py-文件" class="headerlink" title="config 文件夹 setting.py 文件"></a>config 文件夹 setting.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osDOWNLOAD_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> <span class="token string">"download"</span></code></pre><h3 id="core-文件夹-connect-database-py-文件"><a href="#core-文件夹-connect-database-py-文件" class="headerlink" title="core 文件夹 connect_database.py 文件"></a>core 文件夹 connect_database.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding=gbk -*-</span><span class="token comment" spellcheck="true"># @author   : aoteman</span><span class="token comment" spellcheck="true"># @time     : 2022/7/11 10:09</span><span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> pymysql    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>        host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>        port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>        database<span class="token operator">=</span><span class="token string">"FTP"</span><span class="token punctuation">,</span>        user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>        password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>        charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">,</span>        autocommit<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>cursor<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>    <span class="token keyword">return</span> cursor</code></pre><h3 id="log文件夹-log-py-文件"><a href="#log文件夹-log-py-文件" class="headerlink" title="log文件夹 log.py 文件"></a>log文件夹 log.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding=gbk -*-</span><span class="token comment" spellcheck="true"># @author   : aoteman</span><span class="token comment" spellcheck="true"># @time     : 2022/7/11 10:07</span><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> action<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> core <span class="token keyword">import</span> connect_database    cursor <span class="token operator">=</span> connect_database<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"insert into user_log(username, action, msg) values(%s, %s, %s)"</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> action<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> pymysql    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>        host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>        port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>        database<span class="token operator">=</span><span class="token string">"FTP"</span><span class="token punctuation">,</span>        user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>        password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>        charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">,</span>        autocommit<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> xlwt    book <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> style_compression<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">"日志"</span><span class="token punctuation">,</span> cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    col <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"用户名"</span><span class="token punctuation">,</span> <span class="token string">"进行的操作"</span><span class="token punctuation">,</span> <span class="token string">"操作的信息"</span><span class="token punctuation">,</span> <span class="token string">"操作时间"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">'select username,action,msg,time from user_log'</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> datetime    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"log.xls"</span><span class="token punctuation">)</span></code></pre><h2 id="FTPServer"><a href="#FTPServer" class="headerlink" title="FTPServer"></a>FTPServer</h2><h3 id="bin文件夹-main-py文件"><a href="#bin文件夹-main-py文件" class="headerlink" title="bin文件夹 main.py文件"></a>bin文件夹 main.py文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span>ospath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># FTPServer 所在文件夹路径</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加到环境变量</span>    <span class="token keyword">from</span> lib <span class="token keyword">import</span> management    server <span class="token operator">=</span> management<span class="token punctuation">.</span>Management<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span></code></pre><h3 id="config-文件夹-setting-py-文件-1"><a href="#config-文件夹-setting-py-文件-1" class="headerlink" title="config 文件夹 setting.py 文件"></a>config 文件夹 setting.py 文件</h3><pre class=" language-python"><code class="language-python">HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token number">8080</span><span class="token keyword">import</span> osUSER_HOME <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\home"</span><span class="token comment" spellcheck="true"># print(USER_HOME)</span></code></pre><h3 id="core-文件夹-connect-database-文件"><a href="#core-文件夹-connect-database-文件" class="headerlink" title="core 文件夹 connect_database 文件"></a>core 文件夹 connect_database 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> pymysql    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>        host <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>        port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">,</span>        database <span class="token operator">=</span> <span class="token string">"FTP"</span><span class="token punctuation">,</span>        user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">,</span>        password <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>        charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">,</span>        autocommit<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>cursor<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>    <span class="token keyword">return</span> cursor</code></pre><h3 id="core-文件夹-FTP-sql-文件"><a href="#core-文件夹-FTP-sql-文件" class="headerlink" title="core 文件夹 FTP.sql 文件"></a>core 文件夹 FTP.sql 文件</h3><pre class=" language-python"><code class="language-python">create database FTP<span class="token punctuation">;</span>use FTP<span class="token punctuation">;</span>create table USER<span class="token punctuation">(</span>    id int primary key auto_increment<span class="token punctuation">,</span>    username varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    password varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>create table LOG<span class="token punctuation">(</span>    id int primary key auto_increment<span class="token punctuation">,</span>    username varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    action varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    msg varchar<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    time timestamp <span class="token operator">not</span> null default CURRENT_TIMESTAMP<span class="token punctuation">)</span><span class="token punctuation">;</span>create table USER_LOG<span class="token punctuation">(</span>    id int primary key  auto_increment<span class="token punctuation">,</span>    username varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    action varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    msg varchar<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    time timestamp <span class="token operator">not</span> null default CURRENT_TIMESTAMP<span class="token punctuation">)</span><span class="token punctuation">;</span>create table UNDOWNLOAD_FILE<span class="token punctuation">(</span>    id int primary key  auto_increment<span class="token punctuation">,</span>    username varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    file_name varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    file_path varchar<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    file_size varchar<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="lib文件夹-managment-py文件"><a href="#lib文件夹-managment-py文件" class="headerlink" title="lib文件夹 managment.py文件"></a>lib文件夹 managment.py文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token keyword">class</span> <span class="token class-name">Management</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果该命令存在</span>            func <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>            func<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 否则运行提示函数</span>            self<span class="token punctuation">.</span>tips<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">tips</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        tip <span class="token operator">=</span> <span class="token triple-quoted-string string">"""        ----------------------------------------                  FTP Project Command List        ----------------------------------------        run                  start up FTP Server        ----------------------------------------        create                   create FTP User        ----------------------------------------        delete                   delete FTP User        ----------------------------------------        tips                     FTP Command tip        ----------------------------------------        """</span>        exit<span class="token punctuation">(</span>tip<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> lib <span class="token keyword">import</span> Server        <span class="token keyword">from</span> config <span class="token keyword">import</span> setting        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}FTPServer Run {} {} {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> setting<span class="token punctuation">.</span>HOST<span class="token punctuation">,</span> setting<span class="token punctuation">.</span>PORT<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        server <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>ThreadingTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Server<span class="token punctuation">.</span>FTPserver<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 开启 TCP服务 多线程</span>        server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> core <span class="token keyword">import</span> connect_database        cursor <span class="token operator">=</span> connect_database<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>        username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"username: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要创建的用户的用户名</span>        password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"password: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要创建的用户的密码</span>        <span class="token comment" spellcheck="true"># print(username, password)</span>        sql <span class="token operator">=</span> <span class="token string">"select * from user where username = %s"</span>        res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 该用户不存在，可以创建</span>            sql <span class="token operator">=</span> <span class="token string">"insert into user(username, password) values(%s, %s)"</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"用户创建成功！！！"</span><span class="token punctuation">)</span>            <span class="token keyword">from</span> log <span class="token keyword">import</span> log            action <span class="token operator">=</span> <span class="token string">"login"</span>            log<span class="token punctuation">.</span>log<span class="token punctuation">(</span>username<span class="token punctuation">,</span> action<span class="token punctuation">,</span> username<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"该用户已存在!!!"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> core <span class="token keyword">import</span> connect_database        cursor <span class="token operator">=</span> connect_database<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>        username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"username: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 要删除的用户的用户名</span>        sql <span class="token operator">=</span> <span class="token string">"select * from user where username = %s"</span>        rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> rows <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 要删除的用户存在</span>            sql <span class="token operator">=</span> <span class="token string">"delete from user where username = %s"</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除用户成功！！！"</span><span class="token punctuation">)</span>            <span class="token keyword">from</span> log <span class="token keyword">import</span> log            action <span class="token operator">=</span> <span class="token string">"delete"</span>            log<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> username<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"要删除的用户不存在！！！"</span><span class="token punctuation">)</span></code></pre><h3 id="lib-文件夹-Server-py-文件"><a href="#lib-文件夹-Server-py-文件" class="headerlink" title="lib 文件夹 Server.py 文件"></a>lib 文件夹 Server.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token punctuation">,</span>timeSTATUS_MSG <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">000</span><span class="token punctuation">:</span> <span class="token string">"nothing"</span><span class="token punctuation">,</span>    <span class="token number">100</span><span class="token punctuation">:</span> <span class="token string">"cd dir success!!!"</span><span class="token punctuation">,</span>    <span class="token number">101</span><span class="token punctuation">:</span> <span class="token string">"the dir not exist!!!"</span><span class="token punctuation">,</span>    <span class="token number">102</span><span class="token punctuation">:</span> <span class="token string">"file exits!!!"</span><span class="token punctuation">,</span>    <span class="token number">103</span><span class="token punctuation">:</span> <span class="token string">"file not exits!!!"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FTPserver</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 一定要是 handle</span>        <span class="token comment" spellcheck="true"># print(self.request) # 相当于 conn</span>        <span class="token comment" spellcheck="true"># print(self.client_address) # 相当于 addr</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}连接成功"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>            msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>            action <span class="token operator">=</span> msg_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_%s"</span> <span class="token operator">%</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>                func <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_%s"</span> <span class="token operator">%</span> action<span class="token punctuation">)</span>                func<span class="token punctuation">(</span>msg_dic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">recv_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>dict<span class="token punctuation">:</span>        length_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">import</span> struct<span class="token punctuation">,</span>json        str_dic_length <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> length_dic<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        str_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>str_dic_length<span class="token punctuation">)</span>        dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str_dic<span class="token punctuation">)</span>        <span class="token keyword">return</span> dic    <span class="token keyword">def</span> <span class="token function">make_dict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> status_code<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> dict<span class="token punctuation">:</span>        msg_dic <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"status_code"</span><span class="token punctuation">:</span> status_code<span class="token punctuation">,</span>            <span class="token string">"status_msg"</span><span class="token punctuation">:</span> STATUS_MSG<span class="token punctuation">.</span>get<span class="token punctuation">(</span>status_code<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        msg_dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> msg_dic    <span class="token keyword">def</span> <span class="token function">send_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg_dic<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>None<span class="token punctuation">:</span>        <span class="token keyword">import</span> struct<span class="token punctuation">,</span>json        str_msg <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>msg_dic<span class="token punctuation">)</span>        length <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>str_msg<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>send<span class="token punctuation">(</span>length<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str_msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> msg_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        <span class="token keyword">from</span> config <span class="token keyword">import</span> setting        user_path <span class="token operator">=</span> setting<span class="token punctuation">.</span>USER_HOME <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>username        self<span class="token punctuation">.</span>current_path <span class="token operator">=</span> user_path <span class="token comment" spellcheck="true"># 用户此时在服务端的路径位置</span>        <span class="token keyword">import</span> os        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>user_path<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 该路径不存在</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>user_path<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>show <span class="token operator">=</span> user_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>setting<span class="token punctuation">.</span>USER_HOME<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">000</span><span class="token punctuation">,</span> show<span class="token operator">=</span>self<span class="token punctuation">.</span>show<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>dic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_md</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> msg_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(content)</span>        <span class="token keyword">import</span> subprocess        s <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"md {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_path <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                         stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                         stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>        stdout <span class="token operator">=</span> s<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        stderr <span class="token operator">=</span> s<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">000</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span>stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_dir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> subprocess        s <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"dir {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_path<span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                             stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                             stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>        stdout <span class="token operator">=</span> s<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        stderr <span class="token operator">=</span> s<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">000</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span>stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_cd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> self<span class="token punctuation">.</span>current_path <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> msg_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span>        <span class="token keyword">import</span> os        path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">from</span> config <span class="token keyword">import</span> setting        <span class="token keyword">if</span> <span class="token punctuation">(</span>setting<span class="token punctuation">.</span>USER_HOME <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token keyword">in</span> path <span class="token operator">and</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">import</span> subprocess            s <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"cd {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                 stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                                 stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>            stdout <span class="token operator">=</span> s<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            stderr <span class="token operator">=</span> s<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>show <span class="token operator">=</span> path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>setting<span class="token punctuation">.</span>USER_HOME <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>            msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span>stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> show<span class="token operator">=</span>self<span class="token punctuation">.</span>show<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>current_path <span class="token operator">=</span> path        <span class="token keyword">else</span><span class="token punctuation">:</span>            msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_download</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""下载文件"""</span>        file_name <span class="token operator">=</span> msg_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_name"</span><span class="token punctuation">)</span>        file_path <span class="token operator">=</span> self<span class="token punctuation">.</span>current_path <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> file_name        <span class="token keyword">import</span> os        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果该文件存在</span>            file_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>            msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">,</span> file_path<span class="token operator">=</span>file_path<span class="token punctuation">,</span> file_size<span class="token operator">=</span>file_size<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">103</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_re_get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""断点续存"""</span>        file_path <span class="token operator">=</span> msg_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_path"</span><span class="token punctuation">)</span>        file_size <span class="token operator">=</span> msg_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_size"</span><span class="token punctuation">)</span>        recv_szie <span class="token operator">=</span> msg_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"recv_size"</span><span class="token punctuation">)</span>        <span class="token keyword">import</span> os        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span> <span class="token operator">and</span> int<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span> <span class="token operator">==</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>recv_szie<span class="token punctuation">)</span>                <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            msg_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>make_dict<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">103</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>msg_dic<span class="token operator">=</span>msg_dic<span class="token punctuation">)</span></code></pre><h3 id="log-文件夹-log-py-文件"><a href="#log-文件夹-log-py-文件" class="headerlink" title="log 文件夹 log.py 文件"></a>log 文件夹 log.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> action<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> core <span class="token keyword">import</span> connect_database    cursor <span class="token operator">=</span> connect_database<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"insert into log(username, action, msg) values(%s, %s, %s)"</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> action<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p><img src="https://img-blog.csdnimg.cn/fdb4415dbbc049ffabdcec09f301c1e3.gif"></p><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><p><img src="https://img-blog.csdnimg.cn/08e40403f97b41b39abc5b2c9d8d7f27.gif"></p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p><img src="https://img-blog.csdnimg.cn/513f220fff944334b6f91ae2eded7b90.gif"></p><h3 id="切换目录、下载文件、断点续存"><a href="#切换目录、下载文件、断点续存" class="headerlink" title="切换目录、下载文件、断点续存"></a>切换目录、下载文件、断点续存</h3><p><img src="https://img-blog.csdnimg.cn/1f8c02b5eff7463a8fa530106483f2cb.gif"></p><h3 id="生成日志文件"><a href="#生成日志文件" class="headerlink" title="生成日志文件"></a>生成日志文件</h3><p><img src="https://img-blog.csdnimg.cn/1b2c8cc189764a1f9097b3c1d935ced7.gif"></p>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> FTP 项目 </tag>
            
            <tag> 多线程 FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程FTP项目（3）—— socketserver版本多线程FTP项目</title>
      <link href="/2022/11/25/duo-xian-cheng-ftp-xiang-mu-3-socketserver-ban-ben-duo-xian-cheng-ftp-xiang-mu/"/>
      <url>/2022/11/25/duo-xian-cheng-ftp-xiang-mu-3-socketserver-ban-ben-duo-xian-cheng-ftp-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程FTP项目（3）——-socketserver版本多线程FTP项目"><a href="#多线程FTP项目（3）——-socketserver版本多线程FTP项目" class="headerlink" title="多线程FTP项目（3）—— socketserver版本多线程FTP项目"></a>多线程FTP项目（3）—— socketserver版本多线程FTP项目</h1><h2 id="threading-版"><a href="#threading-版" class="headerlink" title="threading 版"></a>threading 版</h2><p>​        本来是想自己写一个实现多进程的 FTP 项目的，也就是说不使用 socketserver 模块实现多线程 FTP 项目，但是我写到一半调试的时候发现，虽然可以实现多用户同时登录，但是在输入命令之后，客户端很容易被 “远程计算机直接断开连接”。目前还是不清楚出了什么问题，不过看了 socketserver 模块源码后，发现该模块的多线程实现是比较复杂的，所以我觉得出现这个 bug 很大可能是因为我对于多线程的理解使用还不到家，所以还是使用 socketserver 模块实现多线程FTP项目。</p><h2 id="项目开发目录"><a href="#项目开发目录" class="headerlink" title="项目开发目录"></a>项目开发目录</h2><p><img src="https://img-blog.csdnimg.cn/36ae798c09854fed9b1d1cbaef480bff.png"><br><img src="https://img-blog.csdnimg.cn/929fdaf8753a4a4eaa1fa780897e26a4.png"></p><h2 id="项目可实现功能"><a href="#项目可实现功能" class="headerlink" title="项目可实现功能"></a>项目可实现功能</h2><ul><li>用户注册</li><li>多用户登录</li><li>用户查看家目录</li><li>用户切换家目录</li><li>用户在家目录下创建其他文件夹</li><li>用户从服务端下载文件，并且在下载过程中显示进度条</li><li>实现断点续存，文件下载过程中中断连接，可以继续下载，并显示进度条</li></ul><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><ul><li>用户注册在服务端，其实是有问题的，从实际上来看，用户注册是用户做的事情，但是我们不可能在用户端注册用户然后将用户名和密码等信息传入服务端的文件中。<strong>目前能想到的解决方法是使用数据库，所以这样来看，FTP项目我大概到时候还要写一个含数据库的版本</strong>。</li><li>断点续存功能写完之后发现每次退出后都会删除未下载完的文件信息，所以这样好像一次只会存储一个未下载完成的文件信息。</li><li>本来想写一个注销用户的功能，比如启动服务端时可以选择删除操作，在删除前需要输入管理员密码，但最后没有写；</li><li>还有用户目录空间大小分配的功能，比如用户在上传文件时，判断分配的空间大小是否足够，因为没有写上传功能，所以也没有写判断空间大小的功能。</li><li>暂时能想到的不足之处只有这么多，但实际上应该还有挺多不足之处的，所以大概率之后还会再写一个优化后的含数据库的FTP项目。</li></ul><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><h3 id="FTPclient-py-文件"><a href="#FTPclient-py-文件" class="headerlink" title="FTPclient.py 文件"></a>FTPclient.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> optparse<span class="token punctuation">,</span> struct<span class="token punctuation">,</span> json<span class="token punctuation">,</span> time<span class="token punctuation">,</span> os<span class="token keyword">from</span> optparse <span class="token keyword">import</span> OptionParser<span class="token keyword">from</span> configparser <span class="token keyword">import</span> ConfigParserSTR_RECV_LENGTH <span class="token operator">=</span> <span class="token number">8</span> <span class="token comment" spellcheck="true"># 接收信息头字典长度编码后的数据</span>MAX_RECV_LENGTH <span class="token operator">=</span> <span class="token number">1024</span> <span class="token comment" spellcheck="true"># 接收文件时一次性接收的数据长度</span>INI_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\conf\\download.ini"</span> <span class="token comment" spellcheck="true"># 因为没有专门写客户端的settings.py 所以ini的路径就直接写在 FTPclient.py 文件内部</span><span class="token keyword">class</span> <span class="token class-name">MyClient</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># 记录登录的用户名</span>        self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># 记录用户在服务端的当前目录</span>        self<span class="token punctuation">.</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 实例化 socket</span>        <span class="token comment" spellcheck="true"># 启动 FTPclient.py 文件时，用于解析命令行选项</span>        opt <span class="token operator">=</span> OptionParser<span class="token punctuation">(</span><span class="token punctuation">)</span>        opt<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-H"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"HOST"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"FTP Server HOST"</span><span class="token punctuation">)</span>        opt<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-P"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"PORT"</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">"int"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"FTP Serve PORT"</span><span class="token punctuation">)</span>        values<span class="token punctuation">,</span> args <span class="token operator">=</span> opt<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>connection<span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接服务端</span>    <span class="token keyword">def</span> <span class="token function">connection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> values<span class="token punctuation">:</span>optparse<span class="token punctuation">.</span>Values<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""和服务端连接"""</span>        <span class="token comment" spellcheck="true"># 服务器的端口</span>        HOST <span class="token operator">=</span> values<span class="token punctuation">.</span>HOST        PORT <span class="token operator">=</span> values<span class="token punctuation">.</span>PORT        <span class="token keyword">if</span> HOST <span class="token operator">and</span> PORT<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 输入的 HOST 和 PORT 都不能为空</span>            self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect succeed"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接完成后，进行用户登录</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token string">"ERROR: should supply HOST and PORT !"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 退出并打印提示</span>    <span class="token keyword">def</span> <span class="token function">create_msg_to_send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action_type<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> dict<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""制作信息头"""</span>        <span class="token comment" spellcheck="true"># 信息头字典一定要有 action_type 的数据，方便服务端识别命令类型</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"action_type"</span><span class="token punctuation">:</span> action_type        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 传入的 **kwargs 是键值形式，update 将 dic 和 **kwargs 整合成一个信息头字典</span>        dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> dic    <span class="token keyword">def</span> <span class="token function">send_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dic<span class="token punctuation">:</span>dict<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""发送信息"""</span>        <span class="token comment" spellcheck="true"># 字典转换成字符串</span>        dic_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对字符串传毒进行编码，编码后的编码长度恒为 8</span>        dic_str_length <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>dic_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>dic_str_length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发送编码</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>dic_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发送字符串</span>    <span class="token keyword">def</span> <span class="token function">recv_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> dict<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""接收信息"""</span>        <span class="token comment" spellcheck="true"># 解码获取字符串长度</span>        str_length <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>STR_RECV_LENGTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 根据字符串长度选择不同的方式接收消息</span>        <span class="token keyword">if</span> str_length <span class="token operator">&lt;</span> MAX_RECV_LENGTH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 没有超过最大接收长度</span>            dic_str <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>str_length<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 字符串长度超过 1024</span>            recv_size <span class="token operator">=</span> <span class="token number">0</span>            dic_str <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> str_length<span class="token punctuation">:</span>                data <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>MAX_RECV_LENGTH<span class="token punctuation">)</span>                dic_str <span class="token operator">+=</span> data                recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>dic_str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将字符串转化为字典，并返回字典</span>        <span class="token keyword">return</span> dic    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""客户端登录"""</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> num <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 用户可以尝试三次</span>            username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"username >>:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 去除输入后左右两边的空格，防止因为某些原因用户一开始输入时输入多个空格</span>            <span class="token keyword">if</span> <span class="token operator">not</span> username<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 用户名不能为空</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"username can not be empty"</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"password >>:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> password<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 密码不能为空</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"password can not be empty"</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"login"</span><span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 制作信息头</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发送信息头</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 接收服务端的反馈</span>            <span class="token keyword">if</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 根据状态码判断用户是否登录成功，200 代表登陆成功</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {} login succeed !!! {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"current_dir"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 记录用户在服务端的当前目录</span>                self<span class="token punctuation">.</span>username <span class="token operator">=</span> username <span class="token comment" spellcheck="true"># 登录成功，记录用户登录的用户名</span>                self<span class="token punctuation">.</span>re_get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 登录成功后，首先让用户选择是否需要对未完成的文件进行断点续存</span>                self<span class="token punctuation">.</span>handle<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 和服务端进行交互</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                status_msg <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 登录失败，打印服务端反馈的状态信息</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {} !!! {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> status_msg<span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                num <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># 尝试次数减少一次</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""和服务端交互"""</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 用户输入交互命令，输入时的提示信息是用户目前在客户端的当前目录，一样需要去除空格</span>                cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"[{}]>>："</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 输入命令的不能控</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} command should not be empty !!! {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                cmd_list <span class="token operator">=</span> cmd<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对用户输入的内容进行按空格分割，分割之后的第一个词是交互命令名称</span>                <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果客户端存在该方法</span>                    func <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    func<span class="token punctuation">(</span>cmd_list<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 执行该方法，并传入分割后的命令列表作为参数</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 用户输入的交互命令不存在</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} this command is not existed !!! {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印报错</span>    <span class="token keyword">def</span> <span class="token function">parameter_num_judgment</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parameter_length<span class="token punctuation">,</span> Min_num <span class="token operator">=</span> None<span class="token punctuation">,</span> Max_num <span class="token operator">=</span> None<span class="token punctuation">,</span> Exact_num <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""命令参数个数判断"""</span>        <span class="token comment" spellcheck="true"># 判断参数个数时候符合规范，可以输入最大参数个数，最小参数个数，准确的参数个数</span>        <span class="token keyword">if</span> Min_num <span class="token operator">and</span> Min_num <span class="token operator">></span> parameter_length<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} the least number of parameter is {}, but you supply the {} parameter {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span>  Min_num<span class="token punctuation">,</span> parameter_length<span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> Max_num <span class="token operator">and</span> Max_num <span class="token operator">&lt;</span> parameter_length<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} the most number of parameter is {}, but you supply the {} parameter {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span>  Max_num<span class="token punctuation">,</span> parameter_length<span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> Exact_num <span class="token operator">and</span> Exact_num <span class="token operator">!=</span> parameter_length<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} the exact number of parameter is {}, but you supply the {} parameter {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span>  Exact_num<span class="token punctuation">,</span> parameter_length<span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">dir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd_list<span class="token punctuation">:</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""查看在服务端的当前目录"""</span>        <span class="token comment" spellcheck="true"># 首先判断查看目录方法参数是否准确，因为是查看当前目录，所以我们除了命令名称 dir 外，其他参数都是无关紧要的，所以最小需要一个参数</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parameter_num_judgment<span class="token punctuation">(</span>parameter_length <span class="token operator">=</span> len<span class="token punctuation">(</span>cmd_list<span class="token punctuation">)</span><span class="token punctuation">,</span> Min_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 制作信息头并发送</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"dir"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 接收服务端的反馈</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 根据服务端的反馈输出查看目录的结果</span>            stdout <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"stdout"</span><span class="token punctuation">)</span>            stderr <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"stderr"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">cd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd_list<span class="token punctuation">:</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""切换目录"""</span>        <span class="token comment" spellcheck="true"># 切换目录最少需要两个参数，分别是 命令名称 cd 和目标目录</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parameter_num_judgment<span class="token punctuation">(</span>parameter_length<span class="token operator">=</span>len<span class="token punctuation">(</span>cmd_list<span class="token punctuation">)</span><span class="token punctuation">,</span> Min_num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 制作信息头并发送</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>action_type <span class="token operator">=</span> <span class="token string">"cd"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token operator">=</span>dic<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 接收服务端的反馈，并打印状态信息</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">300</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果切换目录成功，当前目录就变为切换后的目录</span>                self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd_lsit<span class="token punctuation">:</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创造文件夹"""</span>        <span class="token comment" spellcheck="true"># 至少需要传入两个参数，命令名称和要创造的文件夹名称</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parameter_num_judgment<span class="token punctuation">(</span>parameter_length<span class="token operator">=</span>len<span class="token punctuation">(</span>cmd_lsit<span class="token punctuation">)</span><span class="token punctuation">,</span> Min_num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"mkdir"</span><span class="token punctuation">,</span> dirname <span class="token operator">=</span> cmd_lsit<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token operator">=</span>dic<span class="token punctuation">)</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 打印服务端反馈的状态信息</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd_list<span class="token punctuation">:</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""从用户端下载文件"""</span>        <span class="token comment" spellcheck="true"># 至少两个参数，命令名称和需要下载的文件名称</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parameter_num_judgment<span class="token punctuation">(</span>parameter_length<span class="token operator">=</span>len<span class="token punctuation">(</span>cmd_list<span class="token punctuation">)</span><span class="token punctuation">,</span> Min_num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"get"</span><span class="token punctuation">,</span> file_name <span class="token operator">=</span> cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token operator">=</span>dic<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 当前时间，下载的文件在本地有同命名文件时，将作为后缀添加到下载后的文件中</span>            now <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>            now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y年%m月%d日%H时%M分%S秒"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 打开记录未下载完成的文件信息的 ini 文件</span>            conf <span class="token operator">=</span> ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>            conf<span class="token punctuation">.</span>read<span class="token punctuation">(</span>INI_PATH<span class="token punctuation">)</span>            conf<span class="token punctuation">.</span>add_section<span class="token punctuation">(</span>cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now_time<span class="token punctuation">)</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">303</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 表示服务端文件存在，可以下载</span>                file_size <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_size"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要下载的文件总大小</span>                <span class="token comment" spellcheck="true"># 记录文件信息到 ini 中</span>                conf<span class="token punctuation">[</span>cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now_time<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>username <span class="token comment" spellcheck="true"># 此时登录的用户，因为一个客户端可以登录不同的用户，所以记录是什么用户未下载完成的文件，防止断点续存时出现 用户A 可以下载 用户B 的文件的情况</span>                conf<span class="token punctuation">[</span>cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now_time<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"total_size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>file_size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 下载文件总大小</span>                conf<span class="token punctuation">[</span>cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now_time<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"file_path"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>current_dir <span class="token comment" spellcheck="true"># 下载文件在服务端的路径</span>                f <span class="token operator">=</span> open<span class="token punctuation">(</span>INI_PATH<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>                conf<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将记录的信息写入 ini 文件</span>                <span class="token comment" spellcheck="true"># 下载了的大小</span>                recv_size <span class="token operator">=</span> <span class="token number">0</span>                bar <span class="token operator">=</span> self<span class="token punctuation">.</span>process_bar<span class="token punctuation">(</span>total_size<span class="token operator">=</span>file_size<span class="token punctuation">,</span> recv_size<span class="token operator">=</span>recv_size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 实例化进度条，是一个迭代器</span>                bar<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 接收服务端传输的文件</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span>cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now_time<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> file_size<span class="token punctuation">:</span>                        data <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>MAX_RECV_LENGTH<span class="token punctuation">)</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                        recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                        bar<span class="token punctuation">.</span>send<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 进度条显示</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果没有相同命名的文件，就不添加时间</span>                    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now_time<span class="token punctuation">,</span> cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># os.remove(cmd_list[1] + "." + now_time)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    now <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>                    now_time_finally <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y年%m月%d日%H时%M分%S秒"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>                    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now_time<span class="token punctuation">,</span> cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span>now_time_finally<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 存在相同命名的文件，添加时间作为后缀</span>                    <span class="token comment" spellcheck="true"># os.remove(cmd_list[1] + "." + now_time)</span>                <span class="token comment" spellcheck="true"># 因为文件下载成功，删除断点续存 ini 文件中的文件信息</span>                conf<span class="token punctuation">.</span>remove_section<span class="token punctuation">(</span>cmd_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> now_time<span class="token punctuation">)</span>                f <span class="token operator">=</span> open<span class="token punctuation">(</span>INI_PATH<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>                conf<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 要下载的文件在服务端中不存在，客户端打印服务端的反馈状态信息</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_bar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> total_size<span class="token punctuation">,</span> recv_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""进度条"""</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            current_size <span class="token operator">=</span> <span class="token keyword">yield</span> recv_size            <span class="token keyword">if</span> current_size <span class="token operator">/</span> total_size <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">*</span> int<span class="token punctuation">(</span>current_size <span class="token operator">/</span> total_size <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>current_size <span class="token operator">/</span> total_size <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\r"</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> # 每次打印都会覆盖，end<span class="token operator">=</span><span class="token string">"\r"</span> 表示每次打印都从首行开头打印，flush<span class="token operator">=</span><span class="token boolean">True</span> 表示打印时覆盖    <span class="token keyword">def</span> <span class="token function">re_get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""断点续传"""</span>        files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 记录该用户未完成下载的文件文件名</span>        <span class="token comment" spellcheck="true"># 打开 ini 文件</span>        conf <span class="token operator">=</span> ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>        conf<span class="token punctuation">.</span>read<span class="token punctuation">(</span>INI_PATH<span class="token punctuation">)</span>        file_list <span class="token operator">=</span> conf<span class="token punctuation">.</span>sections<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>file_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> file <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>                <span class="token keyword">if</span> conf<span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>username<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 判断在 ini 文件中哪些文件是登录用户的未完成下载的文件</span>                    files<span class="token punctuation">.</span>append<span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 文件添加到 files 列表中</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> len<span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果该用户有未下载完成的文件</span>                conf<span class="token punctuation">.</span>read<span class="token punctuation">(</span>INI_PATH<span class="token punctuation">)</span>                file_list <span class="token operator">=</span> conf<span class="token punctuation">.</span>sections<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 打印该用户未下载完成的文件信息，包括 文件名称，要下载的文件总大小，文件在服务端的位置</span>                <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>                    index <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""index: {}          file_name: {}                         total_size: {}              current_path: {}"""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">,</span> file<span class="token punctuation">,</span> conf<span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"total_size"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> conf<span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"file_path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    index <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token comment" spellcheck="true"># 如果用户需要继续下载，就输入前面打印的 index，否则输入 “quit” 退出，在退出时会删除 ini 文件中未完成下载的文件信息（退出就删除在写完之后才发现其实不合理，但先这样吧，毕竟以后还要再修改成含数据库的版本的）</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">"If you want to continue downloading the file that was not downloaded last time, please enter the index of the file."</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' Enter "quit" to exit the function. Unfinished files will be automatically deleted when you exit the function'</span><span class="token punctuation">)</span>                cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"[{}]>>："</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 输入不能为空</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} command should not be empty !!! {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> cmd<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 判断输入的是否是数字</span>                    <span class="token triple-quoted-string string">"""如果输入数字"""</span>                    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> int<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 因为是索引，所以索引必须要大于0，而且要小于 files 的长度</span>                        file_name <span class="token operator">=</span> files<span class="token punctuation">[</span>int<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">]</span>                        recv_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取未完成下载的文件已经下载的大小</span>                        <span class="token comment" spellcheck="true"># 制作信息头并发送</span>                        dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"re_get"</span><span class="token punctuation">,</span> file_name<span class="token operator">=</span>file_name<span class="token punctuation">,</span> total_size<span class="token operator">=</span>conf<span class="token punctuation">[</span>file_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"total_size"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> recv_size<span class="token operator">=</span>recv_size<span class="token punctuation">,</span> path<span class="token operator">=</span>conf<span class="token punctuation">[</span>file_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"file_path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token operator">=</span>dic<span class="token punctuation">)</span>                        dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">303</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 要下载的文件在服务端存在</span>                            self<span class="token punctuation">.</span>re_download<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> conf<span class="token punctuation">[</span>file_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"total_size"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> recv_size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 继续下载</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 文件在服务端不存在</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># 下载成功，移除在 ini 文件中的信息</span>                        conf<span class="token punctuation">.</span>remove_section<span class="token punctuation">(</span>files<span class="token punctuation">[</span>int<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        f <span class="token operator">=</span> open<span class="token punctuation">(</span>INI_PATH<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>                        conf<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">)</span>                <span class="token keyword">elif</span> cmd <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 如果不想在退出时删除 ini 中未下载完成的文件信息，可以删除下面的 循环</span>                    <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>                        conf<span class="token punctuation">.</span>remove_section<span class="token punctuation">(</span>file<span class="token punctuation">)</span>                        f <span class="token operator">=</span> open<span class="token punctuation">(</span>INI_PATH<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>                        conf<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># os.remove(file)</span>                    <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} no this index(may you want to enter 'quit') {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">re_download</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> total_size<span class="token punctuation">,</span> recv_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""断点续传的下载"""</span>        <span class="token comment" spellcheck="true"># 下载进度条</span>        bar <span class="token operator">=</span> self<span class="token punctuation">.</span>process_bar<span class="token punctuation">(</span>total_size<span class="token operator">=</span>int<span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token punctuation">,</span> recv_size<span class="token operator">=</span>recv_size<span class="token punctuation">)</span>        bar<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> int<span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>MAX_RECV_LENGTH<span class="token punctuation">)</span>                recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                bar<span class="token punctuation">.</span>send<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">quit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd_list<span class="token punctuation">:</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""断开连接"""</span>        dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"quit"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token string">"{} Quit succeed !!! {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    client <span class="token operator">=</span> MyClient<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="FTPServer-py-文件"><a href="#FTPServer-py-文件" class="headerlink" title="FTPServer.py 文件"></a>FTPServer.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>syspath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里的 path 是 FTPServer 文件夹</span><span class="token comment" spellcheck="true"># 选择 os.path.dirname 有一个好处就是不用管 FTPServer 文件夹到底在哪个路径，不需要因为FTPServer位置更改而更改路径代码</span><span class="token comment" spellcheck="true"># print(path)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将目录添加到环境变量，这样就可以导入 lib 中的文件了</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> lib <span class="token keyword">import</span> Mangement    server <span class="token operator">=</span> Mangement<span class="token punctuation">.</span>management<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># sys.argv 解析命令行命令，比如说我们在命令行输入 python FTPServer.py start，那么此时的 sys.argv 就是 ["FTPServer", "start"] 这样一个列表</span>    <span class="token comment" spellcheck="true"># 将 sys.argv 传入Mangement文件中的management类，实例化该类</span></code></pre><h3 id="settings-py-文件"><a href="#settings-py-文件" class="headerlink" title="settings.py 文件"></a>settings.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 服务端端口信息</span>HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token number">8080</span><span class="token comment" spellcheck="true"># 存储用户信息的 ini 文件的路径</span>ACCOUNTS_INI <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\accounts.ini"</span><span class="token comment" spellcheck="true"># 存放用户家目录的文件夹目录</span>HOME_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\home"</span><span class="token comment" spellcheck="true"># 服务端日志文件夹目录</span>LOG_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\log"</span></code></pre><h3 id="Management-py-文件"><a href="#Management-py-文件" class="headerlink" title="Management.py 文件"></a>Management.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token keyword">from</span> lib <span class="token keyword">import</span> main<span class="token keyword">from</span> lib <span class="token keyword">import</span> Create<span class="token keyword">from</span> conf <span class="token keyword">import</span> settings<span class="token keyword">class</span> <span class="token class-name">management</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sys_argv<span class="token punctuation">)</span><span class="token punctuation">:</span>        sys_argv <span class="token operator">=</span> sys_argv        self<span class="token punctuation">.</span>verify_argv<span class="token punctuation">(</span>sys_argv<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">verify_argv</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sys_argv<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""验证命令是否正确"""</span>        tips <span class="token operator">=</span> <span class="token triple-quoted-string string">"""        ---------------------------------------------                    FTP Server command        ---------------------------------------------              start              -- 启动 FTP 服务端        ---------------------------------------------              create             -- 注册新用户        ---------------------------------------------              delete             -- 管理员注销用户        ---------------------------------------------        """</span>        command <span class="token operator">=</span> sys_argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果该命令存在，就执行改命令</span>            func <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">)</span>            func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""启动服务端"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}FTP Server start {} {}{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>HOST<span class="token punctuation">,</span> settings<span class="token punctuation">.</span>PORT<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        server <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>ThreadingTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span>HOST<span class="token punctuation">,</span> settings<span class="token punctuation">.</span>PORT<span class="token punctuation">)</span><span class="token punctuation">,</span> main<span class="token punctuation">.</span>MyServer<span class="token punctuation">)</span>        server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建用户"""</span>        create <span class="token operator">=</span> Create<span class="token punctuation">.</span>createUser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""删除用户"""</span>        <span class="token keyword">pass</span></code></pre><h3 id="Create-py-文件"><a href="#Create-py-文件" class="headerlink" title="Create.py 文件"></a>Create.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> configparser <span class="token keyword">import</span> ConfigParser<span class="token keyword">from</span> conf <span class="token keyword">import</span> settings<span class="token keyword">import</span> hashlib<span class="token punctuation">,</span>os<span class="token keyword">class</span> <span class="token class-name">createUser</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 打开 ini 文件，记录创建的用户名和密码信息</span>        self<span class="token punctuation">.</span>conf <span class="token operator">=</span> ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>read<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>ACCOUNTS_INI<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"the username of the user what you want to create >>:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> username<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 用户名不能为空</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the username cannot be empty"</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>verify_username<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 判断该用户名是否已存在</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this username is existed"</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"the password of the user you want to create >>:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> username<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 密码不能为空</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the password cannot be empty"</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            self<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">def</span> <span class="token function">verify_username</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""检验用户名是否已存在"""</span>        username_list <span class="token operator">=</span> self<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>sections<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> username <span class="token keyword">in</span> username_list<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将用户名和密码写入配置文件"""</span>        self<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>add_section<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>        md5_password <span class="token operator">=</span> self<span class="token punctuation">.</span>md5_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 得到加密后的密码</span>                <span class="token comment" spellcheck="true"># 用户名和密加密后的密码写入 ini 文件</span>        self<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> md5_password<span class="token punctuation">)</span>        f <span class="token operator">=</span> open<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>ACCOUNTS_INI<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {} create succeed !!! {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_dir<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">md5_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""加密密码并写入配置文件"""</span>        md5_ <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>        md5_<span class="token punctuation">.</span>update<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        md5_password <span class="token operator">=</span> md5_<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(md5_password)</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>md5_password<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create_dir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建用户时，创建用户家目录"""</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>HOME_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> username<span class="token punctuation">)</span></code></pre><h3 id="main-py-文件"><a href="#main-py-文件" class="headerlink" title="main.py 文件"></a>main.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token punctuation">,</span> json<span class="token punctuation">,</span> struct<span class="token punctuation">,</span>hashlib<span class="token punctuation">,</span> subprocess<span class="token punctuation">,</span> os<span class="token punctuation">,</span>time<span class="token keyword">from</span> configparser <span class="token keyword">import</span> ConfigParser<span class="token keyword">from</span> conf <span class="token keyword">import</span> settingsSTR_RECV_LENGTH <span class="token operator">=</span> <span class="token number">8</span>MAX_RECV_LENGTH <span class="token operator">=</span> <span class="token number">8096</span>STATUS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">200</span><span class="token punctuation">:</span> <span class="token string">"Login succeed"</span><span class="token punctuation">,</span>    <span class="token number">201</span><span class="token punctuation">:</span> <span class="token string">"Error: wrong password or wrong username"</span><span class="token punctuation">,</span>    <span class="token number">202</span><span class="token punctuation">:</span> <span class="token string">"Check the current dir"</span><span class="token punctuation">,</span>    <span class="token number">300</span><span class="token punctuation">:</span> <span class="token string">"{} cd the path done {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">301</span><span class="token punctuation">:</span> <span class="token string">"{} the path is not existed {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">302</span><span class="token punctuation">:</span> <span class="token string">"{} dir create succeed {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">303</span><span class="token punctuation">:</span> <span class="token string">"{} the file is existed {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">304</span><span class="token punctuation">:</span> <span class="token string">"{} the file is not existed {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 状态码，反馈给客户端，帮助客户端判断服务端的执行命令的结果</span><span class="token keyword">class</span> <span class="token class-name">MyServer</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>client_name <span class="token operator">=</span> None        self<span class="token punctuation">.</span>HOME_PATH <span class="token operator">=</span> None        self<span class="token punctuation">.</span>current_path <span class="token operator">=</span> None        self<span class="token punctuation">.</span>show_to_client_path <span class="token operator">=</span> None        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"connect succeed"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 客户端连接成功</span>        self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token string">"connect succeed"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                dic <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> dic<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                action_type <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action_type"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 判断客户端的命令类型</span>                <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_%s"</span> <span class="token operator">%</span> action_type<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果存在该命令，就执行，并将客户端发送的 dic 作为参数传入执行命令</span>                    func <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_%s"</span> <span class="token operator">%</span> action_type<span class="token punctuation">)</span>                    func<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">def</span> <span class="token function">create_msg_to_send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> status_code<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> dict<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""制作信息头"""</span>        <span class="token comment" spellcheck="true"># 和客户端基本一致</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"status_code"</span><span class="token punctuation">:</span> status_code<span class="token punctuation">,</span>            <span class="token string">"status_msg"</span><span class="token punctuation">:</span> STATUS<span class="token punctuation">.</span>get<span class="token punctuation">(</span>status_code<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> dic    <span class="token keyword">def</span> <span class="token function">send_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dic<span class="token punctuation">:</span> dict<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""发送信息"""</span>        <span class="token comment" spellcheck="true"># 和客户端基本一致</span>        dic_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>        dic_str_length <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>dic_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>dic_str_length<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>dic_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">recv_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> dict<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""接收信息"""</span>        <span class="token comment" spellcheck="true"># 和客户端基本一致</span>        pack_length <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>STR_RECV_LENGTH<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> pack_length<span class="token punctuation">:</span>            dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">return</span> dic        str_length <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> pack_length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> str_length <span class="token operator">&lt;</span> MAX_RECV_LENGTH<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 没有超过最大接收长度</span>            dic_str <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>str_length<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            recv_size <span class="token operator">=</span> <span class="token number">0</span>            dic_str <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> str_length<span class="token punctuation">:</span>                data <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>MAX_RECV_LENGTH<span class="token punctuation">)</span>                dic_str <span class="token operator">+=</span> data                recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>dic_str<span class="token punctuation">)</span>        <span class="token keyword">return</span> dic    <span class="token keyword">def</span> <span class="token function">_login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dic<span class="token punctuation">:</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""用户登录验证"""</span>        <span class="token comment" spellcheck="true"># 获取客户端传入的用户名和密码</span>        username <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将客户端传入的密码进行加密并且和 ini 文件记录的加密密码进行匹配</span>        md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>        md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        md5_password <span class="token operator">=</span> md5<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>        conf <span class="token operator">=</span> ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>        conf<span class="token punctuation">.</span>read<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>ACCOUNTS_INI<span class="token punctuation">)</span>        <span class="token keyword">if</span> username <span class="token keyword">in</span> conf<span class="token punctuation">.</span>sections<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 该用户已注册，表示可以登录（这里写的多用户登录并不能防止一个用户同时在线，这也是需要修改的地方）</span>            password <span class="token operator">=</span> conf<span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> str<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>md5_password<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 密码正确</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} login succeed, username: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token string">"login succeed, username: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>client_name <span class="token operator">=</span> username <span class="token comment" spellcheck="true"># 记录此时登录的用户名</span>                self<span class="token punctuation">.</span>HOME_PATH <span class="token operator">=</span> settings<span class="token punctuation">.</span>HOME_PATH <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> username <span class="token comment" spellcheck="true"># 登录的用户家目录</span>                self<span class="token punctuation">.</span>current_path <span class="token operator">=</span> self<span class="token punctuation">.</span>HOME_PATH <span class="token comment" spellcheck="true"># 登录的用户当前在服务端的路径位置</span>                self<span class="token punctuation">.</span>show_to_client_path <span class="token operator">=</span> self<span class="token punctuation">.</span>current_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>HOME_PATH<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发送给用户的在服务端的位置，从 home 以后发送，比如说登录 用户为 aoteman，发送给客户端的目录为 “aoteman” 而不包括前面的路径</span>                                <span class="token comment" spellcheck="true"># 制作信息头并发送</span>                dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> current_dir <span class="token operator">=</span> self<span class="token punctuation">.</span>show_to_client_path<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token operator">=</span>dic<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"Error: wrong password or wrong username"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 登录失败，密码不正确</span>                dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token operator">=</span>dic<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span><span class="token string">"Login succeed"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 登陆失败，登录用户未注册，即用户不存在</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token operator">=</span>dic<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_dir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dic<span class="token punctuation">:</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""查看用户当前目录"""</span>        <span class="token comment" spellcheck="true"># 执行终端命令，并储存运行结果</span>        obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"cd {} &amp; dir /s/b"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_path<span class="token punctuation">)</span><span class="token punctuation">,</span>                               shell <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                               stdout <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                               stderr <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>        stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 制作信息头并发送</span>        dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">202</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span>stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {} check the current dir {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_name<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token string">"check the current dir"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_cd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dic<span class="token punctuation">:</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""切换用户目录"""</span>        full_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_path <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>HOME_PATH <span class="token keyword">in</span> full_path <span class="token operator">and</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""判断切换的路径存在并且需要保证用户切换的路径不会是用户家目录的父目录"""</span>            self<span class="token punctuation">.</span>current_path <span class="token operator">=</span> full_path            self<span class="token punctuation">.</span>show_to_client_path <span class="token operator">=</span> self<span class="token punctuation">.</span>current_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>HOME_PATH<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>            subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"cd %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>current_path<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> current<span class="token operator">=</span>self<span class="token punctuation">.</span>show_to_client_path<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {} cd the dir {} {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>current_path<span class="token punctuation">,</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">301</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {} cd the dir {} , but this path is not existed {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>current_path<span class="token punctuation">,</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token string">"cd the dir {} , but this path is not existed "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_mkdir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dic<span class="token punctuation">:</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""制作文件夹"""</span>        <span class="token comment" spellcheck="true"># 允许用户在自己的家目录下新建新的文件夹</span>        dir_name <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"dirname"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_path <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> dir_name<span class="token punctuation">)</span>        dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">302</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {} create the dir {} {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>current_path <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> dir_name<span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token string">"create the dir {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dic<span class="token punctuation">:</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""用户下载文件"""</span>        file_name <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_name"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用户端想要下载的文件</span>        file_path <span class="token operator">=</span> self<span class="token punctuation">.</span>current_path <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> file_name <span class="token comment" spellcheck="true"># 拼接文件路径，查看服务端是否存在该文件</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果文件存在</span>            file_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取文件总大小</span>                         <span class="token comment" spellcheck="true"># 制作信息头并发送</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">303</span><span class="token punctuation">,</span> file_size<span class="token operator">=</span>file_size<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># 打开文件发送给客户端，因为网络通信传输的数据类型是二进制数据，所以 "rb" 打开文件</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>send<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {} get done {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token string">"{} get done"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 要下载的文件不在服务端（或者不在服务端当前目录）</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">304</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_re_get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dic<span class="token punctuation">:</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""断点续传"""</span>        <span class="token comment" spellcheck="true"># print(dic)</span>        file_name_list <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file_name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>         file_name_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 去除时间后缀</span>        file_name <span class="token operator">=</span> <span class="token string">"."</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_name_list<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用户想要继续下载的文件名称</span>        path <span class="token operator">=</span> settings<span class="token punctuation">.</span>HOME_PATH <span class="token operator">+</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> file_name <span class="token comment" spellcheck="true"># 文件在服务端的路径（其实这里有一个问题，应该还要判断文件在服务端是否存在）</span>        total_size <span class="token operator">=</span> int<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_size"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 客户端记录的文件总大小</span>        recv_size <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"recv_size"</span><span class="token punctuation">)</span>        size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取服务端文件的总大小</span>        <span class="token keyword">if</span> total_size <span class="token operator">==</span> size<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 总大小进行对并，避免出现名称一致，但是大小不一致的情况（比如说文件在服务端被更新，这时候继续下载毫无意义）</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">303</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>send<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {} re-get done {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"{} re-get done"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 服务端的文件和客户端想要继续下载的文件总大小并不一致</span>            dic <span class="token operator">=</span> self<span class="token punctuation">.</span>create_msg_to_send<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">304</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_quit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dic<span class="token punctuation">:</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""断开连接"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} close"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token string">"close"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">write_log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""日志制作"""</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>LOG_PATH <span class="token operator">+</span> <span class="token string">"//"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            now <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>            now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y年%m月%d日%H时%M分%S秒"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"{} {} {} {} \t{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_name<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span> now_time<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><h2 id="演示结果"><a href="#演示结果" class="headerlink" title="演示结果"></a>演示结果</h2><p><img src="https://img-blog.csdnimg.cn/b8d092e6f92b4af08e4f35a7528855ba.gif"></p>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> FTP 项目 </tag>
            
            <tag> 多线程 FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程FTP（2）—— socketserver 部分源码解读</title>
      <link href="/2022/11/25/duo-xian-cheng-ftp-2-socketserver-bu-fen-yuan-ma-jie-du/"/>
      <url>/2022/11/25/duo-xian-cheng-ftp-2-socketserver-bu-fen-yuan-ma-jie-du/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程FTP（2）——-socketserver-部分源码解读"><a href="#多线程FTP（2）——-socketserver-部分源码解读" class="headerlink" title="多线程FTP（2）—— socketserver 部分源码解读"></a>多线程FTP（2）—— socketserver 部分源码解读</h1><p>前面我们用 socketserver 演示了 sockeserver 版本的多线程网络通信实现。但实际上我们对于 socketserver 现在处于 “<strong>知其然不知其所以然</strong>” 的情况，<strong>比如说，为什么自己写的类中方法一定要是“handle”？为什么我们只用写通信循环，为什么不用写链接循环？</strong></p><p>所有的这些问题其实都可以通过分析 socketserver 的源码来回答。</p><p>（pycharm可以通过导入 socket server，并且按住 Ctrl+鼠标点击跳转至模块源码）</p><p><img src="https://img-blog.csdnimg.cn/6dc1a6e95d8745bd8cdebf832e4e82c0.gif"></p><h2 id="socketserver-源码中的类"><a href="#socketserver-源码中的类" class="headerlink" title="socketserver 源码中的类"></a>socketserver 源码中的类</h2><p>首先我们看到的是一百多行的灰色的注释，这里的注释其实不需要太过于关注，大概就是对 socket server 模块的摘要和概述（突然想到论文，笑）。</p><p>唯一需要注意的是注释中<strong>这块对于模块中主要类的表示和关系</strong>：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''        +------------+        | BaseServer |        +------------+              |              v        +-----------+        +------------------+        | TCPServer |------->| UnixStreamServer |        +-----------+        +------------------+              |              v        +-----------+        +--------------------+        | UDPServer |------->| UnixDatagramServer |        +-----------+        +--------------------+'''</span>这里显示的是五个类之间的继承关系，箭头代表“继承于”的关系。然后我们看到了的是socketserver 源码中所有类的名称。<span class="token triple-quoted-string string">'''__all__ = ["BaseServer", "TCPServer", "UDPServer",           "ThreadingUDPServer", "ThreadingTCPServer",           "BaseRequestHandler", "StreamRequestHandler",           "DatagramRequestHandler", "ThreadingMixIn"]'''</span>之后的代码就都是这些类的实现，在看这些源码之前，我们把所有的类收起，看一下这些类之间的关系。<span class="token keyword">class</span> <span class="token class-name">BaseServer</span><span class="token keyword">class</span> <span class="token class-name">TCPServer</span><span class="token punctuation">(</span>BaseServer<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UDPServer</span><span class="token punctuation">(</span>TCPServer<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">_Threads</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">_NoThreads</span><span class="token keyword">class</span> <span class="token class-name">ThreadingMixIn</span><span class="token keyword">class</span> <span class="token class-name">ThreadingUDPServer</span><span class="token punctuation">(</span>ThreadingMixIn<span class="token punctuation">,</span> UDPServer<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ThreadingTCPServer</span><span class="token punctuation">(</span>ThreadingMixIn<span class="token punctuation">,</span> TCPServer<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BaseRequestHandler</span><span class="token keyword">class</span> <span class="token class-name">StreamRequestHandler</span><span class="token punctuation">(</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">_SocketWriter</span><span class="token punctuation">(</span>BufferedIOBase<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DatagramRequestHandler</span><span class="token punctuation">(</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''在源码中我们可以看到 类似于：if hasattr(socket, 'AF_UNIX')if hasattr(os, "fork") 的代码语句需要说明的是'AF_UNIX' 和 '"fork"' 的方法适用于 UNIX 系统服务端的搭建'''</span></code></pre><p>这里是对socketserver 源码中的类关系和功能的一个整理（可能图有点小，看不清可以私信我）。</p><p><img src="https://img-blog.csdnimg.cn/387a59f64e6946919c444dffc93951c7.png"></p><h2 id="socketserver-实现多线程-TCP-时的内部代码流程"><a href="#socketserver-实现多线程-TCP-时的内部代码流程" class="headerlink" title="socketserver 实现多线程 TCP 时的内部代码流程"></a>socketserver 实现多线程 TCP 时的内部代码流程</h2><p>多线程服务端实现代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token keyword">class</span> <span class="token class-name">server</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 一定要是 handle</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 相当于 conn</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 相当于 addr</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>            msg <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now_time<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>send<span class="token punctuation">(</span>now_time<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>ThreadingTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开启 TCP服务 多线程</span>s<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="源码分析流程图"><a href="#源码分析流程图" class="headerlink" title="源码分析流程图"></a>源码分析流程图</h3><p>黑色部分是 初始化对象的分析流程，即 s &#x3D; socketserver.ThreadingTCPServer((“127.0.0.1”, 8080), server)。</p><p>红色部分和绿色部分分别是 s.serve_forever() 分析时的第一步和第二步。</p><p><img src="https://img-blog.csdnimg.cn/564eb1cc63c142f7a95d124a35079416.png"></p><h3 id="源码分析具体流程"><a href="#源码分析具体流程" class="headerlink" title="源码分析具体流程"></a>源码分析具体流程</h3><p>我们按照我们上面写的服务端代码了解源码内容。</p><pre class=" language-python"><code class="language-python">首先运行的代码是这行代码 s <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>ThreadingTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span></code></pre><p>我们跳转到源码关于 ThreadingTCPServer 的部分，只有这一行</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ThreadingTCPServer</span><span class="token punctuation">(</span>ThreadingMixIn<span class="token punctuation">,</span> TCPServer<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span></code></pre><p>这说明 ThreadingTCPServer 类本身并不接收任何参数，所以按照类继承的原理，接着跳转 ThreadingMixIn 类，但是 ThreadingMixIn 类只有三个方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">process_request_thread</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">server_close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>这说明 ThreadingMixIn 类在初始实例化时也不需要传入参数</code></pre><p>所以我们接着查看父类 TCPServer 的内容，我们发现了 TCPServer 在初始化的代码</p><pre class=" language-python"><code class="language-python">    address_family <span class="token operator">=</span> socket<span class="token punctuation">.</span>AF_INET    socket_type <span class="token operator">=</span> socket<span class="token punctuation">.</span>SOCK_STREAM        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> server_address<span class="token punctuation">,</span> RequestHandlerClass<span class="token punctuation">,</span> bind_and_activate<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Constructor.  May be extended, do not override."""</span>        BaseServer<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> server_address<span class="token punctuation">,</span> RequestHandlerClass<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>self<span class="token punctuation">.</span>address_family<span class="token punctuation">,</span>                                    self<span class="token punctuation">.</span>socket_type<span class="token punctuation">)</span>        <span class="token keyword">if</span> bind_and_activate<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 监听连接</span>                self<span class="token punctuation">.</span>server_bind<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 监听连接的个数</span>                self<span class="token punctuation">.</span>server_activate<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 关闭连接</span>                self<span class="token punctuation">.</span>server_close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">raise</span></code></pre><p>我们会发现我们需要传入的参数是</p><pre class=" language-python"><code class="language-python">server_addressRequestHandlerClass和我们的代码对比后就是 server_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span>                   RequestHandlerClass <span class="token operator">=</span> server                        我们也可以打印一下                        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>server_address<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>RequestHandlerClass<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/7ada4570a4614bd5b7968580d9b897f0.gif"></p><p>在这里我们也发现了其实 socket 的初始实例化就是在 TCPServer 类中实现的，这里我们就明白了为什么我们在使用 socketserver 时不需要实例化 socket了。</p><pre class=" language-python"><code class="language-python">    address_family <span class="token operator">=</span> socket<span class="token punctuation">.</span>AF_INET    socket_type <span class="token operator">=</span> socket<span class="token punctuation">.</span>SOCK_STREAM        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> server_address<span class="token punctuation">,</span> RequestHandlerClass<span class="token punctuation">,</span> bind_and_activate<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        self<span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>self<span class="token punctuation">.</span>address_family<span class="token punctuation">,</span>                                    self<span class="token punctuation">.</span>socket_type<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">server_bind</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Called by constructor to bind the socket.        May be overridden.        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_reuse_address<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>self<span class="token punctuation">.</span>server_address<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>server_address <span class="token operator">=</span> self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">server_activate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Called by constructor to activate the server.        May be overridden.        """</span>        self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request_queue_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">server_close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Called to clean-up the server.        May be overridden.        """</span>        self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>同时我们发现 TCPServer 在初始化的时候，也初识化了 BaseServer</p><pre class=" language-python"><code class="language-python">BaseServer<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> server_address<span class="token punctuation">,</span> RequestHandlerClass<span class="token punctuation">)</span></code></pre><p>所以同时我们跳转至 BaseServer 类</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> server_address<span class="token punctuation">,</span> RequestHandlerClass<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Constructor.  May be extended, do not override."""</span>        self<span class="token punctuation">.</span>server_address <span class="token operator">=</span> server_address        self<span class="token punctuation">.</span>RequestHandlerClass <span class="token operator">=</span> RequestHandlerClass <span class="token comment" spellcheck="true"># 这句话值得注意，之后要用。之前有说RequestHandlerClass = server，所以在这里 self.RequestHandlerClass = server</span>        self<span class="token punctuation">.</span>__is_shut_down <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 跟多线程有关</span>        self<span class="token punctuation">.</span>__shutdown_request <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><p>分析完 s &#x3D; socketserver.ThreadingTCPServer((“127.0.0.1”, 8080), server) 这句代码后，然后是 s.serve_forever 这句代码了。</p><p>还是和前面一下的方法，先找 ThreadingTCPServer 类 中是否有这个方法，然后是父类ThreadingMixIn 类和 TCPServer 类是否存在此方法，然后再回溯父类的父类。</p><p>最后我们在 BaseServer 类中找到了这个方法</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">serve_forever</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> poll_interval<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Handle one request at a time until shutdown.        Polls for shutdown every poll_interval seconds. Ignores        self.timeout. If you need to do periodic tasks, do them in        another thread.        """</span>        self<span class="token punctuation">.</span>__is_shut_down<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">'''            XXX: Consider using another file descriptor or connecting to the socket to wake this up instead of polling. Polling reduces our responsiveness to a shutdown request and wastes cpu at all other times.            '''</span>            <span class="token keyword">with</span> _ServerSelector<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> selector<span class="token punctuation">:</span>                selector<span class="token punctuation">.</span>register<span class="token punctuation">(</span>self<span class="token punctuation">,</span> selectors<span class="token punctuation">.</span>EVENT_READ<span class="token punctuation">)</span>                <span class="token keyword">while</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>__shutdown_request<span class="token punctuation">:</span>                    ready <span class="token operator">=</span> selector<span class="token punctuation">.</span>select<span class="token punctuation">(</span>poll_interval<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># bpo-35017: shutdown() called during select(), exit immediately.</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>__shutdown_request<span class="token punctuation">:</span>                        <span class="token keyword">break</span>                    <span class="token keyword">if</span> ready<span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>_handle_request_noblock<span class="token punctuation">(</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>service_actions<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__shutdown_request <span class="token operator">=</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>__is_shut_down<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>很复杂的代码，叫人摸不着头脑，看不懂没关系，我们可以看注释呀</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""大概是说处理请求Handle one request at a time until shutdown.是说处理请求的周期，以及说如果要处理有规律的周期性请求使用另一个线程。Polls for shutdown every poll_interval seconds. Ignoresself.timeout. If you need to do periodic tasks, do them inanother thread."""</span></code></pre><p>从注释来看，serve_forever 方法是和请求处理、多线程有关的方法。</p><p>此外，BaseServer 类serve_forever方法中有一行代码值得注意，是</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> ready<span class="token punctuation">:</span>    self<span class="token punctuation">.</span>_handle_request_noblock<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>如果我们跳转到方法 _handle_request_noblock()，也会发现一些很有意思的代码</p><pre class=" language-python"><code class="language-python">request<span class="token punctuation">,</span> client_address <span class="token operator">=</span> self<span class="token punctuation">.</span>get_request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>self<span class="token punctuation">.</span>process_request<span class="token punctuation">(</span>request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span></code></pre><p>这时候我们发现了一个我们在自己定义类中出现过的两个变量 request, client_address，那么这两个变量是什么呢？我们接着跳转到 方法 get_request。（ get_request方法是 TCPServer 类中，也挺合理的，毕竟 TCPServer 继承于BaseServer，但还是觉得源码的结构挺牛的）。</p><p>然后我们就发现了我们很熟悉的代码</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">get_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Get the request and client address from the socket.        May be overridden.        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 熟悉的通信连接</span></code></pre><p>然后我们回到 self.process_request(request, client_address)代码，跳转</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Call finish_request.        Overridden by ForkingMixIn and ThreadingMixIn.        """</span>        self<span class="token punctuation">.</span>finish_request<span class="token punctuation">(</span>request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>shutdown_request<span class="token punctuation">(</span>request<span class="token punctuation">)</span></code></pre><p>再跳转到 finish_request 方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">finish_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Finish one request by instantiating RequestHandlerClass."""</span>    self<span class="token punctuation">.</span>RequestHandlerClass<span class="token punctuation">(</span>request<span class="token punctuation">,</span> client_address<span class="token punctuation">,</span> self<span class="token punctuation">)</span></code></pre><p>这里我们又看到了一个很熟悉的代码 self.RequestHandlerClass，这一行我们又回到了一开始初始化的部分</p><pre class=" language-python"><code class="language-python"> RequestHandlerClass <span class="token operator">=</span> server self<span class="token punctuation">.</span>RequestHandlerClass <span class="token operator">=</span> RequestHandlerClass所以self<span class="token punctuation">.</span>RequestHandlerClass<span class="token punctuation">(</span>request<span class="token punctuation">,</span> client_address<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token operator">==</span> server<span class="token punctuation">(</span>request<span class="token punctuation">,</span> client_address<span class="token punctuation">,</span> self<span class="token punctuation">)</span>注意，这里 server<span class="token punctuation">(</span>request<span class="token punctuation">,</span> client_address<span class="token punctuation">,</span> self<span class="token punctuation">)</span> 中的 self 是指我们初始实例化的 s，也就是 ThreadingTCPServer类。我们也可以打印一下。因为在 BaseRequestHandler初始化时，有<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> client_address<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        self<span class="token punctuation">.</span>server <span class="token operator">=</span> server        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>所以我们应该打印的是 self<span class="token punctuation">.</span>server</code></pre><p><img src="https://img-blog.csdnimg.cn/0dcd396eb70747fd84cddf29ee588ea0.gif"></p><p>分析到这里，代码就运行到我们自己定义的类的部分了，同时到这里我们基本了解了这两行代码的内部原理，可以说这两行代码完成了多线程和连接循环</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>ThreadingTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span>s<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>了解了这些，我们就可以再来看看我们自己写的类了，</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">server</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 一定要是 handle</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 相当于 conn</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 相当于 addr</span></code></pre><p>很显然这时候我们需要跳转到 BaseRequestHandler 类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseRequestHandler</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Base class for request handler classes.    This class is instantiated for each request to be handled.  The    constructor sets the instance variables request, client_address    and server, and then calls the handle() method.  To implement a    specific service, all you need to do is to derive a class which    defines a handle() method.    The handle() method can find the request as self.request, the    client address as self.client_address, and the server (in case it    needs access to per-server information) as self.server.  Since a    separate instance is created for each request, the handle() method    can define other arbitrary instance variables.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> client_address<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>request <span class="token operator">=</span> request        self<span class="token punctuation">.</span>client_address <span class="token operator">=</span> client_address        self<span class="token punctuation">.</span>server <span class="token operator">=</span> server        self<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>handle<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">finish</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><p>这段代码就比较简单了，主要是帮助我们了解了为什么我们一定要定义一个 handle 的方法，说实话我们也可以覆盖初始代码，比如说把 handle 改成其他的名称</p>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> FTP 项目 </tag>
            
            <tag> 多线程 FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程FTP（1）——多线程网络通信简单实现</title>
      <link href="/2022/11/25/duo-xian-cheng-ftp-1-duo-xian-cheng-wang-luo-tong-xin-jian-dan-shi-xian/"/>
      <url>/2022/11/25/duo-xian-cheng-ftp-1-duo-xian-cheng-wang-luo-tong-xin-jian-dan-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程FTP（1）——多线程网络通信简单实现"><a href="#多线程FTP（1）——多线程网络通信简单实现" class="headerlink" title="多线程FTP（1）——多线程网络通信简单实现"></a>多线程FTP（1）——多线程网络通信简单实现</h1><p>之前写了一个FTP项目，但实际上我们写的FTP项目只满足单线程——这就像是打电话一样，当一个客户端和服务端连接，其他客户端就会因为服务端占线而无法连接，必须等之前连接的客户端“挂断”才能连接通信。</p><p><img src="https://img-blog.csdnimg.cn/1bdcea791317446ba4120a92861501a3.gif"></p><p>就像演示的一样，</p><ol><li>当一个客户端完成连接（比如说登录，和查看当前目录时）</li><li>另一个客户端无法完成和服务端的通信，比如说登录；</li><li>而只有在前一个客户端断开连接，服务端才会去处理后一个客户端的信息（即完成登录）</li></ol><p>很显然，一次只满足一个用户登录并不满足我们需求，我们想要的肯定是可以允许多个用户登录，服务端同时处理多个用户命令的FTP项目。</p><p>于是，我们想到了<strong>多线程</strong>的的方法去实现多个用户同时登录。</p><h2 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>threading ，利用 CPU 和 IO 可以同时执行的原来，让 CPU 不会干巴巴等待 IO 完成。</p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><h4 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h4><p><img src="https://img-blog.csdnimg.cn/59db9149414647b19a5ee388497aab0e.png"></p><h4 id="多线程-1"><a href="#多线程-1" class="headerlink" title="多线程"></a>多线程</h4><p><img src="https://img-blog.csdnimg.cn/4d4362c202f54e3b9bb7643a62219ea9.png"></p><p><strong>简单来说，多线程就是一个计算机的统筹处理事情的操作，遇到需要等待的事情，就“先去”（在等待的同时）做可以即时做的事情</strong>。（理论上，多线程会增加CPU的内存和计算操作，但具体会增加多少，我没有研究过）</p><h2 id="thread-版本"><a href="#thread-版本" class="headerlink" title="thread 版本"></a>thread 版本</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span> threading<span class="token punctuation">,</span> time<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接循环</span>        conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>connection<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">connection</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>            data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            now <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>            now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y年%m月%d日%H时%M分%S秒"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>now_time<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># args 是函数的参数，如果有参数，传入的一定是一个元组</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>create<span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 不要忘记 start，表示启动线程</span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端没有什么变化</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span> timeclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">">>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 休息10秒,为了更好的演示，客户端B 并没有休眠 10 秒</span>    data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/530476e154bc4c5984f5c483af625697.gif"></p><h2 id="socketserver-版本"><a href="#socketserver-版本" class="headerlink" title="socketserver 版本"></a>socketserver 版本</h2><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token punctuation">,</span>time<span class="token keyword">class</span> <span class="token class-name">server</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 一定要是 handle</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 相当于 conn</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 相当于 addr</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>            msg <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            now <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>            now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y年%m月%d日%H时%M分%S秒"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now_time<span class="token punctuation">)</span>            now <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>            now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y年%m月%d日%H时%M分%S秒"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>send<span class="token punctuation">(</span>now_time<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>ThreadingTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开启 TCP服务 多线程</span>s<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/fe47b7c6d95d47888e5bcc1c732ee9d3.gif"></p><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><p>没有什么变化。</p>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> FTP 项目 </tag>
            
            <tag> 多线程 FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（10）/ FTP项目（4） ——文件下载和下载断点续存功能</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-10-ftp-xiang-mu-4-wen-jian-xia-zai-he-xia-zai-duan-dian-xu-cun-gong-neng/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-10-ftp-xiang-mu-4-wen-jian-xia-zai-he-xia-zai-duan-dian-xu-cun-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="lib-文件夹下-main-py"><a href="#lib-文件夹下-main-py" class="headerlink" title="lib 文件夹下 main.py"></a><code>lib 文件夹下 main.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">_get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> header_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""从服务端下载文件"""</span>        filename <span class="token operator">=</span> header_dir<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断当前路径是否存在该文件</span>            <span class="token comment" spellcheck="true"># 存在，上传文件</span>            <span class="token comment" spellcheck="true"># 不存在，返回状态码</span>        full_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 文件存在</span>            total_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> total_size<span class="token operator">=</span>total_size<span class="token punctuation">,</span> current_dir <span class="token operator">=</span> self<span class="token punctuation">.</span>current_dir<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 发送文件</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>full_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">401</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_re_get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>header_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""下载断点续存"""</span>        filename <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span>        current_dir <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"current_dir"</span><span class="token punctuation">)</span>        total_size <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_size"</span><span class="token punctuation">)</span>        recv_size <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"recv_size"</span><span class="token punctuation">)</span>        full_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>full_path<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果文件存在</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span> <span class="token operator">==</span> total_size<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果文件大小一致，就认为是同一个文件</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">402</span><span class="token punctuation">)</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span>full_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 从下载中断的地方开始发送</span>                    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">401</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 文件不存在</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">401</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 文件不存在</span></code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="client文件夹下-FTPClient-py-代码-interactive函数-增加部分"><a href="#client文件夹下-FTPClient-py-代码-interactive函数-增加部分" class="headerlink" title="client文件夹下 FTPClient.py 代码 interactive函数 增加部分"></a><code>client文件夹下 FTPClient.py 代码 interactive函数 增加部分</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">interactive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""交互指令"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 登陆成功</span>            self<span class="token punctuation">.</span>unfinished_download_check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 检查未下载完成的文件</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="client文件夹下-FTPClient-py"><a href="#client文件夹下-FTPClient-py" class="headerlink" title="client文件夹下 FTPClient.py "></a><code>client文件夹下 FTPClient.py </code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">unfinished_download_check</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""下载断点续存功能"""</span>        <span class="token keyword">if</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果有未下载完成的文件</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-------Unfinished download list------"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> index<span class="token punctuation">,</span> filename <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s      %s      %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 第几个文件，文件名，文件总大小</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"[select file index to re-get]>>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> choice<span class="token punctuation">:</span> <span class="token keyword">continue</span> <span class="token comment" spellcheck="true"># 如果为空</span>                <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">"back"</span><span class="token punctuation">:</span> <span class="token keyword">break</span> <span class="token comment" spellcheck="true"># 退出</span>                <span class="token keyword">if</span> choice<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 判断是否是数字</span>                    choice <span class="token operator">=</span> int<span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 转化为整型</span>                    <span class="token keyword">if</span> choice <span class="token operator">&lt;=</span> index<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 选择在范围内</span>                        filename <span class="token operator">=</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>choice<span class="token punctuation">]</span>                        current_dir <span class="token operator">=</span> self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                        total_size <span class="token operator">=</span> self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                        recv_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">"%s.download"</span> <span class="token operator">%</span> filename<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 中断前下载的文件大小</span>                        self<span class="token punctuation">.</span>create_header_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"re_get"</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>filename<span class="token punctuation">,</span> current_dir<span class="token operator">=</span>current_dir<span class="token punctuation">,</span> total_size<span class="token operator">=</span>total_size<span class="token punctuation">,</span> recv_size<span class="token operator">=</span>recv_size<span class="token punctuation">)</span>                        response <span class="token operator">=</span> self<span class="token punctuation">.</span>get_response<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">402</span><span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true"># 进度条</span>                            progress_bar <span class="token operator">=</span> self<span class="token punctuation">.</span>progress_bar<span class="token punctuation">(</span>total_size<span class="token operator">=</span>total_size<span class="token punctuation">,</span> res_size<span class="token operator">=</span>recv_size<span class="token punctuation">,</span> last_size<span class="token operator">=</span>recv_size<span class="token punctuation">)</span>                            progress_bar<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 循环接收文件</span>                            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"%s.download"</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># ”ab"表示追加写入</span>                                <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>                                    data <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>MSG_SIZE<span class="token punctuation">)</span>                                    recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                                    progress_bar<span class="token punctuation">.</span>send<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span>                                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                                <span class="token keyword">else</span><span class="token punctuation">:</span>                                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>                                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"file %s has re-downloaded !"</span> <span class="token operator">%</span> filename<span class="token punctuation">)</span>                            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果同命名的文件存在，就加上时间戳作为后缀</span>                                os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"%s.download"</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span> <span class="token string">"%s.%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>filename<span class="token punctuation">,</span> str<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">else</span><span class="token punctuation">:</span>                                os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"%s.download"</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>                            <span class="token keyword">del</span> self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 删除，因为文件已下载完成</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">del</span> self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 删除，因为文件不存在</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"choice does exist !"</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please supply number !"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">progress_bar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> total_size<span class="token punctuation">,</span> res_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> last_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""进度条功能"""</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            res_size <span class="token operator">=</span> <span class="token keyword">yield</span> total_size            percent <span class="token operator">=</span> int<span class="token punctuation">(</span>res_size <span class="token operator">/</span> total_size <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res_size <span class="token operator">></span> last_size<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">*</span> int<span class="token punctuation">(</span>percent <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"{percent}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>percent<span class="token operator">=</span>percent<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\r"</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> # <span class="token string">"\\r"</span> 表示打印时覆盖已打印的内容                last_size <span class="token operator">=</span> res_size    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""从服务端下载文件"""</span>        <span class="token comment" spellcheck="true"># 当前功能只实现一次一个文件下载，所以至少要传入一个参数，多余参数不予考虑</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parameter_length_judgment<span class="token punctuation">(</span>command<span class="token punctuation">,</span> most_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            filename <span class="token operator">=</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>create_header_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"get"</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>filename<span class="token punctuation">)</span>            response <span class="token operator">=</span> self<span class="token punctuation">.</span>get_response<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">:</span>                total_size <span class="token operator">=</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_size"</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"current_dir"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(self.current_dir)</span>                <span class="token comment" spellcheck="true"># 进度条</span>                progress_bar <span class="token operator">=</span> self<span class="token punctuation">.</span>progress_bar<span class="token punctuation">(</span>total_size<span class="token operator">=</span>total_size<span class="token punctuation">)</span>                progress_bar<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 记录未下载完成的文件，为断点续存做准备</span>                self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir<span class="token punctuation">,</span> total_size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 记录文件在服务端的路径以及文件的总大小</span>                <span class="token comment" spellcheck="true"># 循环接收文件</span>                res_size <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"%s.download"</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    <span class="token keyword">while</span> res_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>                        data <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>MSG_SIZE<span class="token punctuation">)</span>                        res_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                        progress_bar<span class="token punctuation">.</span>send<span class="token punctuation">(</span>res_size<span class="token punctuation">)</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"file %s has downloaded !"</span> <span class="token operator">%</span> filename<span class="token punctuation">)</span>                <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果同命名的文件存在，就加上时间戳作为后缀</span>                    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"%s.download"</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span> <span class="token string">"%s.%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>filename<span class="token punctuation">,</span> str<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"%s.download"</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>                <span class="token keyword">del</span> self<span class="token punctuation">.</span>shelve_obj_download<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 下载完成后删除</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="终端命令结果"><a href="#终端命令结果" class="headerlink" title="终端命令结果"></a>终端命令结果</h3><p><img src="https://img-blog.csdnimg.cn/df9195e843644a4fae07ee4c01869a85.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="运行后项目目录"><a href="#运行后项目目录" class="headerlink" title="运行后项目目录"></a>运行后项目目录</h3><p><img src="https://img-blog.csdnimg.cn/98668455eefc4871b59b5ef6e95474db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_13,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> FTP 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（11）/ FTP项目（5） ——文件上传和上传断点续存功能</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-11-ftp-xiang-mu-5-wen-jian-shang-chuan-he-shang-chuan-duan-dian-xu-cun-gong-neng/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-11-ftp-xiang-mu-5-wen-jian-shang-chuan-he-shang-chuan-duan-dian-xu-cun-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="服务端-lib-文件夹下的-main-py-状态码的变化"><a href="#服务端-lib-文件夹下的-main-py-状态码的变化" class="headerlink" title="服务端 lib 文件夹下的 main.py 状态码的变化"></a><code>服务端 lib 文件夹下的 main.py 状态码的变化</code></h2><pre class=" language-python"><code class="language-python">STATUS_CODE <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">200</span><span class="token punctuation">:</span> <span class="token string">"User login succeeded !"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 用户登陆成功</span>        <span class="token number">201</span><span class="token punctuation">:</span> <span class="token string">"Error: wrong username or wrong password !"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 错误用户名或密码</span>        <span class="token number">202</span><span class="token punctuation">:</span> <span class="token string">"Action_type does not exist !"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 没有该函数可以执行</span>        <span class="token number">300</span><span class="token punctuation">:</span> <span class="token string">"Check Dir !"</span><span class="token punctuation">,</span>        <span class="token number">301</span><span class="token punctuation">:</span> <span class="token string">"Dir does not exist !"</span><span class="token punctuation">,</span>        <span class="token number">400</span><span class="token punctuation">:</span> <span class="token string">"Ready to send file !"</span><span class="token punctuation">,</span>        <span class="token number">401</span><span class="token punctuation">:</span> <span class="token string">"File does not exist !"</span><span class="token punctuation">,</span>        <span class="token number">402</span><span class="token punctuation">:</span> <span class="token string">"Ready to re_send !"</span><span class="token punctuation">,</span>        <span class="token number">500</span><span class="token punctuation">:</span> <span class="token string">"File upload done !"</span><span class="token punctuation">,</span>        <span class="token number">501</span><span class="token punctuation">:</span> <span class="token string">"File upload failed !"</span><span class="token punctuation">,</span>        <span class="token number">502</span><span class="token punctuation">:</span> <span class="token string">"File exist !"</span>    <span class="token punctuation">}</span></code></pre><h2 id="文件上传功能"><a href="#文件上传功能" class="headerlink" title="文件上传功能"></a>文件上传功能</h2><h3 id="服务端-lib-文件夹下的-main-py"><a href="#服务端-lib-文件夹下的-main-py" class="headerlink" title="服务端 lib 文件夹下的 main.py"></a><code>服务端 lib 文件夹下的 main.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">_put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> header_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""从客户端接收文件"""</span>        filename <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">"filename"</span><span class="token punctuation">]</span>        total_size <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">"file_size"</span><span class="token punctuation">]</span>        res_szie <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 循环接收文件</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir <span class="token operator">+</span> <span class="token string">"\\%s.upload"</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">while</span> res_szie <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>                data <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>MSG_SIZE<span class="token punctuation">)</span>                res_szie <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果文件存在，文件名加上时间戳</span>            os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir <span class="token operator">+</span> <span class="token string">"\\%s.upload"</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span> self<span class="token punctuation">.</span>current_dir <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span>str<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir <span class="token operator">+</span> <span class="token string">"\\%s.upload"</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span> self<span class="token punctuation">.</span>current_dir <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span>       self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span></code></pre><h3 id="客户端-client-文件夹下的-FTPClient-py"><a href="#客户端-client-文件夹下的-FTPClient-py" class="headerlink" title="客户端 client 文件夹下的 FTPClient.py"></a><code>客户端 client 文件夹下的 FTPClient.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""向服务端上传文件"""</span>        <span class="token comment" spellcheck="true"># 当前功能只实现一次一个文件上传，所以至少要传入两个参数，一个参数是文件名，一个参数应该是文件在客户端的路径，多余参数不予考虑</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parameter_length_judgment<span class="token punctuation">(</span>command<span class="token operator">=</span>command<span class="token punctuation">,</span> min_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            filename <span class="token operator">=</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 文件名</span>            file_path <span class="token operator">=</span> command<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 文件路径</span>            <span class="token comment" spellcheck="true"># 判断文件是否存在</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果存在，上传文件</span>                file_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>create_header_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"put"</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>filename<span class="token punctuation">,</span> file_size<span class="token operator">=</span>file_size<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 记录未上传完成的文件</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> file_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>current_dir<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 记录文件在客户端路径，文件总大小, 上传文件在服务端的路径</span>                <span class="token comment" spellcheck="true"># 进度条</span>                progress_bar <span class="token operator">=</span> self<span class="token punctuation">.</span>progress_bar<span class="token punctuation">(</span>total_size<span class="token operator">=</span>file_size<span class="token punctuation">)</span>                progress_bar<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>                send_size <span class="token operator">=</span> <span class="token number">0</span>                <span class="token comment" spellcheck="true"># 发送文件</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                        send_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                        progress_bar<span class="token punctuation">.</span>send<span class="token punctuation">(</span>send_size<span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                response <span class="token operator">=</span> self<span class="token punctuation">.</span>get_response<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 上传成功</span>                <span class="token keyword">if</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 上传成功，删除在  中的数据</span>                    <span class="token keyword">del</span> self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">[</span>filename<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 文件不存在</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"File does not exist !"</span><span class="token punctuation">)</span></code></pre><h2 id="文件上传断点续存功能"><a href="#文件上传断点续存功能" class="headerlink" title="文件上传断点续存功能"></a>文件上传断点续存功能</h2><h3 id="服务端-lib-文件夹下的-main-py-1"><a href="#服务端-lib-文件夹下的-main-py-1" class="headerlink" title="服务端 lib 文件夹下的 main.py"></a><code>服务端 lib 文件夹下的 main.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">_re_put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> header_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""重新上传"""</span>        filename <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span>        total_size <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_size"</span><span class="token punctuation">)</span>        server_path <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"server_path"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"%s\\%s.upload"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果未完成上传的文件存在</span>            recv_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">"%s\\%s.upload"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">502</span><span class="token punctuation">,</span> recv_size<span class="token operator">=</span>recv_size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发送已接收的大小</span>            <span class="token comment" spellcheck="true"># 循环接收未上传完成的文件</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"%s\\%s.upload"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>                    data <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>MSG_SIZE<span class="token punctuation">)</span>                    recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"%s\\%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果文件存在，文件名加上时间戳</span>                os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"%s\\%s.upload"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%s\\%s.%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> str<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"%s\\%s.upload"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%s\\%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 文件不存在</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">401</span><span class="token punctuation">)</span></code></pre><h3 id="客户端-client-文件夹下的-FTPClient-py-1"><a href="#客户端-client-文件夹下的-FTPClient-py-1" class="headerlink" title="客户端 client 文件夹下的 FTPClient.py"></a><code>客户端 client 文件夹下的 FTPClient.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">interactive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 代码增加部分</span>        <span class="token triple-quoted-string string">"""交互指令"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 登陆成功</span>            self<span class="token punctuation">.</span>unfinished_download_check<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>unfinished_upload_check<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">unfinished_upload_check</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""上传断点续存"""</span>        <span class="token keyword">if</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果有未上传完成的文件</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-------Unfinished upload list------"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> index<span class="token punctuation">,</span> filename <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s    %s    %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> filename<span class="token punctuation">,</span>                                          self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"[select file index to re-put]>>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> choice<span class="token punctuation">:</span> <span class="token keyword">continue</span> <span class="token comment" spellcheck="true"># 如果为空</span>                <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">"back"</span><span class="token punctuation">:</span> <span class="token keyword">break</span> <span class="token comment" spellcheck="true"># 退出</span>                <span class="token keyword">if</span> choice<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 判断是否是数字</span>                    choice <span class="token operator">=</span> int<span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 转化为整型</span>                    <span class="token keyword">if</span> choice <span class="token operator">&lt;=</span> index<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 选择在范围内</span>                        filename <span class="token operator">=</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>choice<span class="token punctuation">]</span>                        file_path <span class="token operator">=</span> self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                        total_size <span class="token operator">=</span> self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                        server_path <span class="token operator">=</span> self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span> <span class="token operator">and</span> total_size <span class="token operator">==</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果文件存在且文件大小相同</span>                            <span class="token comment" spellcheck="true"># 发送信息</span>                            self<span class="token punctuation">.</span>create_header_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"re_put"</span><span class="token punctuation">,</span> total_size<span class="token operator">=</span>total_size<span class="token punctuation">,</span> server_path<span class="token operator">=</span>server_path<span class="token punctuation">,</span> filename<span class="token operator">=</span>filename<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 接收消息，包括已接收的文件大小</span>                            response <span class="token operator">=</span> self<span class="token punctuation">.</span>get_response<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token keyword">if</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 文件不存在</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token keyword">del</span> self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">[</span>filename<span class="token punctuation">]</span>                            <span class="token keyword">else</span><span class="token punctuation">:</span>                                recv_size <span class="token operator">=</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"recv_size"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 准备继续上传</span>                                <span class="token comment" spellcheck="true"># 进度条</span>                                progress_bar <span class="token operator">=</span> self<span class="token punctuation">.</span>progress_bar<span class="token punctuation">(</span>total_size<span class="token operator">=</span>total_size<span class="token punctuation">,</span> res_size<span class="token operator">=</span>recv_size<span class="token punctuation">,</span> last_size<span class="token operator">=</span>recv_size<span class="token punctuation">)</span>                                progress_bar<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true"># 继续上传</span>                                <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                                    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span>                                    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                                        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                                        recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                                        progress_bar<span class="token punctuation">.</span>send<span class="token punctuation">(</span>recv_size<span class="token punctuation">)</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"File re_upload done !"</span><span class="token punctuation">)</span>                                <span class="token keyword">del</span> self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">[</span>filename<span class="token punctuation">]</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"File does not exist !"</span><span class="token punctuation">)</span>                            <span class="token keyword">del</span> self<span class="token punctuation">.</span>shelve_obj_upload<span class="token punctuation">[</span>filename<span class="token punctuation">]</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/59c58d7c0d594ed397dc1e24b660a44f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/e6df0e0a5abf41a8bd1a5e0dc1ca455a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> FTP 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（9）/ FTP项目（3） ——目录切换、目录查看功能</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-9-ftp-xiang-mu-3-mu-lu-qie-huan-mu-lu-cha-kan-gong-neng/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-9-ftp-xiang-mu-3-mu-lu-qie-huan-mu-lu-cha-kan-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="调用功能函数以及对参数数量进行判断"><a href="#调用功能函数以及对参数数量进行判断" class="headerlink" title="调用功能函数以及对参数数量进行判断"></a>调用功能函数以及对参数数量进行判断</h2><h3 id="客户端-server-文件夹下-FTPClient-py"><a href="#客户端-server-文件夹下-FTPClient-py" class="headerlink" title="客户端 server 文件夹下 FTPClient.py"></a>客户端 <code>server 文件夹下 FTPClient.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">interactive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""交互指令，调用功能函数"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 登陆成功</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                command <span class="token operator">=</span> input<span class="token punctuation">(</span>self<span class="token punctuation">.</span>show_to_client<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> command<span class="token punctuation">:</span><span class="token keyword">continue</span>                command <span class="token operator">=</span> command<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>                action_type <span class="token operator">=</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 用户输入的命令类似于终端命令</span>                <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> action_type<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果 客户端的类中有 action_type 的函数方法</span>                    func <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> action_type<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 执行</span>                    func<span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 执行的函数传入的参数应为 action_type 之后的部分</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: this command does not exist !"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parameter_length_judgment</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">,</span>min_size<span class="token operator">=</span>None<span class="token punctuation">,</span> most_size<span class="token operator">=</span>None<span class="token punctuation">,</span> exact_size<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""判断命令中参数个数是否符合规范，比如说 下载功能 至少要提供文件名的参数"""</span>        <span class="token keyword">if</span> min_size<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 至少提供的参数个数</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token operator">&lt;</span> min_size<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: supply parameter at least %s, but supply %s parameter"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>min_size<span class="token punctuation">,</span> len<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> most_size<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 可以提供的最多参数数量</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token operator">></span> most_size<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: supply parameter at most %s, but supply %s parameter"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>most_size<span class="token punctuation">,</span> len<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> exact_size<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 应该提供的精确的参数数量</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token operator">!=</span> exact_size<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: should supply %s parameter, but supply %s parameter"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>exact_size<span class="token punctuation">,</span> len<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><h2 id="状态码的变化"><a href="#状态码的变化" class="headerlink" title="状态码的变化"></a>状态码的变化</h2><h3 id="服务端-lib-文件夹下-main-py"><a href="#服务端-lib-文件夹下-main-py" class="headerlink" title="服务端 lib 文件夹下 main.py"></a>服务端 <code>lib 文件夹下 main.py</code></h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 状态码</span>    STATUS_CODE <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">200</span><span class="token punctuation">:</span> <span class="token string">"User login succeeded !"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 用户登陆成功</span>        <span class="token number">201</span><span class="token punctuation">:</span> <span class="token string">"Error: wrong username or wrong password !"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 错误用户名或密码</span>        <span class="token number">202</span><span class="token punctuation">:</span> <span class="token string">"Action_type does not exist !"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 没有该函数可以执行</span>        <span class="token number">300</span><span class="token punctuation">:</span> <span class="token string">"Check Dir !"</span><span class="token punctuation">,</span>        <span class="token number">301</span><span class="token punctuation">:</span> <span class="token string">"Dir does not exist !"</span>    <span class="token punctuation">}</span></code></pre><h2 id="查看服务端当前目录"><a href="#查看服务端当前目录" class="headerlink" title="查看服务端当前目录"></a>查看服务端当前目录</h2><h3 id="客户端-server-文件夹下-FTPClient-py-1"><a href="#客户端-server-文件夹下-FTPClient-py-1" class="headerlink" title="客户端 server 文件夹下 FTPClient.py"></a>客户端 <code>server 文件夹下 FTPClient.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">ls</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""查看服务端当前目录"""</span>        <span class="token comment" spellcheck="true"># 因为该函数是查看服务端当前目录，所以不用管会传入多少参数，即最少传入 0 给参数</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parameter_length_judgment<span class="token punctuation">(</span>command<span class="token operator">=</span>command<span class="token punctuation">,</span> min_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># if True</span>            self<span class="token punctuation">.</span>create_header_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"ls"</span><span class="token punctuation">)</span>            response <span class="token operator">=</span> self<span class="token punctuation">.</span>get_response<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(response)</span>            <span class="token comment" spellcheck="true"># 消息的总大小</span>            total_size <span class="token operator">=</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 为断点续存做准备</span>            self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"current_dir"</span><span class="token punctuation">)</span>            recv_size <span class="token operator">=</span> <span class="token number">0</span>            res <span class="token operator">=</span> b<span class="token string">""</span>            <span class="token comment" spellcheck="true"># 循环接收信息</span>            <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>                data <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>MSG_SIZE<span class="token punctuation">)</span>                res <span class="token operator">+=</span> data                recv_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="服务端-lib-文件夹下-main-py-1"><a href="#服务端-lib-文件夹下-main-py-1" class="headerlink" title="服务端 lib 文件夹下 main.py"></a>服务端 <code>lib 文件夹下 main.py</code></h3><p>用户登录成功时，增加的代码</p><pre class=" language-python"><code class="language-python">            <span class="token keyword">if</span> str<span class="token punctuation">(</span>md5_password<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>ini_password<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果密码正确</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_home<span class="token punctuation">,</span> username<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 增加的代码部分</span>                <span class="token comment" spellcheck="true"># print(self.current_dir)</span></code></pre><p>实现功能的代码</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">_ls</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> header_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""查看当前目录"""</span>        <span class="token comment" spellcheck="true"># 执行终端命令，并获取结果</span>        obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"dir %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>current_dir<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                               stdout <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                               stderr <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>        stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> size<span class="token operator">=</span>len<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token operator">+</span>len<span class="token punctuation">(</span>stderr<span class="token punctuation">)</span><span class="token punctuation">,</span> current_dir<span class="token operator">=</span>self<span class="token punctuation">.</span>current_dir<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 当前目录为断点续存做准备</span>        <span class="token comment" spellcheck="true"># 发送执行结果</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span></code></pre><h2 id="查看客户端目录"><a href="#查看客户端目录" class="headerlink" title="查看客户端目录"></a>查看客户端目录</h2><h3 id="客户端-server-文件夹下-FTPClient-py-2"><a href="#客户端-server-文件夹下-FTPClient-py-2" class="headerlink" title="客户端 server 文件夹下 FTPClient.py"></a>客户端 <code>server 文件夹下 FTPClient.py</code></h3><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">dir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""查看客户端下的目录"""</span>        <span class="token comment" spellcheck="true"># 由于是查看客户端目录，所以可以不输入路径或是输入路径，即传入的参数最多为 1，1 是目录路径</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parameter_length_judgment<span class="token punctuation">(</span>command<span class="token punctuation">,</span> most_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> command<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果 command 不为空</span>                path <span class="token operator">=</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                path <span class="token operator">=</span> <span class="token string">""</span>            <span class="token comment" spellcheck="true"># 执行终端命令</span>            obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"dir %s"</span> <span class="token operator">%</span> path<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                   stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                                   stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>            stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h2><h3 id="客户端-server-文件夹下-FTPClient-py-3"><a href="#客户端-server-文件夹下-FTPClient-py-3" class="headerlink" title="客户端 server 文件夹下 FTPClient.py"></a>客户端 <code>server 文件夹下 FTPClient.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">cd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""切换服务端目录"""</span>        <span class="token comment" spellcheck="true"># 切换服务端目录，所以必须输入路径，即传入的参数最少为 1，1 是目录路径，多于 1 的部分不需要考虑</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parameter_length_judgment<span class="token punctuation">(</span>command<span class="token punctuation">,</span> most_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>create_header_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"cd"</span><span class="token punctuation">,</span> cmd<span class="token operator">=</span>cmd<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取 response</span>            response <span class="token operator">=</span> self<span class="token punctuation">.</span>get_response<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">300</span><span class="token punctuation">:</span>                show_to_client <span class="token operator">=</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"show_to_client"</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>show_to_client <span class="token operator">=</span> <span class="token string">"[%s]"</span> <span class="token operator">%</span> show_to_client                self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"current_dir"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="服务端-lib-文件夹下-main-py-2"><a href="#服务端-lib-文件夹下-main-py-2" class="headerlink" title="服务端 lib 文件夹下 main.py"></a>服务端 <code>lib 文件夹下 main.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">_cd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> header_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""切换目录，但最高一级只到 \\home\\username"""</span>        cmd <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span>        full_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_dir<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 拼接路径,返回绝对路径，避免出现 \\home\\username\\..\\.. 的情况出现</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果路径存在</span>            <span class="token keyword">if</span> full_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_home<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>user_home <span class="token keyword">in</span> full_path<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 保证路径不会到达 home 一级</span>                obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"cd %s"</span> <span class="token operator">%</span> full_path<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                       stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                                       stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> full_path                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span>                                   show_to_client <span class="token operator">=</span> full_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_home<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   current_dir<span class="token operator">=</span>self<span class="token punctuation">.</span>current_dir<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 当前目录为断点续存做准备</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">301</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对用户来说路径不存在</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">301</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对用户来说路径不存在</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/9c13f12ac83641b4b77c07e3ed22ed29.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> FTP 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（8）/ FTP项目（2） —— 项目辅助功能以及用户认证功能</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-8-ftp-xiang-mu-2-xiang-mu-fu-zhu-gong-neng-yi-ji-yong-hu-ren-zheng-gong-neng/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-8-ftp-xiang-mu-2-xiang-mu-fu-zhu-gong-neng-yi-ji-yong-hu-ren-zheng-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="辅助功能：报头发送以及回复"><a href="#辅助功能：报头发送以及回复" class="headerlink" title="辅助功能：报头发送以及回复"></a>辅助功能：报头发送以及回复</h2><h3 id="服务端-lib-文件夹下-main-py"><a href="#服务端-lib-文件夹下-main-py" class="headerlink" title="服务端 lib 文件夹下 main.py"></a>服务端 <code>lib 文件夹下 main.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">get_header</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取报头内容"""</span>        <span class="token comment" spellcheck="true"># 解码获取报头长度</span>        header_bytes_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>HEADER_STRUCT_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 接收报头字符串</span>        header_bytes <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>header_bytes_size<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 字符串转换为字典</span>        header_dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span>        <span class="token keyword">return</span> header_dic    <span class="token keyword">def</span> <span class="token function">send_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> status_code<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        服务端返回执行结果            如：要下载的文件大小，状态码等内容，也可以理解为 服务端向客户端发送的报头        """</span>        <span class="token comment" spellcheck="true"># 客户端通过 status_code 判断命令执行结果，如没有找到文件，如果执行和用户预期不同，如没有找到文件，客户端打印 status_msg 信息提示用户</span>        response <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"status_code"</span><span class="token punctuation">:</span> status_code<span class="token punctuation">,</span>            <span class="token string">"status_msg"</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>        response<span class="token punctuation">[</span><span class="token string">"status_msg"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>STATUS_CODE<span class="token punctuation">.</span>get<span class="token punctuation">(</span>status_code<span class="token punctuation">)</span>        response<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 字典转换成字符串</span>        response_bytes <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 编码字符串长度并发送</span>        response_bytes_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>response_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>response_bytes_size<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送字符串</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>response_bytes<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="客户端-server-文件夹下-FTPClient-py"><a href="#客户端-server-文件夹下-FTPClient-py" class="headerlink" title="客户端 server 文件夹下 FTPClient.py"></a>客户端 <code>server 文件夹下 FTPClient.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">create_header_send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action_type<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""制作报头并发送给服务端，防止粘包"""</span>        <span class="token comment" spellcheck="true"># 报头字典</span>        <span class="token comment" spellcheck="true"># action_typs 表示发送给服务端后需要执行的函数名字</span>        header_dic <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"action_type"</span><span class="token punctuation">:</span> action_type        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 如果调用此函数时，输入的参数有 filename_size = "100", 那么执行 update 方法后，此时 header_dic["file_size"] = "100"</span>        header_dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 报头字典转化为 报头字典字符串</span>        header_bytes <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对字符串长度进行编码</span>        header_bytes_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送编码</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header_bytes_size<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送字典字符串</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header_bytes<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_response</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取服务端发送的 response"""</span>        <span class="token comment" spellcheck="true"># 解码 response 字符串长度</span>        response_bytes_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>HEADER_STRUCT_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 获取 response 字符串</span>        response_bytes <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>response_bytes_size<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 字符串转换为字典</span>        response <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response_bytes<span class="token punctuation">)</span>        <span class="token keyword">return</span> response</code></pre><h2 id="用户认证功能"><a href="#用户认证功能" class="headerlink" title="用户认证功能"></a>用户认证功能</h2><h3 id="conf-文件夹下-setting-py-增加部分"><a href="#conf-文件夹下-setting-py-增加部分" class="headerlink" title="conf 文件夹下 setting.py 增加部分"></a><code>conf 文件夹下 setting.py 增加部分</code></h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用户信息文件所在的路径</span>ACCOUNT_DIR <span class="token operator">=</span> <span class="token string">"%s/conf/accounts.ini"</span> <span class="token operator">%</span> BASE_DIR</code></pre><h3 id="conf-文件夹下-accounts-ini"><a href="#conf-文件夹下-accounts-ini" class="headerlink" title="conf 文件夹下 accounts.ini"></a><code>conf 文件夹下 accounts.ini</code></h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>aoteman<span class="token punctuation">]</span>username <span class="token operator">=</span> aotemanpassword <span class="token operator">=</span> b<span class="token string">'\xe9\x9a\x18\xc4(\xcb8\xd5\xf2`\x856x\x92.\x03'</span></code></pre><h3 id="服务端-lib-文件夹下-main-py-1"><a href="#服务端-lib-文件夹下-main-py-1" class="headerlink" title="服务端 lib 文件夹下 main.py"></a>服务端 <code>lib 文件夹下 main.py</code></h3><p>status_code 增加部分</p><pre class=" language-python"><code class="language-python">    MSG_SIZE <span class="token operator">=</span> <span class="token number">8192</span>  <span class="token comment" spellcheck="true"># 一次性接收的信息长度</span>    HEADER_STRUCT_SIZE <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment" spellcheck="true"># 报头字符串编码后的长度默认为 8</span>    <span class="token comment" spellcheck="true"># 状态码</span>    STATUS_CODE <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">200</span><span class="token punctuation">:</span> <span class="token string">"User login succeeded !"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 用户登陆成功</span>        <span class="token number">201</span><span class="token punctuation">:</span> <span class="token string">"Error: wrong username or wrong password !"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 错误用户名或密码</span>        <span class="token number">202</span><span class="token punctuation">:</span> <span class="token string">"Action_type does not exist !"</span> <span class="token comment" spellcheck="true"># 没有该函数可以执行</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""处理与客户端的交互指令"""</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            header_dic <span class="token operator">=</span> self<span class="token punctuation">.</span>get_header<span class="token punctuation">(</span><span class="token punctuation">)</span>            action_type <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action_type"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_%s"</span> <span class="token operator">%</span> action_type<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果类中有该函数，执行</span>                func <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_%s"</span> <span class="token operator">%</span> action_type<span class="token punctuation">)</span>                func<span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 不存在该函数</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">202</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">log_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取 accounts.ini 文件中的用户信息"""</span>        config_obj <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>        config_obj<span class="token punctuation">.</span>read<span class="token punctuation">(</span>setting<span class="token punctuation">.</span>ACCOUNT_DIR<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># config_obj 结果类似于字典</span>        <span class="token comment" spellcheck="true"># key 值为 ini 文件中 【】 部分</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>config_obj<span class="token punctuation">.</span>sections<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> config_obj    <span class="token keyword">def</span> <span class="token function">authentication_judgment</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""判断是否存在该用户以及密码是否正确"""</span>        log_msg <span class="token operator">=</span> self<span class="token punctuation">.</span>log_msg<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获得用户信息</span>        <span class="token keyword">if</span> username <span class="token keyword">in</span> log_msg<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果存在该用户</span>            ini_password<span class="token operator">=</span> log_msg<span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># ini 文件下的用户经过 md5 加密的密码</span>            <span class="token comment" spellcheck="true"># 对用户输入的密码进行 md5 加密并和 ini_password 匹配，判断密码是否正确</span>            <span class="token comment" spellcheck="true"># md5 加密</span>            md5_obj <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            md5_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            md5_password <span class="token operator">=</span> md5_obj<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 注意：由于 项目本身并没有创建用户的功能，所以 用户密码 我们可以先对真实密码加密后再写入 ini 文件中</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>md5_password<span class="token punctuation">)</span>            <span class="token keyword">if</span> str<span class="token punctuation">(</span>md5_password<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>ini_password<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果密码正确</span>                self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_home<span class="token punctuation">,</span> username<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> current_dir <span class="token operator">=</span> self<span class="token punctuation">.</span>current_dir<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_auth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> header_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""用户认证"""</span>        username <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> header_dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>authentication_judgment<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span></code></pre><h3 id="客户端-server-文件夹下-FTPClient-py-1"><a href="#客户端-server-文件夹下-FTPClient-py-1" class="headerlink" title="客户端 server 文件夹下 FTPClient.py"></a>客户端 <code>server 文件夹下 FTPClient.py</code></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""用户输入用户名，密码发送到服务端，判断是否正确"""</span>        <span class="token comment" spellcheck="true"># 三次尝试机会</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 输入用户名，密码</span>            username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"username: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"password: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 发送用户名和密码</span>            self<span class="token punctuation">.</span>create_header_send<span class="token punctuation">(</span>action_type<span class="token operator">=</span><span class="token string">"auth"</span><span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取服务端的回复</span>            response <span class="token operator">=</span> self<span class="token punctuation">.</span>get_response<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 如果登录成功，退出循环</span>            <span class="token keyword">if</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_code"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>show_to_client <span class="token operator">=</span> <span class="token string">"[\\%s]>>: "</span> <span class="token operator">%</span> username                self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"current_dir"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"status_msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">interactive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""send 交互指令"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 登陆成功</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                command <span class="token operator">=</span> input<span class="token punctuation">(</span>self<span class="token punctuation">.</span>show_to_client<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> command<span class="token punctuation">:</span><span class="token keyword">continue</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    client <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">)</span>    client<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p><img src="https://img-blog.csdnimg.cn/e2a69e726c314451a31e7c77b98911d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><img src="https://img-blog.csdnimg.cn/a45d0f0e19c94634ad05717e48665929.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> FTP 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（7）/ FTP项目（1） —— 项目需求梳理以及基本框架搭建</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-7-ftp-xiang-mu-1-xiang-mu-xu-qiu-shu-li-yi-ji-ji-ben-kuang-jia-da-jian/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-7-ftp-xiang-mu-1-xiang-mu-xu-qiu-shu-li-yi-ji-ji-ben-kuang-jia-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="项目需求梳理"><a href="#项目需求梳理" class="headerlink" title="项目需求梳理"></a>项目需求梳理</h2><pre class=" language-python"><code class="language-python">    <span class="token number">1</span><span class="token punctuation">.</span> 用户登录认证（目前只实现一次连接一个客户端，即单线程）        <span class="token number">1.1</span> 用户密码 md5 加密    <span class="token number">2</span><span class="token punctuation">.</span> 查看目录        <span class="token number">2.1</span> ls 命令 表示查看用户在服务端的目录，默认是家目录        <span class="token number">2.2</span> dir 命令 表示用户查看在客户端的目录    <span class="token number">3</span><span class="token punctuation">.</span> 切换目录        <span class="token number">3.1</span> 用户使用 cd 命令切换服务端目录            <span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">1</span> 实际上在服务端并没有真正切换目录            <span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">2</span> 而且服务端代码编写时要注意，对用户来说，家目录就是最高一级，即对用户而言，home<span class="token operator">/</span>username                  是可以达到的路径，但 server<span class="token operator">/</span>home 目录对用户来说是不存在路径            <span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">3</span> 在切换路径后，客户端要记录用户此时切换到的路径，为接下来的 断点续存 功能做准备，不然会出现客                  户端重新连接继续下载时找不到要下载文件在服务端路径的情况    <span class="token number">4</span><span class="token punctuation">.</span> 下载<span class="token operator">/</span>上传<span class="token operator">/</span>断点续存 进度条 创建    <span class="token number">5</span><span class="token punctuation">.</span> 下载功能        <span class="token number">5.1</span> 下载完成前，文件命名为 “filename<span class="token punctuation">.</span>download”            <span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">1</span> 在创建 “filename<span class="token punctuation">.</span>download” 文件前判断该文件是否存在，如果存在，就在 download 后面再                  加时间戳后缀            <span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">2</span> 若 FTP 在文件下载完成前崩溃导致文件未下载完成，创建 shelvel 对象，记录 文件名，未下载完                  成文件在服务端的路径，已下载的大小，为 断点续存 功能编写做准备            <span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">3</span> 文件下载完成后，将后缀部分去除，如果去除后缀后文件已存在，就增加时间戳后缀，即“filename<span class="token punctuation">.</span>时                  间戳”    <span class="token number">6</span><span class="token punctuation">.</span> 上传功能（基本和下载功能一致）        <span class="token number">6.1</span> 下载完成前，文件命名为 “filename<span class="token punctuation">.</span>upload”            <span class="token number">6.1</span><span class="token punctuation">.</span><span class="token number">1</span> 在创建 “filename<span class="token punctuation">.</span>upload” 文件前判断该文件是否存在，如果存在，就在 upload 后面再                  加时间戳后缀            <span class="token number">6.1</span><span class="token punctuation">.</span><span class="token number">2</span> 若 FTP 在文件上传完成前崩溃导致文件未上传完成，创建 shelvel 对象，记录 文件名，未上传完                  成文件在服务端的路径，已下载的大小，为 断点续存 功能编写做准备            <span class="token number">6.1</span><span class="token punctuation">.</span><span class="token number">3</span> 文件下载完成后，将后缀部分去除，如果去除后缀后文件已存在，就增加时间戳后缀，即“filename<span class="token punctuation">.</span>时                  间戳”     <span class="token number">7</span><span class="token punctuation">.</span> 下载<span class="token operator">/</span>上传 断点续存功能        <span class="token number">7.1</span> 在用户登陆成功后，打印未下载完成、未上传完成的文件名，供用户选择是否要继续上传或下载        <span class="token number">7.2</span> 在用户选择继续下载或上传后，仍出现进度条并且从上次断的百分比开始增加        <span class="token number">7.3</span> 文件命名仍和下载<span class="token operator">/</span>上传功能中文件命名一致</code></pre><h2 id="项目基本框架搭建"><a href="#项目基本框架搭建" class="headerlink" title="项目基本框架搭建"></a>项目基本框架搭建</h2><h3 id="项目文件说明"><a href="#项目文件说明" class="headerlink" title="项目文件说明"></a>项目文件说明</h3><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span> FTP （项目名称）    <span class="token operator">-</span><span class="token operator">-</span> client 客户端    <span class="token operator">-</span><span class="token operator">-</span> server 服务端        <span class="token operator">-</span><span class="token operator">-</span> bin <span class="token punctuation">(</span>存放可执行的二进制文件<span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">-</span> conf <span class="token punctuation">(</span>存放配置文件<span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token operator">-</span> accounts<span class="token punctuation">.</span>ini <span class="token punctuation">(</span>包括用户名称和密码，在此文件中的密码使用 md5 加密，非明文显示<span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token operator">-</span> setting<span class="token punctuation">.</span>py <span class="token punctuation">(</span>包括服务端接口、用户家目录等内容<span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">-</span> home<span class="token punctuation">(</span>存放用户家目录，比如 home\aoteman 是 用户 aoteman 的家目录<span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">-</span> lib （存放的是函数调用的信息，在windows操作系统中起到链接程序和函数的作用。其意义在于代码重用，程                序员将常用的功能写成函数，保存为lib文件，在以后编程要实现这些功能的时候，就不需要再重新编写代                码，而是直接调用写好的lib文件，这很大程度上减轻程序员的负担。）        <span class="token operator">-</span><span class="token operator">-</span> log <span class="token punctuation">(</span>项目日志<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/b9e20b1c593c492e813cb301580fbd54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_13,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="bin-文件夹下-FTPServer-py-文件"><a href="#bin-文件夹下-FTPServer-py-文件" class="headerlink" title="bin 文件夹下 FTPServer.py 文件"></a>bin 文件夹下 FTPServer.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> os<span class="token punctuation">,</span>sys<span class="token comment" spellcheck="true"># 因为要调用 server 文件夹下的其他 python 文件，所以程序。路径应为 \..\..\server</span><span class="token comment" spellcheck="true"># 先返回 FTPServer.py 文件的绝对路径，在往上两级得到 server 文件夹的绝对路径</span>BASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(BASE_DIR)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 从 lib 文件夹下 导入 management.py 文件</span>    <span class="token keyword">from</span> lib <span class="token keyword">import</span> management    <span class="token comment" spellcheck="true"># sys.argv 可以简单的理解为 将 终端命令 作为参数传入， sys.argv 的结果是列表</span>    <span class="token comment" spellcheck="true"># 比如说在终端输入 python server\bin\FTPServer.py start 运行，那么此时的 sys.argv 就是 ['server\\bin\\FTPServer.py', 'start']</span>    FTP <span class="token operator">=</span> management<span class="token punctuation">.</span>FTPManagement<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    FTP<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="lib-文件夹下-management-py"><a href="#lib-文件夹下-management-py" class="headerlink" title="lib 文件夹下 management.py"></a>lib 文件夹下 management.py</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">from</span> lib <span class="token keyword">import</span> main<span class="token keyword">class</span> <span class="token class-name">FTPManagement</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sys_argv<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>sys_argv <span class="token operator">=</span> sys_argv <span class="token comment" spellcheck="true"># 终端命令运行时传入的参数</span>        <span class="token comment" spellcheck="true"># print(self.sys_argv)</span>    <span class="token keyword">def</span> <span class="token function">help_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        帮助信息，为用户打印提示信息        """</span>        help_msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""        start   start up server        """</span>        <span class="token comment" spellcheck="true"># 退出并打印</span>        exit<span class="token punctuation">(</span>help_msg<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parameter_verification</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        验证参数合法性            1. 项目启动时的命令设置为 python 文件路径 命令（如 start）                1.1 所以如果参数长度小于 2，应该向用户提示服务端可以接受的，命令                1.2 只需要判断长度是否小于2，如果大于2，程序只把 sys.argv 列表中的第二位参数视为命令        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sys_argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>help_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""解析指令"""</span>        self<span class="token punctuation">.</span>parameter_verification<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 如果未通过参数验证，退出并打印 帮助信息，不会再运行下面的代码</span>        parameter <span class="token operator">=</span> self<span class="token punctuation">.</span>sys_argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 取出代表命令的参数</span>        <span class="token comment" spellcheck="true"># print(parameter)</span>        <span class="token comment" spellcheck="true"># 判断 FTPManagement类 中是否有与命令参数相同的函数</span>        <span class="token comment" spellcheck="true"># 即如果命令是 start, 那么需要判断 FTPManagement类 中是否有 self.start 函数</span>            <span class="token comment" spellcheck="true"># 如果有此函数，调用函数</span>            <span class="token comment" spellcheck="true"># 如果没有此函数，打印 提示信息</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># FTPManagement类 中有 self.start 函数</span>            func <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># func 赋值为 self.start 函数</span>            func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 运行 self.start 函数</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" command does not exist !"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" start   start up server !"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print("------------")</span>        Server <span class="token operator">=</span> main<span class="token punctuation">.</span>Server<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        Server<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="lib-文件夹下-main-py"><a href="#lib-文件夹下-main-py" class="headerlink" title="lib 文件夹下 main.py"></a>lib 文件夹下 main.py</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socket<span class="token keyword">from</span> conf <span class="token keyword">import</span> setting<span class="token keyword">class</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    MSG_SIZE <span class="token operator">=</span> <span class="token number">8192</span>  <span class="token comment" spellcheck="true"># 一次性接收的信息长度</span>    <span class="token comment" spellcheck="true"># 状态码</span>    STATUS_CODE <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> management<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>management <span class="token operator">=</span> management        self<span class="token punctuation">.</span>user_home <span class="token operator">=</span> setting<span class="token punctuation">.</span>USER_HOME_DIR <span class="token comment" spellcheck="true"># 记录用户家目录</span>        self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> self<span class="token punctuation">.</span>user_home <span class="token comment" spellcheck="true"># 记录用户当前目录，用户切换目录时使用</span>        self<span class="token punctuation">.</span>shelve_obj <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># 记录下载/上传未完成的文件信息</span>        <span class="token comment" spellcheck="true"># 建立服务端</span>        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 买手机</span>        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>setting<span class="token punctuation">.</span>HOST<span class="token punctuation">,</span> setting<span class="token punctuation">.</span>PORT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 装上手机卡</span>        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开机，最大监听数为 5</span>    <span class="token keyword">def</span> <span class="token function">run_forever</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""正式启动服务端"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"FTP Server start %s %s "</span> <span class="token operator">%</span> <span class="token punctuation">(</span>setting<span class="token punctuation">.</span>HOST<span class="token punctuation">,</span> setting<span class="token punctuation">.</span>PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">,</span> self<span class="token punctuation">.</span>addr <span class="token operator">=</span> self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待电话</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>addr<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connection from %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># self.addr 是元组，所以选择 (self.addr, )的形式</span>            <span class="token keyword">try</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 防止报错而服务端退出程序</span>                self<span class="token punctuation">.</span>handle<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 处理客户端和服务端和交互问题</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><h3 id="conf-文件夹下-setting-py-文件"><a href="#conf-文件夹下-setting-py-文件" class="headerlink" title="conf 文件夹下 setting.py 文件"></a>conf 文件夹下 setting.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token comment" spellcheck="true"># 服务器端口</span>HOST <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span>PORT <span class="token operator">=</span> <span class="token number">9999</span><span class="token comment" spellcheck="true"># 用户家目录</span><span class="token comment" spellcheck="true"># 先切换到 server 目录，在切换到 home 目录</span>BASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>USER_HOME_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">"home"</span><span class="token punctuation">)</span></code></pre><h3 id="client-文件夹下-FTPClient-py-文件"><a href="#client-文件夹下-FTPClient-py-文件" class="headerlink" title="client 文件夹下 FTPClient.py 文件"></a>client 文件夹下 FTPClient.py 文件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> optparse<span class="token keyword">import</span> shelve<span class="token keyword">import</span> socket<span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    MSG_SIZE <span class="token operator">=</span> <span class="token number">8192</span> <span class="token comment" spellcheck="true"># 一次性接收的信息长度</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>show_to_client <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># 输入命令时显示给用户的信息，如 【\username】>>:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># 记录用户名称</span>        self<span class="token punctuation">.</span>current_dir <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># 记录用户下载文件时，文件在客户端的路径</span>        self<span class="token punctuation">.</span>shelve_obj <span class="token operator">=</span> shelve<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"FTP_Download"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 记录未下载完成的文件信息</span>        self<span class="token punctuation">.</span>shelve_obj <span class="token operator">=</span> shelve<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"FTP_Upload"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 记录未上传完成的文件信息</span>        <span class="token comment" spellcheck="true"># 终端命令参数</span>        <span class="token comment" spellcheck="true"># 输入 python client/FTPClient.py -h 得到提示信息</span>        <span class="token comment" spellcheck="true"># 比如输入 python client/FTPClient.py -H 123 -P 12456 返回的结果是 self.option = {'serverHost': '123', 'port': 12456}, self.args = []</span>        <span class="token comment" spellcheck="true"># 比如输入 python client/FTPClient.py 123   456   789， 返回的结果是 self.option = {'serverHost': None, 'port': None}， self.args = ['123', '456', '789']</span>        parser <span class="token operator">=</span> optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token punctuation">)</span>        parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-H"</span><span class="token punctuation">,</span> <span class="token string">"--serverHost"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"serverHost"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"ftp server ip_addr"</span><span class="token punctuation">)</span>        parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-P"</span><span class="token punctuation">,</span> <span class="token string">"--port"</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">"int"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"port"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"ftp server port"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>options<span class="token punctuation">,</span> self<span class="token punctuation">.</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取出参数</span>        <span class="token comment" spellcheck="true"># print(self.options, self.args)</span>        self<span class="token punctuation">.</span>parameter_test<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>make_connection<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parameter_test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""参数检验，保证用户输入了 -H 和 -P 内容，不然客户端无法连接服务端端口"""</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>serverHost <span class="token operator">or</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>port<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 其中一项为空</span>            exit<span class="token punctuation">(</span><span class="token string">"Error: must supply serverHost and port !"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_connection</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""客户端连接"""</span>        self<span class="token punctuation">.</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 买手机</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>serverHost<span class="token punctuation">,</span> self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打电话</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connection successful ！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    client <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="当前运行结果（终端运行）"><a href="#当前运行结果（终端运行）" class="headerlink" title="当前运行结果（终端运行）"></a>当前运行结果（终端运行）</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p><img src="https://img-blog.csdnimg.cn/584ff9967be04a22bc9c8833923e47d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><img src="https://img-blog.csdnimg.cn/788a84dbc5f5410d9d7ede17c1fa3d47.png"></p>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> FTP 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（6）—— 基于SOCKET实现文件传输功能</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-6-ji-yu-socket-shi-xian-wen-jian-chuan-shu-gong-neng/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-6-ji-yu-socket-shi-xian-wen-jian-chuan-shu-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="文件传输功能和执行终端命令功能的区别"><a href="#文件传输功能和执行终端命令功能的区别" class="headerlink" title="文件传输功能和执行终端命令功能的区别"></a>文件传输功能和执行终端命令功能的区别</h2><p>文件传输功能实现和实现执行终端命令功能的区别</p><ol><li>不需要执行命令，即不需要使用 <code>subprocess</code> 模块</li><li>判断文件大小方式不是文件内容的长度，而是使用 <code>os</code>模块</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>文件路径<span class="token punctuation">)</span></code></pre><ol start="3"><li>上传文件时，为防止一次上传完整文件导致内存不足，上传时，一行行上传</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>文件<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>服务端</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> socket<span class="token keyword">import</span> struct<span class="token keyword">import</span> jsondir_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\网络编程\\09-文件传输功能\\server\\share\\"</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 链接循环</span>    conn<span class="token punctuation">,</span>addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8096</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 获取要下载的文件名</span>            filename <span class="token operator">=</span> cmd<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取文件大小，即字节长度</span>            total_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">"%s%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 报头字典</span>            header_dic <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"filename"</span><span class="token punctuation">:</span> filename<span class="token punctuation">,</span>                <span class="token string">"total_size"</span><span class="token punctuation">:</span> total_size            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 字典转换为字符串</span>            header_bytes <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 字符串长度编码并发送</span>            header_bytes_length <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 发送报头编码</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header_bytes_length<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 发送字典字符串</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header_bytes<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 发送文件</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"%s%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> json<span class="token keyword">import</span> structdir_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\网络编程\\09-文件传输功能\\client\\download\\"</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 通信循环</span>    cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">">>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> cmd<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 接收报头并解码</span>    header_bytes_length <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 接收字典字符串</span>    header_bytes_size <span class="token operator">=</span> <span class="token number">0</span>    header_bytes <span class="token operator">=</span> b<span class="token string">""</span>    <span class="token keyword">while</span> header_bytes_size <span class="token operator">&lt;</span> header_bytes_length<span class="token punctuation">:</span>        data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        header_bytes <span class="token operator">+=</span> data        header_bytes_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 字典字符串转换成字典</span>    header_dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 下载文件</span>    total_size <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">"total_size"</span><span class="token punctuation">]</span>    file_size <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"%s%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">while</span> file_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>            data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            file_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成"</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/ec98a898740d4ad09e3434c296077dca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（5）—— 基于SOCKET模拟SSH远程执行命令后出现的粘包问题及解决方案</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-5-ji-yu-socket-mo-ni-ssh-yuan-cheng-zhi-xing-ming-ling-hou-chu-xian-de-nian-bao-wen-ti-ji-jie-jue-fang-an/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-5-ji-yu-socket-mo-ni-ssh-yuan-cheng-zhi-xing-ming-ling-hou-chu-xian-de-nian-bao-wen-ti-ji-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="粘包问题：问题出现"><a href="#粘包问题：问题出现" class="headerlink" title="粘包问题：问题出现"></a>粘包问题：问题出现</h2><p>前面我们已经实现了利用<code>socket</code>模拟远程执行命令，但是我们在代码运行中很有可能会遇到这样的问题，如下图。</p><p>客户端运行结果<br><img src="https://img-blog.csdnimg.cn/b27b0f329ec548a987c99d7be75a596b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br>我们发现命令 <code>ipconfig</code>命令的结果长度显然已经超过了 1024 <code>phone.recv(1024)</code>,而这样的结果就是该命令的结果分成两部分发送，导致 <code>xxx</code>命令的结果在下一个命令发送后才能收到，可以说因为结果超过了 1024 而造成了堵塞。</p><p>上述情况我们称之为 <code>粘包现象</code></p><h2 id="粘包问题：分析"><a href="#粘包问题：分析" class="headerlink" title="粘包问题：分析"></a>粘包问题：分析</h2><p>需要注意的是，<code>粘包问题的本质并不是信息发送的堵塞，只是表现比较像</code>。</p><p>实际上粘包问题是由 socket 底层算法造成的——就简单来说就是在传输信息时底层算法会把要 <code>send</code>的信息打包在一起发送，而不管他们是否应该被打包在一起发送（<code>即把前后两次 send 时间间隔短，字节长度短的信息打包在一起发送</code>）</p><p>文字描述似乎不太好理解，我们可以简单写一段代码进行分析。</p><p>服务端</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socketserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>res1 <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一次收到的信息是："</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二次收到的信息是："</span><span class="token punctuation">,</span> res1<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socketclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">" world!"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在运行前，我们可以会认为运行结果是这样的</p><pre class=" language-html"><code class="language-html">第一次收到的信息是：hello第二次收到的信息是： world！</code></pre><p>但实际上我们的运行结果是这样的<br><img src="https://img-blog.csdnimg.cn/270b032f718f420594675ec21516db57.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_19,color_FFFFFF,t_70,g_se,x_16"><br>这其实就是粘包问题。在我们所举的例子里要想解决这个问题是比较简单的，比如说将 <code>conn.recv(1024)</code>改成<code>conn.recv(5)</code>就可以了。</p><p>实际上这就是我们解决粘包问题的方法。</p><h2 id="粘包问题：文字版解决方案"><a href="#粘包问题：文字版解决方案" class="headerlink" title="粘包问题：文字版解决方案"></a>粘包问题：文字版解决方案</h2><p>通过上面的分析我们了解到要想解决粘包问题的关键是知道传递给我们的消息的长度到底是多长。</p><p>所以我们的解决方法是<br><code>发消息端</code><br><code>第一步、编码信息的长度并发送</code><br><code>接收消息端</code><br><code>第一步、接收编码并解码获得信息长度数据</code><br><code>第二步、循环使用 conn.recv(1024) 直到信息全部接收完毕</code><br><code>注意、最好不要使用 conn.recv(真正信息的长度) 因为这意味着接收消息一方需要开‘信息长度’的缓存，如果长度过长，很有可能开不出这样大小的缓存</code></p><p>但这个方案也有一个问题，就是接收消息的一方在接受信息的时候怎么知道是长度是几位数？<code>即使用的代码是 conn.recv(4) 还是 conn.recv(5) 或是别的长度</code></p><p>面对这个问题，我们的解决方案是采用独特的编码方式，将长度——无论是几位数——都编码成固定长度（<code>即报头</code>），发送给接收端。而这就需要用到<code>struct模块</code>了。</p><h2 id="粘包问题：struct-模块补充"><a href="#粘包问题：struct-模块补充" class="headerlink" title="粘包问题：struct 模块补充"></a>粘包问题：struct 模块补充</h2><p>代码演示</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> structres <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">1230000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># i 表示整型，编码后的长度固定为 4</span>res1 <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> type<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>res1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 但 i 对编码前的数字大小有要求</span><span class="token comment" spellcheck="true"># res2 = struct.pack("i", 12300000000) # 报错</span><span class="token comment" spellcheck="true"># q 表示 long 型，数字范围比 i 大，但也有范围限制</span><span class="token comment" spellcheck="true"># 编码后的长度固定为 8</span>res3 <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token number">12300000000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>res3<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 解码</span>data <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>data1 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> res3<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span></code></pre><p>运行结果<br><img src="https://img-blog.csdnimg.cn/cef1dcd94fc04b34ac4bf00f8296d1a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="粘包问题：简单代码解决"><a href="#粘包问题：简单代码解决" class="headerlink" title="粘包问题：简单代码解决"></a>粘包问题：简单代码解决</h2><p>分析到这里我们就可以试着解决粘包问题了</p><p>服务端</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> struct<span class="token keyword">import</span> subprocessserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接循环</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通讯循环</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 收到消息</span>            cmd <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8096</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"收到客户端的消息是："</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 执行命令</span>            obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                   stdout <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                                   stderr <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取执行命令的结果</span>            stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对结果长度形成报文，并发送</span>            total_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token operator">+</span>len<span class="token punctuation">(</span>stderr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 形成固定的长度为 4 的报文</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>total_size<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 发送最终结果</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stderr<span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>serve<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> structclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>    <span class="token comment" spellcheck="true"># 发送命令</span>    cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">">>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 接收报文并解码</span>    total_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 循环直到接收到完整的结果</span>    res_size <span class="token operator">=</span> <span class="token number">0</span>    res <span class="token operator">=</span> b<span class="token string">""</span>    <span class="token keyword">while</span> res_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>        data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        res <span class="token operator">+=</span> data        res_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果</p><p>服务端<br><img src="https://img-blog.csdnimg.cn/1316bc47057d44ed963fa5a8ebdfb0d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br>客户端<br><img src="https://img-blog.csdnimg.cn/231bec75976f45349b9efea53960ffc4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="粘包问题：终极代码解决"><a href="#粘包问题：终极代码解决" class="headerlink" title="粘包问题：终极代码解决"></a>粘包问题：终极代码解决</h2><p>到目前我们似乎完美解决了粘包问题，但果真如此吗？如果我们要传递的消息长度超过了可以编码的长度又该怎么办？</p><p>所以我们应该要有一个通用的解决方案，即终结解决方案。<br><code>发消息端</code><br><code>第一步、计算信息的长度，为防止此数字不能编码，将数字放进字典</code><br><code>第二步、将字典转化为字符串，计算字符串的长度并编码发送</code><br><code>接收消息端</code><br><code>第一步、获得字典字符串长度编码并解码</code><br><code>第二步、循环接收完整字典字符串，将字符串转换成字典，获得真正信息的长度</code><br><code>第三步、循环接收真正信息</code></p><p>服务端</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> struct<span class="token keyword">import</span> socket<span class="token keyword">import</span> json<span class="token keyword">import</span> subprocessserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接循环</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8096</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 若接收的命令为空</span>                <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 执行命令</span>            obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                   stdout <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                                   stderr <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取命令执行结果</span>            stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 报头字典</span>            header_dict <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"name"</span><span class="token punctuation">:</span> cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".txt"</span><span class="token punctuation">,</span>                <span class="token string">"dict_size"</span><span class="token punctuation">:</span> len<span class="token punctuation">(</span>stderr<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 字典转化为字符串</span>            header_bytes <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>header_dict<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 字符串长度编码并发送</span>            header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 发送字典字符串</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header_bytes<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 发送真实消息</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stderr<span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> struct<span class="token keyword">import</span> jsonclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>    <span class="token comment" spellcheck="true"># 输入命令并发送</span>    cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">">>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 接收字典长度编码并解码</span>    dic_total_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 接收字典字符串</span>    dic_size <span class="token operator">=</span> <span class="token number">0</span>    dic_bytes <span class="token operator">=</span> b<span class="token string">""</span>    <span class="token keyword">while</span> dic_size <span class="token operator">&lt;</span> dic_total_size<span class="token punctuation">:</span>        data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        dic_bytes <span class="token operator">+=</span> data        dic_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将字典字符串转换为字典</span>    header_dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>dic_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取真实信息长度</span>    total_size <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">"dict_size"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取真实信息</span>    res_size <span class="token operator">=</span> <span class="token number">0</span>    res <span class="token operator">=</span> b<span class="token string">""</span>    <span class="token keyword">while</span> res_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>        data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        res <span class="token operator">+=</span> data        res_size <span class="token operator">+=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果<br><img src="https://img-blog.csdnimg.cn/0b8e859fdb3544e989a33bfa7b6e4b7f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（4）—— 基于SOCKET实现模拟SSH远程执行命令</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-4-ji-yu-socket-shi-xian-mo-ni-ssh-yuan-cheng-zhi-xing-ming-ling/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-4-ji-yu-socket-shi-xian-mo-ni-ssh-yuan-cheng-zhi-xing-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="网络通信的应用"><a href="#网络通信的应用" class="headerlink" title="网络通信的应用"></a>网络通信的应用</h2><p>根据之前的网络通信的学习，我们可以很简单的想到网络通信可以用于搭建一个类似聊天室的程序。其实网络通信一个重要的应用是连接服务器执行命令，以 Windows 系统为例，比如说：<code>dir</code> 是查看本地文件目录的命令，<code>ipconfig</code> 是查看本地网卡 IP 地址命令，<code>tasklist</code> 是查看运行进程的命令……</p><h2 id="python-如何利用代码执行终端命令"><a href="#python-如何利用代码执行终端命令" class="headerlink" title="python 如何利用代码执行终端命令"></a>python 如何利用代码执行终端命令</h2><p>而要实现远程执行命令我们要做的是将相应命令传输给服务端，并让服务端将执行命令的结果返回客户端。</p><p>所以我们首先要解决的问题是如何利用代码执行终端命令。</p><h3 id="尝试一、os模块"><a href="#尝试一、os模块" class="headerlink" title="尝试一、os模块"></a>尝试一、<code>os</code>模块</h3><p>不出意外，我们首先想要的实现方法是 <code>os</code> 模块。运行代码及结果如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"ipconfig"</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/59eb19e7bbfc46bb967bae7c05d3bbdc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br>看运行结果，好像我们已经解决问题了，但仔细想想我们这段代码是写在 服务端的，我们需要做的是获取执行后得到的结果传递给客户端，但现在却是直接在服务端打印结果了。<br>那么面对这个问题我们可以通过赋值解决吗？<br>答案是否定的。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> osres <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"ipconfig"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/b3fc3a5692dc49f4916b6e54ea958927.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br>我们发现自己的赋值结果得到的是 0.其实这个零表示的是我们提供的命令可以执行并且执行成功。这也意味着利用 <code>os</code>模块并不能得到我们想要的结果。</p><h3 id="解决方法、subprocess-模块"><a href="#解决方法、subprocess-模块" class="headerlink" title="解决方法、subprocess 模块"></a>解决方法、<code>subprocess</code> 模块</h3><p>代码及实现</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> subprocesscmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">">>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># shell 一定不要忘记，不然该命令不会执行</span><span class="token comment" spellcheck="true"># stdout 表示可以执行并且执行成功后的结果，PIPE 表示结果送至管道</span><span class="token comment" spellcheck="true"># stderr 表示无法执行的结果</span>obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                       stdout <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                       stderr <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span> stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结果获取</span>stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># windows 系统上终端以 gbk 编码方式输出，所以打印的时候要转换成 gbk 编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>成功的结果<br><img src="https://img-blog.csdnimg.cn/a35b214bdbf6413aa682345dea2581c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br>失败的结果<br><img src="https://img-blog.csdnimg.cn/ad2a483ae44d475bbb40527541b04a0e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>将 <code>subprocess</code>相关的代码加入服务端<br>服务端代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> subprocessphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接循环</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"starting……"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span><span class="token string">"发出的命令是："</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>            obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                   stdout <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                                   stderr <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>            stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> stdout <span class="token operator">+</span> stderr            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socketphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>    cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">">>--: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> cmd<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>服务端<br><img src="https://img-blog.csdnimg.cn/014d2be5e3ee47568693223a4d535bf0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br>客户端<br><img src="https://img-blog.csdnimg.cn/e97ab56ff5b84451ba9322d7fb10f437.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（3）—— 基于SOCKET实现简单套接字通信的链接循环</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-3-ji-yu-socket-shi-xian-jian-dan-tao-jie-zi-tong-xin-de-lian-jie-xun-huan/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-3-ji-yu-socket-shi-xian-jian-dan-tao-jie-zi-tong-xin-de-lian-jie-xun-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="目前代码存在的问题"><a href="#目前代码存在的问题" class="headerlink" title="目前代码存在的问题"></a>目前代码存在的问题</h2><p>前面我们已经完成了基于 SOCKET 的实现了通信循环的简单套接字通信程序，并且还优化了其中的两个小问题，让程序更加稳定。</p><p>但俗话说的好，“旧的刚忘掉，新的就来到”，所以我们很无奈的发现了一个问题，就是我们的程序只能实现一个客户端同服务端 “对话” ，而很显然这和我们现实的要求肯定相去甚远——在现实中我们不可能有一个只服务一个客户的服务端（即要服务不同的客户就必须重启程序）。</p><p>所以这时候我们就需要使用所谓的 链接循环。</p><h2 id="解决方案——原代码分析"><a href="#解决方案——原代码分析" class="headerlink" title="解决方案——原代码分析"></a>解决方案——原代码分析</h2><p>因为我们的目的是让服务端可以同时服务多个客户端，所以我们的链接循环应该在服务端的代码上进行修改。而要添加 链接循环，首先就要明白什么是链接，或者说链接在客户端的代码里是怎么体现的。</p><p>这是我们之前服务端的代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># 买手机</span>phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 表示端口可以重复使用</span><span class="token comment" spellcheck="true"># 装上手机卡</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开机</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待电话</span>conn<span class="token punctuation">,</span> client_addr <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 收发信息</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 若客户端发送的信息为空</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"客户端发送的消息："</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token comment" spellcheck="true"># 挂电话</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关机</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>我们还是用 打电话 的例子来说明。链接嘛，顾名思义就是服务端和客户端产生联系，所以在打电话的类比中，打电话的双方产生联系的过程就是等待电话到挂电话的过程，而这个过程也就是我们需要添加循环的过程。</p><p>注意以下代码的含义</p><pre class=" language-python"><code class="language-python">phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>这里的 5 是指该服务端可以一次性接通 5 个客户端，即第 6 个客户端无法连接。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>只需要修改服务端代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=gbk</span><span class="token keyword">import</span> socketphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接循环</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"staring……"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"客户端的信息是"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>值得注意的是，因为服务端的代码并没有实现多线程，所以服务端虽然同时连接了两个客户端，所以只有把其中一个客户端停止连接，另一个客户端的信息才能传到服务端。</p><p>运行结果如下</p><p>服务端<img src="https://img-blog.csdnimg.cn/8ff36405a6db44c0a6610d4fcf106ebd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>客户端<br><img src="https://img-blog.csdnimg.cn/e42a2838e7954488a6f6ddbd85710415.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>客户端1<br><img src="https://img-blog.csdnimg.cn/d70d6fb8c0fb42d4962324fa4cea2687.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（2）—— 基于SOCKET简单套接字通信的 bug 修复</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-2-ji-yu-socket-jian-dan-tao-jie-zi-tong-xin-de-bug-xiu-fu/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-2-ji-yu-socket-jian-dan-tao-jie-zi-tong-xin-de-bug-xiu-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="目前实现的添加了通信循环的套接字通信的一些问题"><a href="#目前实现的添加了通信循环的套接字通信的一些问题" class="headerlink" title="目前实现的添加了通信循环的套接字通信的一些问题"></a>目前实现的添加了通信循环的套接字通信的一些问题</h2><h3 id="客户端向服务端发送消息时发现地址已被使用"><a href="#客户端向服务端发送消息时发现地址已被使用" class="headerlink" title="客户端向服务端发送消息时发现地址已被使用"></a>客户端向服务端发送消息时发现地址已被使用</h3><p>在我们重启服务端时，可能会遇到这样的问题<br><img src="https://img-blog.csdnimg.cn/77252f94ee674f6d80583dd489ff0d94.png" alt="在这里插入图片描述"><br>当我们遇到这个问题时，可以在编写服务端代码时加入 一条 socket 配置，重新使用 IP 和 端口。</p><pre class=" language-python"><code class="language-python">phone<span class="token operator">=</span>socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>SOL_SOCKET<span class="token punctuation">,</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#在bind前加</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="发空消息时程序进入死循环"><a href="#发空消息时程序进入死循环" class="headerlink" title="发空消息时程序进入死循环"></a>发空消息时程序进入死循环</h3><p>除了地址已被使用的错误，我们发现当客户端发送消息时直接发送，即什么都不输入就敲回车，会导致服务端和客户端直接卡在循环中，即只能看到光标在闪动。如下图：<br><img src="https://img-blog.csdnimg.cn/21626b45afb54311bbe126e6e62aaf8b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/9cc91ea04cda4353b5b23aa3202d40b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br>考虑到是发送了空信息，即<code>&quot; &quot;</code>的消息，所以我们想到的第一个解决方案是在客户端输入要发送的消息时判断发送的消息是否为空。即：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>    <span class="token keyword">continue</span></code></pre><p>这里要注意的，除了客户端需要判断消息是否为空，服务端也是要判断消息是否为空，否则在运行时我们就会看到这样的运行结果：<br><img src="https://img-blog.csdnimg.cn/7493406fbbdc45c283a772c02725a150.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br>所以我们对于服务端的优化代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 若客户端发送的信息为空</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"客户端发送的消息："</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>所以我们考虑到这些小 Bug 后优化的服务端和客户端代码如下：<br>服务端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 表示端口可以重复使用</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>conn<span class="token punctuation">,</span> client_addr <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 若客户端发送的信息为空</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"客户端发送的消息："</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>        <span class="token keyword">break</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>    msg <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">">>: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> msg<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 防止发送的信息为空</span>        <span class="token keyword">continue</span>    phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>服务端<br><img src="https://img-blog.csdnimg.cn/b2e8881e9a754365a97ab8d845c1aa88.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"><br>客户端<br><img src="https://img-blog.csdnimg.cn/53924b0ba06a4022a4d3a563c28c6da2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="不知道原因的小坑"><a href="#不知道原因的小坑" class="headerlink" title="不知道原因的小坑"></a>不知道原因的小坑</h2><p>有一点需要说明，按照我学的课程是讲，windos系统下的服务端这样写就可以解决一直循环的问题</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通信循环</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"客户端发送的消息："</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><p>而上述优化后的代码中</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 若客户端发送的信息为空</span>    <span class="token keyword">break</span></code></pre><p>是linux系统下的解决方案</p><p>但不知道为什么我按照Windows系统的解决方案服务端仍然陷入了循环，加上了Linux系统解决方案那个代码才解决了问题。</p><p>原因至今也没有找到，如果有知道的大佬看到了我的这篇水平不怎么样的文章，希望可以抽出一点点时间帮忙解答，谢谢。</p>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信编程学习（1）—— 基于SOCKET实现简单套接字通信</title>
      <link href="/2022/11/25/wang-luo-bian-cheng-xue-xi-1-ji-yu-socket-shi-xian-jian-dan-tao-jie-zi-tong-xin/"/>
      <url>/2022/11/25/wang-luo-bian-cheng-xue-xi-1-ji-yu-socket-shi-xian-jian-dan-tao-jie-zi-tong-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="套接字通信简单理解"><a href="#套接字通信简单理解" class="headerlink" title="套接字通信简单理解"></a>套接字通信简单理解</h2><h3 id="网络通信简单理解"><a href="#网络通信简单理解" class="headerlink" title="网络通信简单理解"></a>网络通信简单理解</h3><p>要想实现网络通信，简单理解就是用户启动客户端并连接到服务端，用户使用客户端向服务端发送信息（请求），服务端响应客户端。</p><h3 id="简单套接字通信类比"><a href="#简单套接字通信类比" class="headerlink" title="简单套接字通信类比"></a>简单套接字通信类比</h3><p>我们可以将简单套接字通信的过程中类比成打电话。</p><p>对于服务端而言，实现通信的过程可以类比为以下七步：</p><ol><li>买手机</li><li>装上电话卡</li><li>开机</li><li>等待电话接通</li><li>收发消息</li><li>挂断电话</li><li>关机</li></ol><p>而对于客户端，实现通信的过程可以类比为以下四步：</p><ol><li>买手机</li><li>拨打电话</li><li>发收消息</li><li>挂断电话</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>简单了解之后就让我们尝试来实现简单的套接字通信吧。<br>服务端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># 1. 买手机</span>phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 装手机卡</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接到本地服务器（如果运行时无法连接，可以将端口改为 8081）#0-65535:0_1024 给操作系统使用</span><span class="token comment" spellcheck="true"># 3. 开机</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5表示最大挂起的连接数</span><span class="token comment" spellcheck="true"># 4. 等待拨号</span>conn<span class="token punctuation">,</span>client <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5. 收发信息</span>data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1. 单位：bytes，2. 1024表示最大接收1024个bytes</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6. 挂断电话</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7. 关机</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># 1. 买手机</span>phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 拨号</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 端口一定要和服务端一致</span><span class="token comment" spellcheck="true"># 3. 发收消息</span>phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4. 关机</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>运行时一定要注意先运行服务端，在运行客户端。<br>服务端运行结果<br><img src="https://img-blog.csdnimg.cn/b5f75c462cf94fcb97c4217e3585bc9d.png"><br>客户端运行结果<br><img src="https://img-blog.csdnimg.cn/7317e7655c954a048577e1d9cc991fdf.png"></p><h2 id="优化：通信循环"><a href="#优化：通信循环" class="headerlink" title="优化：通信循环"></a>优化：通信循环</h2><p>这样我们实现了简单的套接字通信，但我们发现按照我们上面的代码只能发送一次信息，显然这不符合我们的要求，那我们要怎么优化呢？很简单只需要在写客户端和服务端的“收发消息”的代码增加循环即可。</p><p>优化后的代码为<br>服务端</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 5. 收发信息</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1. 单位：bytes，2. 1024表示最大接收1024个bytes</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    mes <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">">>--"</span><span class="token punctuation">)</span>    phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>mes<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>运行结果<br>服务端<br><img src="https://img-blog.csdnimg.cn/edfa0b4cee3e4e938002134efbb1a6bb.png"></p><p>客户端<br><img src="https://img-blog.csdnimg.cn/27e08195fa1843d4a81c5a4417797e83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiW55WM55qE6ZqQ5Za7,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（9） -- 数据库课设（企业人事系统）</title>
      <link href="/2022/11/24/mysql-shu-ju-ku-xue-xi-9-shu-ju-ku-ke-she-qi-ye-ren-shi-xi-tong/"/>
      <url>/2022/11/24/mysql-shu-ju-ku-xue-xi-9-shu-ju-ku-ke-she-qi-ye-ren-shi-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库课设"><a href="#数据库课设" class="headerlink" title="数据库课设"></a>数据库课设</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里两三天帮同学写了一个简单的包含 UI 界面的数据库课设作业。</p><p>由于本人美术能力有限，以及是第一次接触 pyqt5 ，所以实际的 UI 界面比较省略，并且时间有限，一些逻辑也没有优化，各位看看就好。</p><p>PS：这里的所有 UI 界面都是由 QtDesigner 画出来的，还记得以前有人告诉我一定要学会手写使用 pyqt5 再使用  QtDesigner 画图，所以做课设的时候有取巧。</p><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p>因为是给同学做的，项目目录也没有很好的分块而是直接放在一个文件夹里面，各位将就看一下。</p><p><img src="https://img-blog.csdnimg.cn/63cdf93a2ab8402a88c5058378d6a491.png"></p><h2 id="项目需求以及sql代码"><a href="#项目需求以及sql代码" class="headerlink" title="项目需求以及sql代码"></a>项目需求以及sql代码</h2><p>建立的是一个企业人事管理系统，表的关系如下：</p><p><img src="https://img-blog.csdnimg.cn/e2d4c5a491d548e6867f4a91085ce262.png"></p><ul><li>建表 sql 语句</li></ul><pre class=" language-mysql"><code class="language-mysql">create database classDesign;use classDesign;# 用户表create table user (    id int primary key auto_increment,    username varchar(16) unique,    password varchar(16));# 插入用户数据INSERT INTO USER (username, password)VALUES    ("admin", "12345"),    ("mcx", "qwe"),    ("lj", "asd"),    ("hn", "zxc");# 日志create table log (    username varchar(16),    action enum("login", "query", "delete", "add") not null,    msg varchar(16),    time timestamp not null default CURRENT_TIMESTAMP);# 部门表（和职员表一对多关系）create table dep (    id int primary key auto_increment,    name varchar(16) not null,    des varchar(32));# 插入数据INSERT INTO `dep` (`name`, `des`) VALUES ('运营', '好销售，不责任手段');INSERT INTO `dep` (`name`, `des`) VALUES ('销售', '什么都可以销售');INSERT INTO `dep` (`name`, `des`) VALUES ('教育', '教书育人');# 职员详细信息create table emp_detail (    id int primary key auto_increment,    addr varchar(16),    email varchar(16),    time timestamp not null default CURRENT_TIMESTAMP);# 插入数据（其实 id 和 time 会自动填入不用插入）INSERT INTO `classdesign`.`emp_detail` (`id`, `addr`, `email`, `time`) VALUES ('1', '东方', '123@qq.com', '2022-07-03 15:41:32');INSERT INTO `classdesign`.`emp_detail` (`id`, `addr`, `email`, `time`) VALUES ('2', '北方', '456@qq.com', '2022-07-03 15:42:19');INSERT INTO `classdesign`.`emp_detail` (`id`, `addr`, `email`, `time`) VALUES ('3', '西方', 'qwwer@qq.com', '2022-07-03 15:42:44');INSERT INTO `classdesign`.`emp_detail` (`id`, `addr`, `email`, `time`) VALUES ('4', '南方', 'asd@qq.com', '2022-07-03 15:43:23');# 职员表create table emp ( id int primary key auto_increment, name varchar(16) not null, dep_id int not null, detail_id int not null, foreign key(dep_id) references dep(id), foreign key(detail_id) references emp_detail(id));# 插入数据INSERT INTO `emp` (`name`, `dep_id`, `detail_id`) VALUES ('奥特曼', '1', '2');INSERT INTO `emp` (`name`, `dep_id`, `detail_id`) VALUES ('迪迦', '1', '3');INSERT INTO `emp` (`name`, `dep_id`, `detail_id`) VALUES ('戴拿', '2', '4');INSERT INTO `emp` (`name`, `dep_id`, `detail_id`) VALUES ('盖亚', '3', '1');# 项目表（和职员表，多对多关系，即一个项目可以有多个职员负责，一个职员可以负责多个项目）create table project(    id int primary key auto_increment,    name varchar(16));# 插入数据INSERT INTO `project` (`name`) VALUES ('数据库');INSERT INTO `project` (`name`) VALUES ('网络通信');# 多对多关系的第三方表create table emp2pro(    id int primary key auto_increment,    emp_id int,    pro_id int,    foreign key(emp_id) references emp(id)    on update cascade    on delete cascade,    foreign key(pro_id) references project(id)    on update cascade    on delete cascade);# 插入数据INSERT INTO `emp2pro` (`emp_id`, `pro_id`) VALUES ('1', '1');INSERT INTO `emp2pro` (`emp_id`, `pro_id`) VALUES ('1', '2');INSERT INTO `emp2pro` (`emp_id`, `pro_id`) VALUES ('3', '2');</code></pre><h2 id="python-代码实现"><a href="#python-代码实现" class="headerlink" title="python 代码实现"></a>python 代码实现</h2><h3 id="FirstWindow-py"><a href="#FirstWindow-py" class="headerlink" title="FirstWindow.py"></a>FirstWindow.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">646</span><span class="token punctuation">,</span> <span class="token number">453</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>textBrowser <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textBrowser"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">441</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 登录按钮</span>        self<span class="token punctuation">.</span>login<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"login"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_login<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reg <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注册按钮</span>        self<span class="token punctuation">.</span>reg<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"reg"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reg<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reg<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_reg<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:28pt; font-weight:600;\">\u6b22\u8fce\u4f7f\u7528 XXX \u7cfb\u7edf&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u767b\u5f55"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reg<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u6ce8\u518c"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">user_login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 用户登录页面显示</span>        <span class="token keyword">from</span> PLogin <span class="token keyword">import</span> login_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> login_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">user_reg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 用户注册页面展示</span>        <span class="token keyword">from</span> PReg <span class="token keyword">import</span> reg_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> reg_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">from</span> FirstWindow <span class="token keyword">import</span> Ui_Dialog<span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span>Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 实例化初始界面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setup_ui</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>window <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="PLogin-py"><a href="#PLogin-py" class="headerlink" title="PLogin.py"></a>PLogin.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Login</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">647</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用户名</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"lineEdit"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textBrowser"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">441</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_2 <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 密码</span>        self<span class="token punctuation">.</span>lineEdit_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"lineEdit_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_2<span class="token punctuation">.</span>setEchoMode<span class="token punctuation">(</span>QLineEdit<span class="token punctuation">.</span>Password<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 密码输入星号显示</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">290</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 登录</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>login<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:28pt; font-weight:600;\">\u6b22\u8fce\u4f7f\u7528 XXX \u7cfb\u7edf&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u7528\u6237\u540d"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u5bc6\u7801"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u767b\u5f55"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 验证登录</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">"select id from user where username = (%s) and password = (%s)"</span>        username <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取用户名</span>        <span class="token comment" spellcheck="true"># print(username)</span>        password <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit_2<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取密码</span>        res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(cursor.fetchall()[0].get("id"))</span>        <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 账号密码错误</span>            <span class="token keyword">from</span> login_err <span class="token keyword">import</span> err_window            self<span class="token punctuation">.</span>window <span class="token operator">=</span> err_window<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># time.sleep(2)</span>            <span class="token comment" spellcheck="true"># self.window.close()</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            id <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> id <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登陆成功！！！！！"</span><span class="token punctuation">)</span>                sql <span class="token operator">=</span> <span class="token string">"insert into log(username, action) values(%s, 'login')"</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">from</span> PUserWindow <span class="token keyword">import</span> user_window                self<span class="token punctuation">.</span>window <span class="token operator">=</span> user_window<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登陆成功！！！！！"</span><span class="token punctuation">)</span>                sql <span class="token operator">=</span> <span class="token string">"insert into log(username, action) values(%s, 'login')"</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">from</span> PAdminWindow <span class="token keyword">import</span> admin_window                self<span class="token punctuation">.</span>window <span class="token operator">=</span> admin_window<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">connect_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接数据库</span>        <span class="token keyword">import</span> pymysql        conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 数据库密码</span>            database<span class="token operator">=</span><span class="token string">"classDesign"</span><span class="token punctuation">,</span>            charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 编码千万不要加 -</span>            autocommit <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 连接数据库</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>cursor<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个游标对象（cmd 的 光标）,帮助执行命令</span>        <span class="token keyword">return</span> cursor<span class="token keyword">class</span> <span class="token class-name">login_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Login<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开登录页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="log-err-py"><a href="#log-err-py" class="headerlink" title="log_err.py"></a>log_err.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textBrowser"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>repaint<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:20pt; font-weight:600;\">\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span><span class="token keyword">class</span> <span class="token class-name">err_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 登录失败页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="PReg-py"><a href="#PReg-py" class="headerlink" title="PReg.py"></a>PReg.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">647</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>username<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"username"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>username<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textBrowser"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">441</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>password <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>password<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"password"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>password<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>password<span class="token punctuation">.</span>setEchoMode<span class="token punctuation">(</span>QLineEdit<span class="token punctuation">.</span>Password<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">290</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reg<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:28pt; font-weight:600;\">\u6b22\u8fce\u4f7f\u7528 XXX \u7cfb\u7edf&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u7528\u6237\u540d"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u5bc6\u7801"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u6ce8\u518c"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">connect_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接数据库</span>        <span class="token keyword">import</span> pymysql        conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"classDesign"</span><span class="token punctuation">,</span>            charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 编码千万不要加 -</span>            autocommit<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 连接数据库</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>cursor<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个游标对象（cmd 的 光标）,帮助执行命令</span>        <span class="token keyword">return</span> cursor    <span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> self<span class="token punctuation">.</span>username<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> self<span class="token punctuation">.</span>password<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(username, password)</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">"select id from user where username = '%s' "</span> <span class="token operator">%</span> username        res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">from</span> reg_err <span class="token keyword">import</span> err_window            self<span class="token punctuation">.</span>window <span class="token operator">=</span> err_window<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token string">"insert into user(username, password) values(%s, %s)"</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"注册成功！！！！"</span><span class="token punctuation">)</span>            <span class="token keyword">from</span> PLogin <span class="token keyword">import</span> login_window            self<span class="token punctuation">.</span>window <span class="token operator">=</span> login_window<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">reg_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开注册页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="reg-err-py"><a href="#reg-err-py" class="headerlink" title="reg_err.py"></a>reg_err.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textBrowser"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">241</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:20pt; font-weight:600;\">\u7528\u6237\u540d\u5df2\u5b58\u5728&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span><span class="token keyword">class</span> <span class="token class-name">err_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 登录失败页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="PAdminWindow-py"><a href="#PAdminWindow-py" class="headerlink" title="PAdminWindow.py"></a>PAdminWindow.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">735</span><span class="token punctuation">,</span> <span class="token number">581</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget <span class="token operator">=</span> QTableWidget<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"tableWidget"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">521</span><span class="token punctuation">,</span> <span class="token number">501</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_4 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 删除</span>        self<span class="token punctuation">.</span>pushButton_4<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_4"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_4<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">630</span><span class="token punctuation">,</span> <span class="token number">410</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_4<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>delete<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_5 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 添加</span>        self<span class="token punctuation">.</span>pushButton_5<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_5"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_5<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">630</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_5<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>add<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_6 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 查询</span>        self<span class="token punctuation">.</span>pushButton_6<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_6"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_6<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">630</span><span class="token punctuation">,</span> <span class="token number">310</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_6<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>search<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_7 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 查看日志</span>        self<span class="token punctuation">.</span>pushButton_7<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_7"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_7<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">630</span><span class="token punctuation">,</span> <span class="token number">460</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_7<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>log<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_4<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u5220\u9664\u4fe1\u606f"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_5<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u6dfb\u52a0\u4fe1\u606f"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_6<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u67e5\u8be2\u4fe1\u606f"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_7<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u67e5\u770b\u65e5\u5fd7"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">connect_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接数据库</span>        <span class="token keyword">import</span> pymysql        conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"classDesign"</span><span class="token punctuation">,</span>            charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 编码千万不要加 -</span>            autocommit<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 连接数据库</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个游标对象（cmd 的 光标）,帮助执行命令</span>        <span class="token keyword">return</span> cursor    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""        SELECT        emp.`name`,        dep.`name`,        dep.des,        emp_detail.addr,        emp_detail.email,        emp_detail.time,        project.`name`        FROM        emp        INNER JOIN dep ON emp.dep_id = dep.id        INNER JOIN emp2pro ON emp2pro.emp_id = emp.id        INNER JOIN emp_detail ON emp.detail_id = emp_detail.id        INNER JOIN project ON emp2pro.pro_id = project.id        """</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>rowcount  <span class="token comment" spellcheck="true"># 取得记录个数，用于设置表格的行数</span>        <span class="token comment" spellcheck="true"># print(rows[0].keys())</span>        col <span class="token operator">=</span> len<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取得字段数，用于设置表格的列数</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setRowCount<span class="token punctuation">(</span>row<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setColumnCount<span class="token punctuation">(</span>col<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(rows)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>                temp_data <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 临时记录，不能直接插入表格</span>                data <span class="token operator">=</span> QTableWidgetItem<span class="token punctuation">(</span>str<span class="token punctuation">(</span>temp_data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换后可插入表格</span>                <span class="token comment" spellcheck="true"># data = data.setGeometry(QRect(70, 30, 661, 501))</span>                self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setItem<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> PLogWindow <span class="token keyword">import</span> log_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> log_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> PSearch <span class="token keyword">import</span> search_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> search_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> PAdd <span class="token keyword">import</span> add_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> add_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> PDelete <span class="token keyword">import</span> delete_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> delete_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">admin_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开管理员登录后的页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="PUserWindow-py"><a href="#PUserWindow-py" class="headerlink" title="PUserWindow.py"></a>PUserWindow.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">735</span><span class="token punctuation">,</span> <span class="token number">581</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget <span class="token operator">=</span> QTableWidget<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"tableWidget"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">521</span><span class="token punctuation">,</span> <span class="token number">501</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_4 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 删除</span>        self<span class="token punctuation">.</span>pushButton_4<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_4"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_4<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">630</span><span class="token punctuation">,</span> <span class="token number">410</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_4<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>delete<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_5 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加</span>        self<span class="token punctuation">.</span>pushButton_5<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_5"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_5<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">630</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_5<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>add<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_6 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查询</span>        self<span class="token punctuation">.</span>pushButton_6<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_6"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_6<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">630</span><span class="token punctuation">,</span> <span class="token number">310</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_6<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>search<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_4<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u5220\u9664\u4fe1\u606f"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_5<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u6dfb\u52a0\u4fe1\u606f"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_6<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u67e5\u8be2\u4fe1\u606f"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">connect_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接数据库</span>        <span class="token keyword">import</span> pymysql        conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"classDesign"</span><span class="token punctuation">,</span>            charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 编码千万不要加 -</span>            autocommit<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 连接数据库</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个游标对象（cmd 的 光标）,帮助执行命令</span>        <span class="token keyword">return</span> cursor    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""        SELECT        emp.`name`,        dep.`name`,        dep.des,        emp_detail.addr,        emp_detail.email,        emp_detail.time,        project.`name`        FROM        emp        INNER JOIN dep ON emp.dep_id = dep.id        INNER JOIN emp2pro ON emp2pro.emp_id = emp.id        INNER JOIN emp_detail ON emp.detail_id = emp_detail.id        INNER JOIN project ON emp2pro.pro_id = project.id        """</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>rowcount  <span class="token comment" spellcheck="true"># 取得记录个数，用于设置表格的行数</span>        <span class="token comment" spellcheck="true"># print(rows[0].keys())</span>        col <span class="token operator">=</span> len<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取得字段数，用于设置表格的列数</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setRowCount<span class="token punctuation">(</span>row<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setColumnCount<span class="token punctuation">(</span>col<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(rows)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>                temp_data <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 临时记录，不能直接插入表格</span>                data <span class="token operator">=</span> QTableWidgetItem<span class="token punctuation">(</span>str<span class="token punctuation">(</span>temp_data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换后可插入表格</span>                <span class="token comment" spellcheck="true"># data = data.setGeometry(QRect(70, 30, 661, 501))</span>                self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setItem<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> PSearch <span class="token keyword">import</span> search_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> search_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> PAdd <span class="token keyword">import</span> add_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> add_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> PDelete <span class="token keyword">import</span> delete_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> delete_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">user_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开普通用户登录后的页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="PSearch-py"><a href="#PSearch-py" class="headerlink" title="PSearch.py"></a>PSearch.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>            Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">741</span><span class="token punctuation">,</span> <span class="token number">740</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>lineEdit <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"lineEdit"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">290</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">281</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 职工姓名查询</span>            self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton_2 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 部门查询</span>            self<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_2"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dep<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton_3 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 项目查询</span>            self<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_3"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>project<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>tableWidget <span class="token operator">=</span> QTableWidget<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"tableView"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">511</span><span class="token punctuation">,</span> <span class="token number">371</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>            QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># setupUi</span>        <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>                QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8bf7\u8f93\u5165\u67e5\u8be2\u7684\u5185\u5bb9"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u804c\u5de5\u59d3\u540d\u67e5\u8be2"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u90e8\u95e8\u67e5\u8be2"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u9879\u76ee\u67e5\u8be2"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># retranslateUi</span>        <span class="token keyword">def</span> <span class="token function">connect_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接数据库</span>            <span class="token keyword">import</span> pymysql            conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>                host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>                port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>                user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>                password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>                database<span class="token operator">=</span><span class="token string">"classDesign"</span><span class="token punctuation">,</span>                charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 编码千万不要加 -</span>                autocommit<span class="token operator">=</span><span class="token boolean">True</span>            <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 连接数据库</span>            cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个游标对象（cmd 的 光标）,帮助执行命令</span>            <span class="token keyword">return</span> cursor        <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(name)</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            SELECT            emp.`name`,            emp_detail.addr,            emp_detail.email,            emp_detail.time,            dep.`name`,            dep.des            FROM            emp            INNER JOIN emp_detail ON emp.detail_id = emp_detail.id            INNER JOIN dep ON emp.dep_id = dep.id            WHERE            emp.name = %s            """</span>            res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>                row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>rowcount  <span class="token comment" spellcheck="true"># 取得记录个数，用于设置表格的行数</span>                <span class="token comment" spellcheck="true"># print(rows[0].keys())</span>                col <span class="token operator">=</span> len<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取得字段数，用于设置表格的列数</span>                self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setRowCount<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setColumnCount<span class="token punctuation">(</span>col<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(rows)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>                        temp_data <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 临时记录，不能直接插入表格</span>                        data <span class="token operator">=</span> QTableWidgetItem<span class="token punctuation">(</span>str<span class="token punctuation">(</span>temp_data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换后可插入表格</span>                        <span class="token comment" spellcheck="true"># data = data.setGeometry(QRect(70, 30, 661, 501))</span>                        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setItem<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> data<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print("没有该条信息")</span>                <span class="token keyword">from</span> search_err <span class="token keyword">import</span> err_window                self<span class="token punctuation">.</span>window <span class="token operator">=</span> err_window<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token string">"insert into log(action, msg) values(%s, %s)"</span>            cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>action<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            SELECT            dep.`name`,            emp.`name`,            emp_detail.addr,            emp_detail.email,            emp_detail.time            FROM            dep            INNER JOIN emp ON emp.dep_id = dep.id            INNER JOIN emp_detail ON emp.detail_id = emp_detail.id            WHERE            dep.name = %s            """</span>            res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>                row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>rowcount  <span class="token comment" spellcheck="true"># 取得记录个数，用于设置表格的行数</span>                <span class="token comment" spellcheck="true"># print(rows[0].keys())</span>                col <span class="token operator">=</span> len<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取得字段数，用于设置表格的列数</span>                self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setRowCount<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setColumnCount<span class="token punctuation">(</span>col<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(rows)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>                        temp_data <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 临时记录，不能直接插入表格</span>                        data <span class="token operator">=</span> QTableWidgetItem<span class="token punctuation">(</span>str<span class="token punctuation">(</span>temp_data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换后可插入表格</span>                        <span class="token comment" spellcheck="true"># data = data.setGeometry(QRect(70, 30, 661, 501))</span>                        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setItem<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> data<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print("没有该条信息")</span>                <span class="token keyword">from</span> search_err <span class="token keyword">import</span> err_window                self<span class="token punctuation">.</span>window <span class="token operator">=</span> err_window<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">project</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            SELECT            project.`name`,            emp.`name`,            emp_detail.addr,            emp_detail.email,            emp_detail.time,            dep.`name`,            dep.des            FROM            project            INNER JOIN emp2pro ON emp2pro.pro_id = project.id            INNER JOIN emp ON emp2pro.emp_id = emp.id            INNER JOIN emp_detail ON emp.detail_id = emp_detail.id            INNER JOIN dep ON emp.dep_id = dep.id            WHERE            project.name = %s            """</span>            res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>                row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>rowcount  <span class="token comment" spellcheck="true"># 取得记录个数，用于设置表格的行数</span>                <span class="token comment" spellcheck="true"># print(rows[0].keys())</span>                col <span class="token operator">=</span> len<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取得字段数，用于设置表格的列数</span>                self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setRowCount<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setColumnCount<span class="token punctuation">(</span>col<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(rows)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>                        temp_data <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 临时记录，不能直接插入表格</span>                        data <span class="token operator">=</span> QTableWidgetItem<span class="token punctuation">(</span>str<span class="token punctuation">(</span>temp_data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换后可插入表格</span>                        <span class="token comment" spellcheck="true"># data = data.setGeometry(QRect(70, 30, 661, 501))</span>                        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setItem<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> data<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print("没有该条信息")</span>                <span class="token keyword">from</span> search_err <span class="token keyword">import</span> err_window                self<span class="token punctuation">.</span>window <span class="token operator">=</span> err_window<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">search_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开查询的页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="search-err-py"><a href="#search-err-py" class="headerlink" title="search_err.py"></a>search_err.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textBrowser"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:20pt; font-weight:600;\">\u6ca1\u6709\u8be5\u6761\u4fe1\u606f\u5b58\u5728&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span><span class="token keyword">class</span> <span class="token class-name">err_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开查询失败的页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="PAdd-py"><a href="#PAdd-py" class="headerlink" title="PAdd.py"></a>PAdd.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">880</span><span class="token punctuation">,</span> <span class="token number">459</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 姓名</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"lineEdit"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_2 <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># add</span>        self<span class="token punctuation">.</span>lineEdit_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"lineEdit_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_3"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_3 <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># email</span>        self<span class="token punctuation">.</span>lineEdit_3<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"lineEdit_3"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_3<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_4"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">490</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_4 <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 部门姓名</span>        self<span class="token punctuation">.</span>lineEdit_4<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"lineEdit_4"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_4<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_5 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_5<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_5"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_5<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">490</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_5 <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 项目</span>        self<span class="token punctuation">.</span>lineEdit_5<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"lineEdit_5"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_5<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>submit<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u804c\u5458\u59d3\u540d"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u804c\u5458\u5730\u5740"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u804c\u5458\u90ae\u7bb1"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_3<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u6240\u5c5e\u90e8\u95e8"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_4<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_5<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u52a0\u5165\u9879\u76ee"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit_5<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u6dfb\u52a0\u6570\u636e"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">connect_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接数据库</span>        <span class="token keyword">import</span> pymysql        conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"classDesign"</span><span class="token punctuation">,</span>            charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 编码千万不要加 -</span>            autocommit<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 连接数据库</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个游标对象（cmd 的 光标）,帮助执行命令</span>        <span class="token keyword">return</span> cursor    <span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        emp_name <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        emp_add <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit_2<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        emp_email <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit_3<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 部门</span>        dep <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit_4<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        dep_id <span class="token operator">=</span> None        <span class="token comment" spellcheck="true"># 项目</span>        pro <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit_5<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        pro_id <span class="token operator">=</span> None        <span class="token comment" spellcheck="true"># print(emp_name,emp_add,emp_email, dep, pro)</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断部门是否存在，如果不存在，添加并且返回 部门的 id 值</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            sql_dep <span class="token operator">=</span> <span class="token string">"select id from dep where name = %s"</span>            res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_dep<span class="token punctuation">,</span> dep<span class="token punctuation">)</span>            <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 不存在该部门</span>                sql_insert_dep <span class="token operator">=</span> <span class="token string">"insert into dep(name) values ('%s')"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_insert_dep<span class="token punctuation">)</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_dep<span class="token punctuation">,</span> dep<span class="token punctuation">)</span>            dep_id <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(dep_id)</span>            self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> dep<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断 项目 是否存在，如果不存在，添加并且返回 项目的 id 值</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>pro<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            sql_pro <span class="token operator">=</span> <span class="token string">"select id from project where name = %s"</span>            res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_pro<span class="token punctuation">,</span> pro<span class="token punctuation">)</span>            <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 不存在该项目</span>                sql_insert_pro <span class="token operator">=</span> <span class="token string">"insert into project(name) values ('%s')"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pro<span class="token punctuation">)</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_insert_pro<span class="token punctuation">)</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_pro<span class="token punctuation">,</span> pro<span class="token punctuation">)</span>            pro_id <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(pro_id)</span>            self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> pro<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>emp_name<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            sql_detail <span class="token operator">=</span> <span class="token string">"insert into emp_detail(addr, email) values('%s', '%s')"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>emp_add<span class="token punctuation">,</span> emp_email<span class="token punctuation">)</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_detail<span class="token punctuation">)</span>            sql_detail_id <span class="token operator">=</span> <span class="token string">"select id from emp_detail where addr = '%s'"</span> <span class="token operator">%</span> emp_add            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_detail_id<span class="token punctuation">)</span>            detail_id <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(detail_id)</span>            sql_emp <span class="token operator">=</span> <span class="token string">"insert into emp(name, dep_id, detail_id) values('%s', %d, %d)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>emp_name<span class="token punctuation">,</span> dep_id<span class="token punctuation">,</span> detail_id<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(sql_emp)</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_emp<span class="token punctuation">)</span>            <span class="token keyword">if</span> pro_id <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                sql_emp_id <span class="token operator">=</span> <span class="token string">"select id from emp where name = '%s'"</span> <span class="token operator">%</span> emp_name                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_emp_id<span class="token punctuation">)</span>                emp_id <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># print(emp_id, pro_id)</span>                <span class="token comment" spellcheck="true"># print(emp_id)</span>                sql_emp2project <span class="token operator">=</span> <span class="token string">"insert into emp2pro(emp_id, pro_id) values(%d, %d)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>emp_id<span class="token punctuation">,</span> pro_id<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(sql_emp2project)</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_emp2project<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> emp_name<span class="token punctuation">)</span>        <span class="token keyword">from</span> add_success <span class="token keyword">import</span> success_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> success_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string">"insert into log(action, msg) values(%s, %s)"</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>action<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">add_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 添加数据的页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="add-success-py"><a href="#add-success-py" class="headerlink" title="add_success.py"></a>add_success.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">432</span><span class="token punctuation">,</span> <span class="token number">179</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textBrowser"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">361</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:20pt; font-weight:600;\">\u4fe1\u606f\u6dfb\u52a0\u6210\u529f\uff01\uff01\uff01&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span><span class="token keyword">class</span> <span class="token class-name">success_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 添加数据成功的页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="PDelete-py"><a href="#PDelete-py" class="headerlink" title="PDelete.py"></a>PDelete.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">741</span><span class="token punctuation">,</span> <span class="token number">322</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"lineEdit"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">290</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">281</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 按姓名删除</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_2 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 按部门删除</span>        self<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dep<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_3 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 按项目删除</span>        self<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton_3"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pro<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8bf7\u8f93\u5165\u5220\u9664\u7684\u5185\u5bb9"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u804c\u5de5\u59d3\u540d\u5220\u9664"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u90e8\u95e8\u5220\u9664"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u9879\u76ee\u5220\u9664"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">connect_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接数据库</span>        <span class="token keyword">import</span> pymysql        conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"classDesign"</span><span class="token punctuation">,</span>            charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 编码千万不要加 -</span>            autocommit<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 连接数据库</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个游标对象（cmd 的 光标）,帮助执行命令</span>        <span class="token keyword">return</span> cursor    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">"delete from emp where name = '%s'"</span> <span class="token operator">%</span> name        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">from</span> delete_success <span class="token keyword">import</span> success_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> success_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        dep <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql_pro_id <span class="token operator">=</span> <span class="token string">"select id from dep where name = %s"</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_pro_id<span class="token punctuation">,</span> dep<span class="token punctuation">)</span>        dep_id <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        sql <span class="token operator">=</span> <span class="token string">"delete from emp where dep_id = %d"</span> <span class="token operator">%</span> dep_id        sql2 <span class="token operator">=</span> <span class="token string">"delete from dep where name = '%s'"</span> <span class="token operator">%</span> dep        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">,</span> dep<span class="token punctuation">)</span>        <span class="token keyword">from</span> delete_success <span class="token keyword">import</span> success_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> success_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pro</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        pro <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql_pro_id <span class="token operator">=</span> <span class="token string">"select id from project where name = %s"</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_pro_id<span class="token punctuation">,</span> pro<span class="token punctuation">)</span>        pro_id <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        sql <span class="token operator">=</span> <span class="token string">"delete from emp2pro where pro_id = %d"</span> <span class="token operator">%</span> pro_id        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">,</span> pro<span class="token punctuation">)</span>        <span class="token keyword">from</span> delete_success <span class="token keyword">import</span> success_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> success_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string">"insert into log(action, msg) values(%s, %s)"</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>action<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">delete_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开删除的页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="delete-success-py"><a href="#delete-success-py" class="headerlink" title="delete_success.py"></a>delete_success.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">431</span><span class="token punctuation">,</span> <span class="token number">179</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textBrowser"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">361</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textBrowser<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:20pt; font-weight:600;\">\u4fe1\u606f\u5220\u9664\u6210\u529f\uff01\uff01\uff01&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span><span class="token keyword">class</span> <span class="token class-name">success_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 删除成功的页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h3 id="PLogWindow-py"><a href="#PLogWindow-py" class="headerlink" title="PLogWindow.py"></a>PLogWindow.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">741</span><span class="token punctuation">,</span> <span class="token number">561</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget <span class="token operator">=</span> QTableWidget<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"tableWidget"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">571</span><span class="token punctuation">,</span> <span class="token number">501</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">connect_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 连接数据库</span>        <span class="token keyword">import</span> pymysql        conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"classDesign"</span><span class="token punctuation">,</span>            charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 编码千万不要加 -</span>            autocommit<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 连接数据库</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个游标对象（cmd 的 光标）,帮助执行命令</span>        <span class="token keyword">return</span> cursor    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>connect_database<span class="token punctuation">(</span><span class="token punctuation">)</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from log'</span><span class="token punctuation">)</span>        rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>rowcount  <span class="token comment" spellcheck="true"># 取得记录个数，用于设置表格的行数</span>        <span class="token comment" spellcheck="true"># print(rows[0].keys())</span>        col <span class="token operator">=</span> len<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取得字段数，用于设置表格的列数</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setRowCount<span class="token punctuation">(</span>row<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setColumnCount<span class="token punctuation">(</span>col<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(rows)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>                temp_data <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 临时记录，不能直接插入表格</span>                data <span class="token operator">=</span> QTableWidgetItem<span class="token punctuation">(</span>str<span class="token punctuation">(</span>temp_data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换后可插入表格</span>                <span class="token comment" spellcheck="true"># data = data.setGeometry(QRect(70, 30, 661, 501))</span>                self<span class="token punctuation">.</span>tableWidget<span class="token punctuation">.</span>setItem<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">log_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 打开日志的页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h2 id="一些小-Bug"><a href="#一些小-Bug" class="headerlink" title="一些小 Bug"></a>一些小 Bug</h2><ol><li>用户登录成功后会展示该系统有的信息，但<em><strong>如果职员没有记录在部门或是项目中就不会显示，比如说初始数据中的盖亚就不会显示</strong></em></li><li><em><strong>按理来说管理员应该有注销普通用户或是有修改普通用户密码的权力，但由于时间关系并没有实现</strong></em></li><li>查询信息时，虽然可以按照职员名称、项目名称、部门名称进行查询，但<em><strong>如果该部门（或是项目）下没有任何职员，那么该系统会显示“该条信息不存在”</strong></em></li><li><em><strong>日志表会出现 username 为 Null 的情况，这时候操作的用户应该是上面最近登录的用户（因为是单线程）</strong></em>，出现这样的情况是因为进行 窗口信号传参的时候逻辑上并没有理清楚，加上对 pyqt5 信号操作还不太明白，就选择这样一种取巧、折中的方式实现该功能。</li></ol><p>除了上述已列出的问题之外，应该还存在其他的不足和 Bug，如果大家有发现，请告知。</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p><img src="https://img-blog.csdnimg.cn/943e878ec77543749b8dba1d289d7b07.gif"><br><img src="https://img-blog.csdnimg.cn/c147294eb16d445a9402553adfdafaad.gif"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>该项目相关代码已上传至 github 留作纪念 <a href="https://github.com/New-Ass/SmallDataBaseProject">SmallDataBaseProject</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（8） -- mysql 内容补充</title>
      <link href="/2022/11/24/mysql-shu-ju-ku-xue-xi-8-mysql-nei-rong-bu-chong/"/>
      <url>/2022/11/24/mysql-shu-ju-ku-xue-xi-8-mysql-nei-rong-bu-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><pre class=" language-python"><code class="language-python">什么是视图？    视图就是通过查询得到一张虚拟表，然后保存，下次可以直接使用    为什么要用视图？    如果要频繁的操作一张虚拟表（拼表组成），可以制作成视图，然后继续操作    <span class="token comment" spellcheck="true"># 语法</span>create view 视图名 <span class="token keyword">as</span> 虚拟表的查询sql语句<span class="token comment" spellcheck="true"># 举例</span>create view emp2dep <span class="token keyword">as</span> select <span class="token operator">*</span> <span class="token keyword">from</span> emp inner join dep on emp<span class="token punctuation">.</span>dep <span class="token operator">=</span> dep<span class="token punctuation">.</span>id<span class="token punctuation">;</span>注意    视图在保存时只会有表结果，没有数据（数据还是来自于之前的表）    视图一般只用来查询，里面的数据不需要修改，可能会影响真正的表    视图使用频率    使用不多，    当你创建了很多视图时，会造成表的维护困难</code></pre><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''在满足对表数据进行增、删、改的情况下自动触发的功能使用触发器可以帮助我们实现监控、日志...触发器可以在 6 中情况下自动触发 增、删、改的前后'''</span>基本语法    create trigger 触发器的名字 before<span class="token operator">/</span>after insert<span class="token operator">/</span>update<span class="token operator">/</span>delete on 表名 <span class="token keyword">for</span> each row begin sql语句 end<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 具体使用 针对触发器的名字 我们需要做到 见名知意</span>create trigger tri_before_insert_ti before insert on t1 <span class="token keyword">for</span> each row begin sql语句 end<span class="token punctuation">;</span>修改 MySQL 默认的语句结束符，只作用于当前窗口    delimiter $$  <span class="token comment" spellcheck="true"># 将默认的结束符号改为 $$</span>    delimiter <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 案例(类似于错误日志功能)</span>create table cmd<span class="token punctuation">(</span>    id int primary key auto_increment<span class="token punctuation">,</span>    user char<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    priv char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    cmd char<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sub_time datetime<span class="token punctuation">,</span>    success enum<span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0代表执行失败</span><span class="token punctuation">)</span><span class="token punctuation">;</span>create table errlog<span class="token punctuation">(</span>    id int primary key auto_increment<span class="token punctuation">,</span>    err_cmd char<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    err_time datetime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token triple-quoted-string string">'''当 cmd 表中记录的 success 字段是 no 那么就触发器的执行去 errlog 表中注入数据NEW 指代的就是一条条数据对象'''</span>delimiter $$create trigger tri_insert_after_cmd after insert on cmd <span class="token keyword">for</span> each rowbegin     <span class="token keyword">if</span> NEW<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token string">"no"</span> then        insert into errlog<span class="token punctuation">(</span>err_cmd<span class="token punctuation">,</span> err_time<span class="token punctuation">)</span> values <span class="token punctuation">(</span>NEW<span class="token punctuation">.</span>cmd<span class="token punctuation">,</span> NEW<span class="token punctuation">.</span>sub_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token keyword">if</span><span class="token punctuation">;</span>end $$delimiter <span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 到 cmd 表插入数据</span>insert into cmd <span class="token punctuation">(</span>    user<span class="token punctuation">,</span>    priv<span class="token punctuation">,</span>    cmd<span class="token punctuation">,</span>    sub_time<span class="token punctuation">,</span>    success<span class="token punctuation">)</span>values    <span class="token punctuation">(</span><span class="token string">"aoteman"</span><span class="token punctuation">,</span> <span class="token string">"0755"</span><span class="token punctuation">,</span> <span class="token string">"ls -1 /etc"</span><span class="token punctuation">,</span> NOW<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"aoteman"</span><span class="token punctuation">,</span> <span class="token string">"0755"</span><span class="token punctuation">,</span> <span class="token string">"cat /etc/password"</span><span class="token punctuation">,</span> NOW<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"aoteman"</span><span class="token punctuation">,</span> <span class="token string">"0755"</span><span class="token punctuation">,</span> <span class="token string">"useradd xxx"</span><span class="token punctuation">,</span> NOW<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"aoteman"</span><span class="token punctuation">,</span> <span class="token string">"0755"</span><span class="token punctuation">,</span> <span class="token string">"ps aux"</span><span class="token punctuation">,</span> NOW<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 删除触发器</span>drop trigger tri_insert_after_cmd<span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/7e01fcd921fe4388af6529eb35265aa4.gif"></p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><pre class=" language-python"><code class="language-python">什么是事务    开启一个事务可以包含多条SQL语句，这些 sql 语句要么同时成功，要么一个都别想成功，称之为事务的原子性    事务的作用    保证了对数据操作的安全性    事务的四大特性（ACID）A：原子性    一个事务是一个不可分割的单位，事务中包含的诸多操作，要么同时成功，要么同时失败    C<span class="token punctuation">:</span> 一致性    事务必须是使数据库从一个一致性的状态转变为另一个一致性的状态    I： 隔离性    一个事务的执行不能被其他事务干扰，    即一个事物内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的事务之间也是互相不干扰的    D： 持久性    也叫永久性    一个事务一旦执行成功，对数据库数据的修改应该是永久的，接下来的其他操作或者故障不应该对齐有任何的影响    如何使用事务<span class="token number">1</span><span class="token punctuation">.</span> 关键字start transaction<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> 回滚操作，回到事务执行之前的状态rollback<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 二次确认，确认之后无法回滚commit<span class="token punctuation">;</span><span class="token string">"模拟转账"</span>create table user<span class="token punctuation">(</span>    id int primary key auto_increment<span class="token punctuation">,</span>    name char<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    balance int<span class="token punctuation">)</span><span class="token punctuation">;</span>insert into user<span class="token punctuation">(</span>name<span class="token punctuation">,</span> balance<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 先开启事务</span>start transaction<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 多条 sql 语句</span>update user set balance<span class="token operator">=</span><span class="token number">900</span> where name <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>update user set balance<span class="token operator">=</span><span class="token number">1010</span> where name <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>update user set balance<span class="token operator">=</span><span class="token number">1090</span> where name <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span>rollback<span class="token punctuation">;</span>commit<span class="token punctuation">;</span></code></pre><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><pre class=" language-mysql"><code class="language-mysql">类似于 python 中的 自定义函数 内部包含一系列可以执行的 sql 语句，存储过程存放于 Mysql 服务端中，可以直接使用触发sql语句执行  delimiter $$  create procedure 存储过程的名字(形参1, 形参2) begin     sql 语句 end  delimiter ;  call 存储过程的名字();  三种开发模式     1. 应用程序程序员写代码开发，MySQL 提前编写存储过程，供应用程序调用——（优势）提升开发效率，执行效率提升；（缺点）考虑到人为元素、跨部门沟通的问题，后续存储的过程的扩展性差          2. 应用程序：程序员写代码开发之外，数据库操作也自己写——（优势）扩展性高；（缺点）开发效率降低，编写sql语句太过繁琐，还需要考虑sql优化的问题          3. 应用程序只写代码，不写sql语句，基于别人写好的MySQL的python框架（ORM框架）直接操作即可——（优势）开发效率高；（缺点）因为由别人封装，语句的扩展性差，可能会出现效率低下的问题</code></pre><h2 id="存储过程演示"><a href="#存储过程演示" class="headerlink" title="存储过程演示"></a>存储过程演示</h2><pre class=" language-mysql"><code class="language-mysql">delimiter $$create procedure d1(    in m int, # 只进不出， m 不能返回出去    in n int,    out res int # 此形参可以返回出去)begin    select * from emp where id > m and age > n;    set res=0; # 将 res 变量修改，用来标识当前存储过程代码确实执行end$$delimiter ;call d1(1, 28, 10); # 报错# 针对 形参 res 不能直接传数据 应该传一个变量名# 定义变量set @ret = 10;# 查看变量的值select @ret;call d1(1, 28, @ret)</code></pre><h2 id="在pyMySQL模块中如何调用"><a href="#在pyMySQL模块中如何调用" class="headerlink" title="在pyMySQL模块中如何调用"></a>在pyMySQL模块中如何调用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 调用存储过程</span>cursor<span class="token punctuation">.</span>callproc<span class="token punctuation">(</span>d1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><pre class=" language-mysql"><code class="language-mysql">跟存储过程是有区别的，相当于存储过程是自定义函数，函数是内置函数比如说： NOW()create table blog(    id int primary key auto_increment,    name char(32),    sub_time datetime);insert into blog(name, sub_time)values    ("第1篇", "2015-03-01 11:31:21"),    ("第2篇", "2015-03-11 16:31:21"),    ("第3篇", "2016-07-01 10:21:21"),    ("第4篇", "2016-07-22 09:23:21"),    ("第5篇", "2016-07-23 10:11:11"),    ("第6篇", "2016-07-25 11:21:31"),    ("第7篇", "2017-03-01 15:33:21"),    ("第8篇", "2017-03-01 17:32:21"),    ("第9篇", "2017-03-01 18:31:21");    select date_format(sub_time, "%Y-%m"), count(id) from blog group by date_format(sub_time, "%Y-%m");</code></pre><p><img src="https://img-blog.csdnimg.cn/5298233c789045b7a97fb494bc30c624.gif"></p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># if 判断</span>delimiter <span class="token operator">//</span>create procedure proc_if<span class="token punctuation">(</span><span class="token punctuation">)</span>begin    declare i int defalut <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> i<span class="token operator">=</span><span class="token number">1</span> then        select <span class="token number">1</span><span class="token punctuation">;</span>    elseif i <span class="token operator">=</span><span class="token number">2</span> then        select <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        select <span class="token number">7</span><span class="token punctuation">;</span>    end <span class="token keyword">if</span><span class="token punctuation">;</span>end <span class="token operator">//</span>delimiter <span class="token punctuation">;</span><span class="token comment" spellcheck="true"># while 循环</span>delimiter <span class="token operator">//</span>create procedure proc_while<span class="token punctuation">(</span><span class="token punctuation">)</span>begin    declare num int <span class="token punctuation">;</span>    set num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> num <span class="token operator">&lt;</span> <span class="token number">10</span> do        select             num<span class="token punctuation">;</span>        set num <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    end <span class="token keyword">while</span><span class="token punctuation">;</span>end <span class="token operator">//</span> delimiter <span class="token punctuation">;</span></code></pre><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><pre class=" language-python"><code class="language-python">数据都是存在于硬盘上的，查询数据不可避免地需要 IO操作索引：就是一种数据结构，类似于书的目录。意味着在查询数据的时候先找目录再找数据，从而提升查询速度而降低IO操作索引在MySQL中也叫“键”，是存储引擎快速查找记录的一种数据结构（innodb，）primary keyunique keyindex key注意 foreign key 不是用来加速查询用的上面的三种 key，前面两种除了增加查询速度各自还具有约束条件，而 index key 没有任何约束条件，只是用来帮助你快速查询数据本质    不断缩小想要的数据范围筛选出最终的结果，同时将随机事件（一页一页的翻）变成顺序事件（先找目录、找数据）    也就是说有了索引数据，我们可以总是用一中固定的方式查找数据    一张表中可以有多个索引（多个目录），比如说新华字典既可以用部首查，也可以用拼音查。索引虽然可以帮助你加快查询速度，也存在缺点<span class="token number">1</span><span class="token punctuation">.</span> 当表中有大量数据的前提下，创建索引速度会很慢<span class="token number">2</span><span class="token punctuation">.</span> 在索引创建完毕后，对表的查询性能大幅度提升，但是写的性能也会大幅度的降低索引不要随意的创建！！！</code></pre><h2 id="b-树"><a href="#b-树" class="headerlink" title="b+树"></a>b+树</h2><p><img src="https://img-blog.csdnimg.cn/2767eeb53312463c84fb6f9172049487.png"></p><pre class=" language-python"><code class="language-python">只有叶子节点是真实的数据，其他节点存放的数据是虚拟的数据，仅用来指路树的层级越高查询数据所需要经历的步骤越多（树有几层，查询数据就要几层）一个磁盘块存储是有限制的，在存储的时候希望存储的数据越大越好，所以推荐 id 作为主键，因为 整型占据的空间小一个磁盘块存储的数据多，降低了树的高度，从而减少查询次数</code></pre><h2 id="聚集索引-primary-key"><a href="#聚集索引-primary-key" class="headerlink" title="聚集索引(primary key)"></a>聚集索引(primary key)</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 聚集索引就是 主键</span><span class="token triple-quoted-string string">'''innodb  只有两个文件 直接将主键 存储在数据表（idb）MyIsam  三个文件 单独将搜因存在一个文件'''</span></code></pre><h2 id="辅助索引（unique-key）"><a href="#辅助索引（unique-key）" class="headerlink" title="辅助索引（unique key）"></a>辅助索引（unique key）</h2><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''查询数据的时候不可能一直使用到主键吗，也有可能用到其他字段，没有办法利用聚集索引，这个时候剋以根据给其他去字段设置辅助索引（也是 b+树）辅助索引叶子节点存储的是数据对应的主键值    先按照辅助索引拿到数据的主键值    之后还是需要去主键的聚集索引里面查询数据'''</span></code></pre><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>在辅助索引的叶子节点就已经拿到了需要的数据</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 给 name 设置辅助索引</span>select name <span class="token keyword">from</span> user where name <span class="token operator">=</span> <span class="token string">"aoteman"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 非覆盖索引</span>select age <span class="token keyword">from</span> user where name <span class="token operator">=</span> <span class="token string">"aoteman"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（7） -- pymysql简单介绍</title>
      <link href="/2022/11/24/mysql-shu-ju-ku-xue-xi-7-pymysql-jian-dan-jie-shao/"/>
      <url>/2022/11/24/mysql-shu-ju-ku-xue-xi-7-pymysql-jian-dan-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="pymysql-基本语法及游标移动"><a href="#pymysql-基本语法及游标移动" class="headerlink" title="pymysql 基本语法及游标移动"></a>pymysql 基本语法及游标移动</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlconn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>    host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 端口</span>    port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>    user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">,</span>    password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 密码，该参数可以简写成 passwd=</span>    database<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 连接的库的名称</span>    charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 读取数据时的编码，一定不要加 “-”</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># cousor = conn.cursor() # 生成游标，类似于 cmd 中的光标</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># sql = "select * from dep"</span><span class="token triple-quoted-string string">"""+------+--------------+| id   | name         |+------+--------------+|  200 | 技术         ||  201 | 人力资源     ||  202 | 销售         ||  203 | 运营         ||  205 | sale         |+------+--------------+"""</span><span class="token comment" spellcheck="true"># res = cousor.execute(sql)</span><span class="token comment" spellcheck="true"># print(res) # 5  打印的是该 sql 命令影响的数据的行数</span><span class="token comment" spellcheck="true"># print(cousor.fetchone()) # 拿其中一条数据，元组形式。</span><span class="token comment" spellcheck="true"># 而实际上我们更希望拿出的数据是 字典形式</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>cursor<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"select * from dep"</span><span class="token triple-quoted-string string">"""+------+--------------+| id   | name         |+------+--------------+|  200 | 技术         ||  201 | 人力资源     ||  202 | 销售         ||  203 | 运营         ||  205 | sale         |+------+--------------+"""</span>res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5  打印的是该 sql 命令影响的数据的行数</span><span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 拿其中一条数据，此时是 字典形式。</span><span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 执行该命令，拿到的表中第二条数据，原因是因为在第一次执行该命令时，游(光)标 从第一条数据的位置移动到了 第二条数据 的位置，所以此时拿到的是第二条数据，同时游标移动到了第三条数据的位置</span><span class="token comment" spellcheck="true"># 光标的移动</span>cursor<span class="token punctuation">.</span>scroll<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"relative"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 相对当前位置往后移动一条数据，即 游标来到了第四条数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 第四条数据</span>cursor<span class="token punctuation">.</span>scroll<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"absolute"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 从头往后移动 一条数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 拿所有数据，由于此时 游标在第二条数据上，所以只能拿到四条数据</span></code></pre><h1 id="sql-注入以及解决方法"><a href="#sql-注入以及解决方法" class="headerlink" title="sql 注入以及解决方法"></a>sql 注入以及解决方法</h1><h2 id="sql-注入"><a href="#sql-注入" class="headerlink" title="sql 注入"></a>sql 注入</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在 test 库中先创建一张 user 表</span>create table user <span class="token punctuation">(</span>    id int primary key auto_increment<span class="token punctuation">,</span>    name char<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    password varchar<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>insert into user<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">"aoteman"</span><span class="token punctuation">,</span> <span class="token string">"asd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"alterman"</span><span class="token punctuation">,</span> <span class="token string">"asdzxc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">import</span> pymysqlconn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>    host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>    database<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span>    user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>    passwd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 数据库密码</span>    charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""+----+----------+----------+| id | name     | password |+----+----------+----------+|  1 | aoteman  | asd      ||  2 | alterman | asdzxc   |+----+----------+----------+"""</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>cursor<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 简易登录验证</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"username：>>"</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"password：>>"</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"select * from user where name='%s' and password='%s' "</span> <span class="token operator">%</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="正常登录情况"><a href="#正常登录情况" class="headerlink" title="正常登录情况"></a>正常登录情况</h3><p><img src="https://img-blog.csdnimg.cn/d194ed0f6a074f669720d93c01be7c79.gif"></p><h3 id="非正常登录情况"><a href="#非正常登录情况" class="headerlink" title="非正常登录情况"></a>非正常登录情况</h3><p><img src="https://img-blog.csdnimg.cn/f57dfb62a8fd41d9ab8b73066f61d5aa.gif"></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''在上述演示的非正常登陆情况下，我们发现    一种是只知道 用户名就可以实现登录，并且该登录用户的返回密码    一种是不知道账号和密码的情况下，完成登录，并且获取所有用户的用户名和密码'''</span>我们在分析 mysql 在上述两种情况中执行的代码分别是    select <span class="token operator">*</span> <span class="token keyword">from</span> user where name<span class="token operator">=</span><span class="token string">'aoteman'</span><span class="token comment" spellcheck="true">#' and password='' </span>    select <span class="token operator">*</span> <span class="token keyword">from</span> user where name<span class="token operator">=</span><span class="token string">''</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#' and password='' </span>    分析执行的 sql 语句我们会发现这些非正常登录的情况是因为 用户巧妙运用了 mysql 的逻辑运算（<span class="token operator">or</span>）和 注释符号 “<span class="token comment" spellcheck="true">#” 使得部分代码虽然存在但不执行，从而跳过了密码验证和用户名验证</span>数据库注入情况是比较常见的，比如说我们在注册一些账户的时候，会要求我们的用户名和密码不能包含一些特殊符号就是为了防止注入的情况出现。</code></pre><h2 id="sql-注入的解决方法"><a href="#sql-注入的解决方法" class="headerlink" title="sql 注入的解决方法"></a>sql 注入的解决方法</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一种方法就是在用户注册时明确不能包含特殊符号（适用性较差）</span><span class="token comment" spellcheck="true"># 第二种方法使用，pymysql 模块提供的方法</span>sql <span class="token operator">=</span> <span class="token string">"select * from user where name=%s and password=%s "</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>在演示中我们可以看到按照这种方法可以比较简单的避免 sql 注入的情况出现</code></pre><p><img src="https://img-blog.csdnimg.cn/03087f577b4a4bdc90c444d69a111c47.gif"></p><h1 id="pymysql补充内容"><a href="#pymysql补充内容" class="headerlink" title="pymysql补充内容"></a>pymysql补充内容</h1><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''增删改查中    删、改、增它们的操作涉及到数据的更改，没有办法直接执行，需要二次确认'''</span><span class="token comment" spellcheck="true"># 执行多条 sql 语句</span>rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"sekiro"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"ash"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">import</span> pymysqlconn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>    host <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">,</span>    user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">,</span>    password <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>    charset <span class="token operator">=</span> <span class="token string">"utf8"</span><span class="token punctuation">,</span>    database <span class="token operator">=</span> <span class="token string">"test518"</span><span class="token punctuation">,</span>    autocommit <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 自动提交</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>cursor <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加数据</span>sql <span class="token operator">=</span> <span class="token string">"insert into user(name, password) values(%s, %s)"</span><span class="token comment" spellcheck="true"># rows = cursor.execute(sql, ("sekiro", "123"))</span><span class="token comment" spellcheck="true"># 执行多条 sql 语句</span>rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"sekiro"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"ash"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># conn.commit() # 确认</span><span class="token comment" spellcheck="true"># 修改</span>sql <span class="token operator">=</span> <span class="token string">"update user set name='ash' where id = 1"</span>rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># conn.commit() # 确认</span><span class="token comment" spellcheck="true"># 删</span>sql <span class="token operator">=</span> <span class="token string">"delete from user where id = 1"</span>rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（6） -- 表查询关键词</title>
      <link href="/2022/11/24/mysql-shu-ju-ku-xue-xi-6-biao-cha-xun-guan-jian-ci/"/>
      <url>/2022/11/24/mysql-shu-ju-ku-xue-xi-6-biao-cha-xun-guan-jian-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="前期表准备"><a href="#前期表准备" class="headerlink" title="前期表准备"></a>前期表准备</h1><pre class=" language-mysql"><code class="language-mysql"># 如果cmd窗口展示数据时，窗口最大，展示数据的虚表仍有错位，应使用 \G 分行显示select * from t1\G;# 个别电脑在插入中文的时候会出现乱码或者空白的现象，可以将字符编码统一设置成 gbkcreate table emp (    id int primary key auto_increment,    name varchar(20) not null,    sex enum("male", "female", "other") default "male", # 大部分是男的    age int unsigned not null default 28,    hire_date date not null,    post varchar(50),    post_comment varchar(100),    salary double(15, 2),    office int,    depart_id int);# 插入记录# 三个部门：教学，销售，运营insert into emp(name, sex, age, hire_date, post, salary, office, depart_id) values("jason", "male", 18, "20170301", "奥特曼", 7300.33, 401, 1), # 以下是教学部("tom", "male", 78, "20150302", "teacher", 1000000.31, 401, 1),("kevin", "male", 81, "20130305", "teacher", 8300, 401, 1),("tony", "male", 73, "20140701", "teacher", 3500, 401, 1),("owen", "male", 28, "20121101", "teacher", 2100, 401, 1),("jack", "female", 18, "20110211", "teacher", 9000, 401, 1),("jenny", "male", 18, "19000301", "teacher", 30000, 401, 1),("sank", "male", 48, "20101111", "teacher", 10000, 401, 1),("哈哈", "female", 48, "20150311", "sale", 3000.13, 402, 2), # 以下是销售部门("呵呵", "female", 38, "20101101", "sale", 2000.35, 402, 2),("西西", "female", 18, "20110312", "sale", 1000.37, 402, 2),("乐乐", "female", 18, "20160513", "sale", 3000.29, 402, 2),("拉拉", "female", 28, "20170127", "sale", 4000.33, 402, 2),("僧龙", "male", 28, "20160311", "opeartion", 10000.13, 403, 3), # 以下是运营部("程咬金", "male", 18, "19970312", "opeartion", 20000, 403, 3),("程咬银", "female", 18, "20130311", "opeartion", 19000, 403, 3),("程咬铜", "male", 18, "20150411", "opeartion", 18000, 403, 3),("程咬铁", "female", 18, "20140512", "opeartion", 17000.13, 403, 3)；</code></pre><h1 id="几个关键字的执行顺序"><a href="#几个关键字的执行顺序" class="headerlink" title="几个关键字的执行顺序"></a>几个关键字的执行顺序</h1><pre class=" language-mysql"><code class="language-mysql"># 书写顺序(英语语法)select id,name from emp where id > 3;# 执行顺序fromwhereselect# 执行顺序和书写顺序不一致，就按照书写顺序写 sql    select * 先用 * 来占位    之后补全后面的 sql 语句    最后将 * 号替换成想要的具体字符</code></pre><h1 id="where过滤"><a href="#where过滤" class="headerlink" title="where过滤"></a>where过滤</h1><pre class=" language-mysql"><code class="language-mysql"># 作用：对整体数据的一个筛选操作（可以理解为 python 中的 if）# 查询 id 大于等于 3 小于等于 6 的数据select id,name,age from emp where id >= 3 and id <= 6;select id,name,age from emp where id between 3 and 6; # 两种等价+----+-------+-----+| id | name  | age |+----+-------+-----+|  3 | kevin |  81 ||  4 | tony  |  73 ||  5 | owen  |  28 ||  6 | jack  |  18 |+----+-------+-----+# 查询薪资是 20000 或 18000 或 17000 的数据select id, name, salary from emp where salary = 20000 or salary = 18000 or salary = 17000;select id, name, salary from emp where salary in (20000, 18000, 17000);+----+-----------+----------+| id | name      | salary   |+----+-----------+----------+| 15 | 程咬金    | 20000.00 || 17 | 程咬铜    | 18000.00 |+----+-----------+----------+# 查询员工姓名中包含字母 o 的员工的姓名和薪资select name, salary from emp where name like "%o%";+-------+------------+| name  | salary     |+-------+------------+| jason |    7300.33 || tom   | 1000000.31 || tony  |    3500.00 || owen  |    2100.00 |+-------+------------+# 查询员工姓名是由 4 个字符组成的 姓名和薪资select name, salary from emp where name like "____";select name, salary from emp where char_length(name) = 4;+------+----------+| name | salary   |+------+----------+| tony |  3500.00 || owen |  2100.00 || jack |  9000.00 || sank | 10000.00 |+------+----------+# 查询薪资不在 20000，18000，17000范围的数据select * from emp where salary not in (20000, 18000, 17000);# 查询岗位描述的为空的员工姓名和岗位，针对 null 不能用等号，用 isselect name,post from emp where post_comment is Null;</code></pre><h1 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by 分组"></a>group by 分组</h1><pre class=" language-mysql"><code class="language-mysql"># 实际应用场景     分组应用场景非常多    男女比例    部门平均薪资    部门秃头率    国家之间数据统计    # 按照部门分组select * from emp group by post;# 分组之后最小的可操作单位是组  而不是组内的单个数据# 上述命令在你没有设置严格模式可正常执行，返回的分组之后每组的第一条数据 但是浙不符合分组的规范——分组之后不应该考虑单个数据而应该以组位操作单位（分组之后没办法获取组内单个数据）# 如果设置了严格模式，会直接报错set global sql_mode = "strict_trans, only_full_group_by";# 设置严格模式之后，分组默认只能拿到分组的依据select post from emp group by post;+-----------+| post      |+-----------+| opeartion || sale      || teacher   || 奥特曼    |+-----------+# 按照什么字段分组就只能拿到分组 其他字段不能直接获取 需要借助于其他方法# 什么时候需要分组 —— 每个，平均，最高，最低# 1. 获取每个部门的最高薪资select post, max(salary) from emp group by post;+-----------+-------------+| post      | max(salary) |+-----------+-------------+| opeartion |    20000.00 || sale      |     4000.33 || teacher   |  1000000.31 || 奥特曼    |     7300.33 |+-----------+-------------+# 可以使用 as 给字段起别名，也可以省略不写，但是不推荐不写，因为省略之后语义不明，容易错乱select post as "部门", max(salary) as "最高薪资" from emp group by post;+-----------+--------------+| 部门      | 最高薪资     |+-----------+--------------+| opeartion |     20000.00 || sale      |      4000.33 || teacher   |   1000000.31 || 奥特曼    |      7300.33 |+-----------+--------------+# 获取每个部门的最低薪资select post as "部门", min(salary) as "最低薪资" from emp group by post;+-----------+--------------+| 部门      | 最低薪资     |+-----------+--------------+| opeartion |     10000.13 || sale      |      1000.37 || teacher   |      2100.00 || 奥特曼    |      7300.33 |+-----------+--------------+# 获取每个部门的薪资总和select post as "部门", sum(salary) as "薪资总和" from emp group by post;+-----------+--------------+| 部门      | 薪资总和     |+-----------+--------------+| opeartion |     84000.26 || sale      |     13001.47 || teacher   |   1062900.31 || 奥特曼    |      7300.33 |+-----------+--------------+# 统计每个部门的人数select post as "部门", count(id) as "总人数" from emp group by post; # 常用 id 进行统计+-----------+-----------+| 部门      | 总人数    |+-----------+-----------+| opeartion |         5 || sale      |         5 || teacher   |         7 || 奥特曼    |         1 |+-----------+-----------+select post as "部门", count(post_comment) as "总人数" from emp group by post; # 对 Null 无法计数# 聚合函数——max，min，avg，sum，count# group_concat 不仅支持获取分组后的其他字段值，还支持拼接操作# 查询分组之后的部门名称和每个部门下所有的员工姓名select post as "部门", group_concat(name) as "员工名称" from emp group by post;+-----------+------------------------------------------------+| 部门      | 员工名称                                       |+-----------+------------------------------------------------+| opeartion | 僧龙,程咬金,程咬银,程咬铜,程咬铁               || sale      | 哈哈,呵呵,西西,乐乐,拉拉                       || teacher   | tom,kevin,tony,owen,jack,jenny,sank            || 奥特曼    | jason                                          |+-----------+------------------------------------------------+select post as "部门", group_concat(name, "：", salary) as "各个员工工资" from emp group by post\G;*************************** 1. row ***************************            部门: opeartion各个员工工资: 僧龙：10000.13,程咬金：20000.00,程咬银：19000.00,程咬铜：18000.00,程咬铁：17000.13*************************** 2. row ***************************            部门: sale各个员工工资: 哈哈：3000.13,呵呵：2000.35,西西：1000.37,乐乐：3000.29,拉拉：4000.33*************************** 3. row ***************************            部门: teacher各个员工工资: tom：1000000.31,kevin：8300.00,tony：3500.00,owen：2100.00,jack：9000.00,jenny：30000.00,sank：10000.00*************************** 4. row ***************************            部门: 奥特曼各个员工工资: jason：7300.33# concat 可以在不分组的情况下使用select concat("Name：", name), concat("SAL：", salary) from emp;+-------------------------+--------------------------+| concat("Name：", name)  | concat("SAL：", salary)  |+-------------------------+--------------------------+| Name：jason             | SAL：7300.33             || Name：tom               | SAL：1000000.31          || Name：kevin             | SAL：8300.00             || Name：tony              | SAL：3500.00             || Name：owen              | SAL：2100.00             || Name：jack              | SAL：9000.00             || Name：jenny             | SAL：30000.00            || Name：sank              | SAL：10000.00            || Name：哈哈              | SAL：3000.13             || Name：呵呵              | SAL：2000.35             || Name：西西              | SAL：1000.37             || Name：乐乐              | SAL：3000.29             || Name：拉拉              | SAL：4000.33             || Name：僧龙              | SAL：10000.13            || Name：程咬金            | SAL：20000.00            || Name：程咬银            | SAL：19000.00            || Name：程咬铜            | SAL：18000.00            || Name：程咬铁            | SAL：17000.13            |+-------------------------+--------------------------+# 查询每个人的年薪（12薪）select name, salary*12 from emp;</code></pre><h2 id="分组注意事项"><a href="#分组注意事项" class="headerlink" title="分组注意事项"></a>分组注意事项</h2><pre class=" language-mysql"><code class="language-mysql"># 关键词 where 和 group by 同时出现的时候 group by 必须在 where 的后面——where 先对整体数据过滤再进行分组# 聚合函数只能在分组之后使用，即 where 筛选田间不能使用聚合函数select name from emp where max(salary) > 3000; # 报错select max(salary) from emp; # 不分组默认整体是一个分组+-------------+| max(salary) |+-------------+|  1000000.31 |+-------------+# 统计各部门年龄在 30 岁以上的员工平均薪资select post as "部门", avg(salary) as "平均薪资" from emp where age > 30 group by post;+---------+---------------+| 部门    | 平均薪资      |+---------+---------------+| sale    |   2500.240000 || teacher | 255450.077500 |+---------+---------------+</code></pre><h1 id="having-分组之后的筛选条件"><a href="#having-分组之后的筛选条件" class="headerlink" title="having 分组之后的筛选条件"></a>having 分组之后的筛选条件</h1><pre class=" language-mysql"><code class="language-mysql"># having 的语法和 where 是一致的，只不过 having 是在分组之后进行的过滤操作，即 having 是可以直接使用聚合函数的# 统计各部门年龄在 30岁以上的员工平均薪资并且保留平均薪资大于 10000 的部门select post as "部门", avg(salary) as "平均薪资" from emp where age > 30 group by post having avg(salary) > 10000;+---------+---------------+| 部门    | 平均薪资      |+---------+---------------+| teacher | 255450.077500 |+---------+---------------+</code></pre><h1 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct 去重"></a>distinct 去重</h1><pre class=" language-mysql"><code class="language-mysql"># 必须是完全一样的数据才能去重，一定不要忽视主键，存在主键的情况下一定无法去重select distinct id, age from emp;select distinct age from emp;</code></pre><h1 id="order-by-排序"><a href="#order-by-排序" class="headerlink" title="order by 排序"></a>order by 排序</h1><pre class=" language-mysql"><code class="language-mysql">select * from emp order by salary; # 默认升序， asc 可以省略不写，降序 descselect * from emp order by salary desc;select * from emp order by age asc, salary desc; # 先按照 age 升序排序，如果 age 相同再按照 salary 降序排序# 统计各部门年龄在 10 岁以上的员工平均薪资并且保留平均薪资大于 1000 的部门，并对平均工资降序select post as "部门", avg(salary) as "平均薪资" from emp where age > 10 group by post having avg(salary) > 1000 order by avg(salary) desc;+-----------+---------------+| 部门      | 平均薪资      |+-----------+---------------+| teacher   | 151842.901429 || opeartion |  16800.052000 || 奥特曼    |   7300.330000 || sale      |   2600.294000 |+-----------+---------------+</code></pre><h1 id="limit-限制展示条数"><a href="#limit-限制展示条数" class="headerlink" title="limit 限制展示条数"></a>limit 限制展示条数</h1><pre class=" language-mysql"><code class="language-mysql">select * from emp;# 针对数据过多的情况，通常分页处理select name, age, salary from emp limit 3;# 只展示前三条数据+-------+-----+------------+| name  | age | salary     |+-------+-----+------------+| jason |  18 |    7300.33 || tom   |  78 | 1000000.31 || kevin |  81 |    8300.00 |+-------+-----+------------+select name, age, salary from emp limit 0, 5; # 展示第一条到第五条的数据+-------+-----+------------+| name  | age | salary     |+-------+-----+------------+| jason |  18 |    7300.33 || tom   |  78 | 1000000.31 || kevin |  81 |    8300.00 || tony  |  73 |    3500.00 || owen  |  28 |    2100.00 |+-------+-----+------------+select name, age, salary from emp limit 5, 5; # 展示从 第6条开始的五条数据+--------+-----+----------+| name   | age | salary   |+--------+-----+----------+| jack   |  18 |  9000.00 || jenny  |  18 | 30000.00 || sank   |  48 | 10000.00 || 哈哈   |  48 |  3000.13 || 呵呵   |  38 |  2000.35 |+--------+-----+----------+# limit 第一个参数是起始位置，第二个参数是显示数量</code></pre><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><pre class=" language-mysql"><code class="language-mysql"># 关键词 regexpselect name, age, salary from emp where name regexp "^j."; # 匹配 j 开头的数据+-------+-----+----------+| name  | age | salary   |+-------+-----+----------+| jason |  18 |  7300.33 || jack  |  18 |  9000.00 || jenny |  18 | 30000.00 |+-------+-----+----------+</code></pre><h1 id="连表操作"><a href="#连表操作" class="headerlink" title="连表操作"></a>连表操作</h1><pre class=" language-mysql"><code class="language-mysql"># 连表create table dep (    id int,    name varchar(20));create table emp(    id int primary key auto_increment,    name varchar(20),    sex enum("male", "female", "other") default "male",    age int,    dep_id int);# 插入数据insert into dep values(200, "技术"),(201, "人力资源"),(202, "销售"),(203, "运营");insert into emp(name, sex, age, dep_id) values("jason", "male", 18, 200),("egon", "female", 48, 201),("kevin", "male", 18 ,201),("nick", "male", 28, 202),("owen", "male", 18, 203),("jerry", "female", 18, 204);</code></pre><h2 id="表查询"><a href="#表查询" class="headerlink" title="表查询"></a>表查询</h2><pre class=" language-mysql"><code class="language-mysql">select * from dep, emp; # 结果 是 笛卡尔积select * from dep,emp where emp.dep_id = dep.id;+------+--------------+----+-------+--------+------+--------+| id   | name         | id | name  | sex    | age  | dep_id |+------+--------------+----+-------+--------+------+--------+|  200 | 技术         |  1 | jason | male   |   18 |    200 ||  201 | 人力资源     |  2 | egon  | female |   48 |    201 ||  201 | 人力资源     |  3 | kevin | male   |   18 |    201 ||  202 | 销售         |  4 | nick  | male   |   28 |    202 ||  203 | 运营         |  5 | owen  | male   |   18 |    203 |+------+--------------+----+-------+--------+------+--------+# MySQL 考虑到使用中会经常使用拼表操作，所以提供了很多方法inner join # 内连接left join # 左连接right join # 右连接union # 全连接select * from emp inner join dep on emp.dep_id = dep.id; # 只拼接两张表中公有的数据部分select * from emp left join dep on emp.dep_id = dep.id; # 左表的所有数据展示，没有对应的填入 null+----+-------+--------+------+--------+------+--------------+| id | name  | sex    | age  | dep_id | id   | name         |+----+-------+--------+------+--------+------+--------------+|  1 | jason | male   |   18 |    200 |  200 | 技术         ||  2 | egon  | female |   48 |    201 |  201 | 人力资源     ||  3 | kevin | male   |   18 |    201 |  201 | 人力资源     ||  4 | nick  | male   |   28 |    202 |  202 | 销售         ||  5 | owen  | male   |   18 |    203 |  203 | 运营         ||  6 | jerry | female |   18 |    204 | NULL | NULL         |+----+-------+--------+------+--------+------+--------------+# right join 和 left join 类似，显示右表所有内容，没有对应数据的填入 null# union 全连接，左右两表的数据全显示insert into dep values(205, "sale");select * from emp left join dep on emp.dep_id = dep.id union select * from emp right join dep on emp.dep_id = dep.id;  +------+-------+--------+------+--------+------+--------------+| id   | name  | sex    | age  | dep_id | id   | name         |+------+-------+--------+------+--------+------+--------------+|    1 | jason | male   |   18 |    200 |  200 | 技术         ||    2 | egon  | female |   48 |    201 |  201 | 人力资源     ||    3 | kevin | male   |   18 |    201 |  201 | 人力资源     ||    4 | nick  | male   |   28 |    202 |  202 | 销售         ||    5 | owen  | male   |   18 |    203 |  203 | 运营         ||    6 | jerry | female |   18 |    204 | NULL | NULL         || NULL | NULL  | NULL   | NULL |   NULL |  205 | sale         |+------+-------+--------+------+--------+------+--------------+</code></pre><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><pre class=" language-mysql"><code class="language-mysql">"子查询就是我们平时解决问题的思路    分步骤解决问题        第一步        第二步        ...将一个查询语句的结果当作另外一个查询语句的条件去用"# 查询部门是技术或是人力资源的员工信息1. 获取部门的 id 号    select id from dep where name in ("技术", "人力资源");+------+| id   |+------+|  200 ||  201 |+------+2. 查询部门是技术或者人力资源的员工    select name from emp where dep_id in (200, 201);+-------+| name  |+-------+| jason || egon  || kevin |+-------+select name from emp where dep_id in(select id from dep where name in ("技术", "人力资源"));+-------+| name  |+-------+| jason || egon  || kevin |+-------+</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre class=" language-mysql"><code class="language-mysql">表的查询结果可以作为其他表的查询条件也可以通过起别名的方式把它作为一张虚拟表和其他表进行关联"多表查询    1. 先拼接表再查询    2. 子查询一步一步来"</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（5） -- 表与表之间的关系以及关于表的操作</title>
      <link href="/2022/11/24/mysql-shu-ju-ku-xue-xi-5-biao-yu-biao-zhi-jian-de-guan-xi-yi-ji-guan-yu-biao-de-cao-zuo/"/>
      <url>/2022/11/24/mysql-shu-ju-ku-xue-xi-5-biao-yu-biao-zhi-jian-de-guan-xi-yi-ji-guan-yu-biao-de-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h1><h2 id="表与表之间的关系"><a href="#表与表之间的关系" class="headerlink" title="表与表之间的关系"></a>表与表之间的关系</h2><p><img src="https://img-blog.csdnimg.cn/0164ed35719543d78afb5c0a7210e989.png"></p><pre class=" language-mysql"><code class="language-mysql">定义一张员工表  表中有很多字段id     name    gender     dep_name    dep_desc该表的问题    1. 该表的组织结构不是很清晰    2. 有一定浪费空间    3. 数据扩展性极差（比如说，要修改 教学部 的 dep_desc，就需要一个一个修改，如果数据过大，会浪费大量时间和资源）    # 如何优化？    （上述问题就类似于将所有的代码都写在一个 py 文件中）    将上述的员工表拆分成员工表和部门表</code></pre><p><img src="https://img-blog.csdnimg.cn/8f72c097ea1845668f0e4ccec5b60f17.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-bT0KSsTe-1654001944619)(C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220519213700591.png)]"></p><h2 id="外键-1"><a href="#外键-1" class="headerlink" title="外键"></a>外键</h2><pre class=" language-mysql"><code class="language-mysql">外键就是用来帮助我们描述表与表之间的关系的foreign key</code></pre><h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><pre class=" language-mysql"><code class="language-mysql">表与表之间最多只有四种关系    一对多关系（多对一关系也就是一对多关系）    多对多关系    一对一关系    没有关系</code></pre><h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><p><img src="https://img-blog.csdnimg.cn/1551449be5dd48729d15deec5f812313.png" alt="在这里插入图片描述"></p><pre class=" language-mysql"><code class="language-mysql">"判断表与表之间的关系换位思考，站在两张表的角度思考先站在员工表的角度    思考一条员工数据是否可以对应多条部门数据    不能！！！    （但不能直接得出结论）    站在部门表的角度    思考一条部门数据是否可以对应多条员工数据    能！！！    得出结论    员工表和部门表是单向的一对多关系    所以表关系就是一对多"# sql 语句建立表关系foreign key    一对多表关系 外键字段建在“多”的一方    在创建表的时候一定要先建被关联表    在录入数据的时候先录入被关联表    create table dep(    id int primary key auto_increment,    dep_name char(16),    dep_desc char(16));create table emp(    id int primary key auto_increment,    emp_name char(16),    emp_gender enum("male", "female", "others") default "male",    dep_id int,    foreign key(dep_id) references dep(id));insert into dep(dep_name, dep_desc)values("aoteman", "Tiga"),("alterman", "ash");insert into emp(emp_name, dep_id)values("123", 1),("456", 2);# 修改 dep 中的 id 字段update dep set id=200 where id=2; # 报错# 删除 dep delete from dep; # 报错# 真要删除和修改数据    # 1. 先删除对应的员工数据再删除部门，操作繁琐    # 2. 真正做到数据之间有关系        # 同步更新，同步删除        # 级联更新，级联删除        on update cascade # 同步更新         on delete cascade # 同步删除                create table dep(            id int primary key auto_increment,            dep_name char(8),            dep_desc char(8)        );                create table emp(            id int primary key auto_increment,            emp_name char(8),            emp_gender enum("male", "female", "other") default "male",            dep_id int,            foreign key(dep_id) references dep(id)            on update cascade # 同步更新            on delete cascade # 同步删除        );                insert into dep(dep_name, dep_desc)        values        ("aoteman", "Tiga"),        ("alterman", "ash");                insert into emp(emp_name, dep_id)        values        ("111", 1),        ("222", 2);                select * from dep;+----+----------+----------+| id | dep_name | dep_desc |+----+----------+----------+|  1 | aoteman  | Tiga     ||  2 | alterman | ash      |+----+----------+----------+                select * from emp;+----+----------+------------+--------+| id | emp_name | emp_gender | dep_id |+----+----------+------------+--------+|  1 | 111      | male       |      1 ||  2 | 222      | male       |      2 |+----+----------+------------+--------+        # 更新数据        update dep set id=200 where id=2;                select * from dep;+-----+----------+----------+| id  | dep_name | dep_desc |+-----+----------+----------+|   1 | aoteman  | Tiga     || 200 | alterman | ash      |+-----+----------+----------+                select * from emp;+----+----------+------------+--------+| id | emp_name | emp_gender | dep_id |+----+----------+------------+--------+|  1 | 111      | male       |      1 ||  2 | 222      | male       |    200 |+----+----------+------------+--------+</code></pre><h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><p><img src="https://img-blog.csdnimg.cn/fea71157d2154ab2ac847a263f4cdc75.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a22ba6830fc440d8a8a2669e46d9a1e0.png" alt="在这里插入图片描述"></p><pre class=" language-mysql"><code class="language-mysql"># 针对多对多的表关系 不能在两张原有的表中创建外键，需要单独开设一张表，专门用来存储两张表数据之间的关系create table author (    id int primary key auto_increment,    name char(8),    age int);create table book(    id int primary key auto_increment,    title char(8),    price int);create table author2book(    id int primary key auto_increment,    book_id int,    author_id int,    foreign key(book_id) references book(id)    on update cascade    on delete cascade,    foreign key(author_id) references author(id)    on update cascade    on delete cascade);</code></pre><h3 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h3><pre class=" language-mysql"><code class="language-mysql">id  name  age  phone  hobby  email如果一张表的字段特别多，每次查询又不是所有的字段可以用到，可以将表一分为二用户表    用户表        id name age    用户详情表        id addr phonr hobby email            站在用户表的角度        一个用户能否对应多个详情表？        不能！！！            站在详情表的角度        一个详情能否对应多个用户？        不能！！！        结论：        单项的一对多不成立 那么这个时候两表之间的关系就是  一对一（或者是没有关系，没有关系的情况会很好判断）        # 一对一外键字段建在任意表都可以，但建议建在查询频率较高的表里（如：用户表）create userdetail(    id int primary key auto_increment,    phone int,    addr varchar(64));create table user(    id int primary key auto_increment,    name varchar(8),    age int,    foreign key(id) references userdetail(id)    on update cascade    on delete cascade);</code></pre><h1 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h1><pre class=" language-mysql"><code class="language-mysql"># MySQL 对大小写是不敏感的（不区分大小写）# 修改表alter table 表名 rename 新表名;# 增加字段（默认在尾部添加）alter table 表名 add 字段名 字段类型（宽度） 约束条件;alter table 表名 add 字段名 字段类型（宽度） 约束条件 first;alter table 表名 add 字段名 字段类型（宽度）约束条件 after 字段名;# 删除字段alter table 表名 drop 字段名;# 修改字段alter table 表名 modify 字段名 字段类型（宽度） 约束条件;alter table 表名 change 旧字段 新字段 字段类型（宽度） 约束条件;</code></pre><h1 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h1><pre class=" language-mysql"><code class="language-mysql"># sql 语句查询的结果其实也是一张虚拟表，言外之意就是针对这个表的查询结果还可以继续用查询的语法继续操作该虚拟表# 不能复制主键，外键....复制时也可以添加条件create table 新表名 select * from 旧表名;</code></pre><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><pre class=" language-mysql"><code class="language-mysql">表与表之间如果有关系，可以有两种方式建立联系    1. 是通过外键强制建立关系        2. 就是通过 sql 语句逻辑层面上建立关系        delete from dep where id=1;        delete from emp where id=1;        即：如果要执行上面的第一个 sql 语句，那么就一定要执行第二个 sql 语句            创建外键会消耗一定的资源并且增加表与表的耦合度    在实际项目中，如果表特别多，可以不建立任何外键处理 直接通过 sql 语句</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（4） -- 常用字符字段和约束条件</title>
      <link href="/2022/11/24/mysql-shu-ju-ku-xue-xi-4-chang-yong-zi-fu-zi-duan-he-yue-shu-tiao-jian/"/>
      <url>/2022/11/24/mysql-shu-ju-ku-xue-xi-4-chang-yong-zi-fu-zi-duan-he-yue-shu-tiao-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="创建表的完整语法"><a href="#创建表的完整语法" class="headerlink" title="创建表的完整语法"></a>创建表的完整语法</h1><pre class=" language-mysql"><code class="language-mysql"># 语法create table 表名 (    字段名1  类型（宽度） 约束条件,     字段名2  类型（宽度） 约束条件,     字段名3  类型（宽度） 约束条件)# 注意1. 在同一张表中字段名不能重复2. 宽度和字段约束条件可写可不写，但字段类型是必须的，约束条件可以写多个3. 最后一行不能有逗号# 宽度    一般情况下指的是对存储数据的限制    create table t1(name char); # 默认宽度为1    insert into t1 value("aoteman"); # 报错    insert into t1 value(Null); # 关键词 null        针对不同版本会出现不同的结果        5.6 版本默认没有开启严格模式，规定只能存一个字符串你给了多个字符串，不会报错，而是自动截取并存入。        5.7 及以上版本默认开启严格模式，超过规定的字符串长度，就会报错        # 约束条件 Null    not null 该字段不能为空create table t1(    id int not null,    name char(8) not null);    # 宽度和约束条件    宽度是用来限制数据的存储    约束条件是在宽度的基础上增加的额外的约束</code></pre><h1 id="整型字段"><a href="#整型字段" class="headerlink" title="整型字段"></a>整型字段</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>tinyint       </li><li>samllint        </li><li>meduimint        </li><li>bigint</li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>存储年龄、等级、id、号码等</p><p><img src="https://img-blog.csdnimg.cn/b18ba9c11299463991ab5f5637092189.png"></p><pre class=" language-mysql"><code class="language-mysql">是否有符号    默认情况下是带符号的（即有政府）超出会如何    非严格模式下超出限制只存储最大可接受值，严格模式下报错    create table t1(id tinyint);insert into t9 values(-129),(256); # 严格模式下报错# 约束条件 unsigned 无正负符号create table t1(id tinyint unsigned);# 整型默认情况下都是带正负号的# 针对整型括号内 宽度 的作用create table t1(id int(8));insert into t1 values(123456789); # 不报错# 只有在 整型括号内的宽度的数字限制的不是表示位数而是长度create table t1(id int(8));如果数字没有出超出 8 位，用 空格 填充至 8 位如果超出了 8 位，有几位就存几位（但是还是遵循最大范围）</code></pre><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><pre class=" language-mysql"><code class="language-mysql"># 查看严格模式show variables like "%mode";# 模糊匹配/查询关键词 like匹配任意多个字符 %匹配任意单个字符 _# 修改严格模式set session; # 只在当前窗口有效set global; # 全局有效set global sql_mode = 'STRICT_TRANS_TABLES';# 修改完，重启服务端就行</code></pre><h1 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h1><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><ul><li>float         </li><li>double         </li><li>decimal</li></ul><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>身高、体重、薪资<br><img src="https://img-blog.csdnimg.cn/f186c7b3be9042e3a7d9aca4d302a944.png"></p><pre class=" language-mysql"><code class="language-mysql"># 存储限制float(255,30) # 总共 255 位，小数占 35 位double(255, 30)decimal(65, 30)# 精确度不同create table t1(    id float(255, 30),     id2 double(255, 30),    id3 decimal(65, 30));insert into t1 values(1.111111111111111111111111111111, 1.111111111111111111111111111111, 1.111111111111111111111111111111);select * from t1\G;*************************** 1. row *************************** id: 1.111111164093017600000000000000id2: 1.111111111111111200000000000000id3: 1.111111111111111111111111111111# 精度 float < double < decimal# 结合实际场景，三者都可以使用</code></pre><h1 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h1><h2 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h2><ul><li>date: 年月日</li><li>datetime: 年月日时分秒</li><li>time: 时分秒</li><li>year: 年份</li></ul><pre class=" language-python"><code class="language-python">create table student<span class="token punctuation">(</span>    id int<span class="token punctuation">,</span>    name varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    born year<span class="token punctuation">,</span>    birth date<span class="token punctuation">,</span>    study_time time<span class="token punctuation">,</span>    reg_time datetime<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="枚举和集合类型"><a href="#枚举和集合类型" class="headerlink" title="枚举和集合类型"></a>枚举和集合类型</h1><h2 id="分类-3"><a href="#分类-3" class="headerlink" title="分类"></a>分类</h2><pre class=" language-mysql"><code class="language-mysql">枚举（enum） 多选一集合（set）  多选多</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class=" language-mysql"><code class="language-mysql">create table user(    id int,    name char(16),    gender enum("male", "famale", "other"));insert into user values(1, "aoteman", "other");# 枚举字段 在存数据的时候只能从枚举里面选择一个存储create table teacher(    id int,    name char(16),    gender enum("male", "female", "other"),    hobby set("read", "run", "play"));insert into teacher values(1, "aoteman", "other", "reaad,run,play");# 集合可以只写一个，不能写没有列举</code></pre><h1 id="部分约束条件"><a href="#部分约束条件" class="headerlink" title="部分约束条件"></a>部分约束条件</h1><h2 id="default-默认值"><a href="#default-默认值" class="headerlink" title="default 默认值"></a>default 默认值</h2><pre class=" language-mysql"><code class="language-mysql"># 补充：插入数据的时候可以指定字段create table t1(    id int,    name char(16),    gender enum("male", "female", "other") default "male");insert into t1(id, name) values(1, "aoteman");selelct * from t1;+------+---------+--------+| id   | name    | gender |+------+---------+--------+|    1 | aoteman | male   |+------+---------+--------+</code></pre><h2 id="unique-唯一"><a href="#unique-唯一" class="headerlink" title="unique 唯一"></a>unique 唯一</h2><pre class=" language-mysql"><code class="language-mysql"># 单列唯一create table t1(    id int unique,    name varchar(16));insert into table (id, name) values(1, "aoteman"), (1, "alterman"); # 报错insert into table (id, name) values(1, "aoteman"), (2, "alterman");# 联合唯一举例：ip 和 port，单个可以重复，但加在一起是唯一的create table t1(    id int,    ip char(16),    post int,    unique (ip, post));insert into t4 values(1, "127.0.0.1", 8080);insert into t4 values(2, "127.0.0.1", 8081);insert into t4 values(3, "127.0.0.1", 8082);insert into t4 values(4, "127.0.0.1", 8080); # 报错</code></pre><h2 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h2><pre class=" language-mysql"><code class="language-mysql"># 单从约束效果上来看，primary key 相当于 not null + unique（非空且唯一）create table t1(    id int primary key);insert into t1 values(null); # 报错insert into t1 values(1), (1); # 报错insert into t1 values(1), (2);# 除了有约束条件外，它还是 innodb 存储引擎组织数据的依据，即 innodb 存储引擎在创建表时必须要有 primary key -- 类似于书的目录，能够帮助提升查询效率并且也是建表的依据# 1. 一张表中有且只有一个主键 如果没有设置主键那么会从上往下搜索直到遇到一个非空且唯一的字段将它自动升级成主键create table t1(    id int,    name char(16),    age int not null unique,    addr char(32) not null unique);describe t1;+-------+----------+------+-----+---------+-------+| Field | Type     | Null | Key | Default | Extra |+-------+----------+------+-----+---------+-------+| id    | int(11)  | YES  |     | NULL    |       || name  | char(16) | YES  |     | NULL    |       || age   | int(11)  | NO   | PRI | NULL    |       || addr  | char(32) | NO   | UNI | NULL    |       |+-------+----------+------+-----+---------+-------+这时候 主键 是 age# 2. 如果表中没有主键也没有任何的非空且唯一的字段，那么 innodb 会采用自己内部提供的一个隐藏字段作为主键，隐藏意味着无法使用到它，也无法提升查询速度# 联合字段主键（多个字段联合起来作为主键 本质还是一个主键）create table t1(    id int,    ip varchar(16),    port int,    primary key(ip, port));# 以后创建表的时候一定要加 primary key</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（3） -- 基本 SQL 语句</title>
      <link href="/2022/11/24/mysql-shu-ju-ku-xue-xi-3-ji-ben-sql-yu-ju/"/>
      <url>/2022/11/24/mysql-shu-ju-ku-xue-xi-3-ji-ben-sql-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="库（文件夹）的增删查改"><a href="#库（文件夹）的增删查改" class="headerlink" title="库（文件夹）的增删查改"></a>库（文件夹）的增删查改</h1><pre class=" language-mysql"><code class="language-mysql"># 增create database 库名;create database 库名 charst="gbk";# 查show databases;show create database 表名; # 查单个库# 改alter database 库名 charset = "utf-8";# 删drop database 库名; </code></pre><p><img src="https://img-blog.csdnimg.cn/54a9e3e09f424841ab585bcd3551ff40.gif"></p><h1 id="表（文件）的增删查改（非完整版）"><a href="#表（文件）的增删查改（非完整版）" class="headerlink" title="表（文件）的增删查改（非完整版）"></a>表（文件）的增删查改（非完整版）</h1><pre class=" language-mysql"><code class="language-mysql"># 在操作表（文件）的时候要指定所在的库（文件夹）# 查看当前所在的 库select database();# 切换库use 库名;# 增create table 表名 (id int, name char(64));create table db2.t2(id int); # 也可以用绝对路径的形式操作# 查show table 表名;show create table 表名;describe 表名;desc 表名; # 简写# 改alter table 表名 modify name varchar(16);# 删drop table 表名;</code></pre><p><img src="https://img-blog.csdnimg.cn/d7313b706ebf4e3d943a751af349aca0.gif"></p><h1 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h1><pre class=" language-mysql"><code class="language-mysql"># 一定要有库，有表才能创建数据# 增insert into 表名 values("", ""); # into 可以省略，但因为语句连贯，一般习惯上不省略insert into 表名 values("", ""), ("", ""), ("", "") # 可以一次性插入多条数据# 查select * from 表名; # 查找表中所有数据，数量大是不建议使用select id from 表名;# 改update 表名 set name = "" where id = 1; # where 相当于 python 中的 if 条件# 删delete from 表名; # 清空数据delete from 表名 where id = 1; # 删除 id 为 1 的数据</code></pre><p><img src="https://img-blog.csdnimg.cn/e0f3528981f14c928d818ea1414e5701.gif"></p><h1 id="MySQL主要存储引擎"><a href="#MySQL主要存储引擎" class="headerlink" title="MySQL主要存储引擎"></a>MySQL主要存储引擎</h1><p>日常生活中文件格式有很多种，并且针对不同的文件格式会有对应不同存储方式和处理机制（txt，pdf, word, mp4）</p><p>针对不同的数据应该有对应的不同的处理机制来存储</p><p><strong>存储引擎就是不同的处理机制</strong></p><ul><li><p>innodb</p><p>是 5.5 版本之后默认的存储引擎</p><p>存储数据更加安全</p></li><li><p>myisam</p><p>是 5.5 版本之前默认的存储引擎</p><p>速度快，但安全性不如 innodb</p></li><li><p>memory</p><p>内存引擎（数据全部存放在内存中，断电数据丢失）</p></li><li><p>blackhole</p><p>无论存什么，都立刻消失（黑洞）</p><pre class=" language-mysql"><code class="language-mysql"># 查看所有的存储引擎show engines;# 创建表时可以指定存储引擎（一般不用）create table t1(id int) engine=innodb;</code></pre><p><img src="https://img-blog.csdnimg.cn/bc0f224a19c046bd9653e763fb4ec876.gif"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（2） -- MySQL 配置及 sql 语句初识</title>
      <link href="/2022/11/24/mysql-shu-ju-ku-xue-xi-2-mysql-pei-zhi-ji-sql-yu-ju-chu-shi/"/>
      <url>/2022/11/24/mysql-shu-ju-ku-xue-xi-2-mysql-pei-zhi-ji-sql-yu-ju-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h1><pre class=" language-python"><code class="language-python">在前面的提到的启动过程中，我们难免会感到麻烦——需要切换到相应的文件；需要打开两个 cmd 窗口<span class="token comment" spellcheck="true"># 这时候我们可以选择将 mysql 所在的文件夹路径添加到 环境变量，这样启动时就不要切换路径</span></code></pre><h1 id="系统服务"><a href="#系统服务" class="headerlink" title="系统服务"></a>系统服务</h1><pre class=" language-python"><code class="language-python">我们发现添加环境变量后也挺麻烦的，因为还是需要一次打开两个 cmd 窗口。那么有没有更简单的方法呢？<span class="token comment" spellcheck="true"># 这时候我们将 mysqld 制作成系统服务(开机自启动)</span><span class="token triple-quoted-string string">"""步骤：    管理员身份运行 cmd 窗口，并输入        mysqld --install    然后打开 任务管理器查看服务，如下图"""</span></code></pre><p><img src="https://img-blog.csdnimg.cn/466886e6f2d944cd8936aa0c3a1a202a.png"></p><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><pre class=" language-python"><code class="language-python">前面我们在启动 MySQL 客户端时发现无需密码就可以登录，显然这是不安全的，所以我们应该如何修改密码呢？<span class="token comment" spellcheck="true"># 在 终端输入以下语句 即可</span><span class="token comment" spellcheck="true"># mysqladmin -uroot -p原密码 password新密码</span></code></pre><h1 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h1><p>设置密码了之后最重要的就是如果忘记密码怎么办？</p><p>你可以将 mysql 获取用户名和密码校验的功能看成是一个装饰器，装饰在了客户端请求访问的功能上</p><p>我们如果将该装饰器移除，那么mysql服务端就不会校验用户名和密码了。</p><p>具体步骤：</p><pre class=" language-mysql"><code class="language-mysql">1. 先关闭当前 mysql 服务器(mysqld)    命令行方式启动（跳过用户名密码验证功能）    mysqld --skip-grant-tables    2. 直接以无密码的方式登录3. 修改当前用户的密码    update mysql.user set password=password（123456）where user=root and host="localhost";        真正存储用户的密码字段 存储的肯定是密文，密码比对也只能比对密文    4. 立刻将修改数据刷到硬盘    flush privileges;    5. 关闭当前服务器，然后以正常流程登录</code></pre><h1 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h1><p>MySQL 默认的配置文件为 .ini 文件</p><p>—— <strong>程序启动会先加载配置文件之后才真正启动</strong></p><pre class=" language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span> # 一旦服务端启动立刻加载下面的配置<span class="token selector">[mysql]</span> # 一旦客户端启动立刻加载下面的配置<span class="token selector">[client]</span> # 其他客户端# 需要自己新建一个 my.ini 文件，也可以将用户名和密码直接写入配置文件，这样登陆时就不用输入密码和用户名了# 修改配置文件后一定要重启服务器才能生效# 具体写什么，可以直接百度，因为我也是百度的，就不复制了</code></pre><h1 id="sql-语句初识"><a href="#sql-语句初识" class="headerlink" title="sql 语句初识"></a>sql 语句初识</h1><pre class=" language-mysql"><code class="language-mysql"># MySQL 中的 sql 语句是以分号作为结束的标志show databases; -- 查看所有的库名连接服务端的命令可以简写    mysql -uroot -p取消命令    错误命令 \c    退出客户端，加不加分号都可以执行    quit    exit</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（1）-- 初识数据库</title>
      <link href="/2022/11/22/mysql-shu-ju-ku-xue-xi-1-chu-shi-shu-ju-ku/"/>
      <url>/2022/11/22/mysql-shu-ju-ku-xue-xi-1-chu-shi-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="01-初识数据库"><a href="#01-初识数据库" class="headerlink" title="01-初识数据库"></a>01-初识数据库</h1><h2 id="存储数据的演变流程"><a href="#存储数据的演变流程" class="headerlink" title="存储数据的演变流程"></a>存储数据的演变流程</h2><p>目前所知并且我们能够实现的存储数据的方式有两种，一种是将数据存储到文件中（txt 文件或是 excel 文件），一种是类似于软件开发目录的情况，将数据保存到固定的文件夹位置，但实际上这两种存储方式存在一定的弊端。</p><h3 id="存储至文件的问题"><a href="#存储至文件的问题" class="headerlink" title="存储至文件的问题"></a>存储至文件的问题</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""将数据存储到随机的文件中，由于缺少标准，会造成存储数据时文件内容的千差万别，甚至影响他人对于该存储文件的使用和阅读"""</span></code></pre><h3 id="软件开发目录规范的问题"><a href="#软件开发目录规范的问题" class="headerlink" title="软件开发目录规范的问题"></a>软件开发目录规范的问题</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""bin     -- 启动文件conf    -- 配置文件core    -- 后端核心代码log     -- 日志文件lib     -- 公共方法db      -- 数据readme  -- 使用说明"""</span>软件开发规范目录虽然限制了存储数据的具体位置，但这样的数据只存储在本机中，就像是没有云存档的单机游戏一样，他人想要访问比较困难，或者说需要使用自己的电脑才能访问。</code></pre><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>对于文件存储标准不统一和软件开发目录多人操作困难的问题，提出了<strong>将数据按一种格式同意保存，并且允许所有人在同一个地方操作数据</strong>的解决方案——这也就是数据库的作用。</p><h2 id="数据库的本质"><a href="#数据库的本质" class="headerlink" title="数据库的本质"></a>数据库的本质</h2><p>数据库的<strong>本质就是一款与网络通信的应用程序</strong>——用户输入命令，和数据，服务端接收命令和数据，并根据命令在服务端实现对数据的操作。</p><h2 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h2><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""关系型数据库    MySQL，oracle，db2，access，sql server非关系型数据库    redis，mongdb，mencache"""</span><span class="token comment" spellcheck="true"># 关系型</span>    <span class="token number">1</span><span class="token punctuation">.</span> 数据之间批次有关系或者约束    <span class="token number">2</span><span class="token punctuation">.</span> 存储数据的表现形式通常是以表格存储。每个字段还会有存储类型的限制，比如说姓名只能存在字符串    <span class="token comment" spellcheck="true"># 非关系型</span>    <span class="token number">1</span><span class="token punctuation">.</span> 存储数据通常是以 k<span class="token punctuation">,</span>v 键值对的形式存储</code></pre><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""人格基于网络通信的应用程序底层都是 socket- 服务端    - 基于 socket 实现通信    - 收发消息    - 客户端    - 基于socket 实现通信    - 收发消息"""</span>MySQL 不单支持 MySQL 自己的客户端 app 还支持 其他变成语言来充当客户端操作，同时为了解决不同语言充当客户端操作的沟通障碍，<span class="token comment" spellcheck="true"># MySQL 采用统一的语言（SQL 语言）</span></code></pre><h3 id="MySQL重要概念"><a href="#MySQL重要概念" class="headerlink" title="MySQL重要概念"></a>MySQL重要概念</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""库 --- 相当于 文件夹表 --- 相当于 文件记录 --- 相当于 文件内一行行的数据表头 --- 表格的第一行字段表单 --- 表头外的数据"""</span></code></pre><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><p>官网安装：<a href="https://www.mysql.com/">MySQL</a></p><h3 id="MySQL服务端和客户端"><a href="#MySQL服务端和客户端" class="headerlink" title="MySQL服务端和客户端"></a>MySQL服务端和客户端</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""服务端mysqld.exe客户端mysql.exe"""</span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""在前期配置MySQL的时候尽量在 cmd 终端以管理员的身份运行window+r 进入的是普通用户终端，有一些命令无法执行搜索 cmd 右键，以管理员身份运行"""</span></code></pre><p><img src="https://img-blog.csdnimg.cn/19dd4f3faea94b84853add538798c168.gif"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul><li>管理员运行cmd，先切换到 mysql 所在的 bin 目录下，然后输入 mysqld 启动 服务端 即可</li><li>然后保留原来的 cmd 窗口，重新打开一个</li></ul><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""常见软件的默认端口号    MySQL  3306    redis  6379    mongodb 27017    django  8000    flask   5000    ...    MySQL 第一次以管理员身份进入是没有密码的，直接回车即可进入相关目录 mysql -h 127.0.0.1 -P 3306 -uroot -p"""</span></code></pre><h3 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h3><p><img src="https://img-blog.csdnimg.cn/74daeb80df884f1c9fe55b34f0a58f24.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySql 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易界面爬虫小项目</title>
      <link href="/2022/11/22/jian-yi-jie-mian-pa-chong-xiao-xiang-mu/"/>
      <url>/2022/11/22/jian-yi-jie-mian-pa-chong-xiao-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><p><img src="https://img-blog.csdnimg.cn/6c4bfebab4934237ab85352a751b1ece.png"></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>本来是要再做一个界面在运行时显示正在爬取哪个内容</li><li>log 文件本来是要做一个日志文件，不过其实是单机版本其实好像没什么必要（实际上是嫌太麻烦了）</li></ol><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><h2 id="lib-文件夹下-main-py-文件"><a href="#lib-文件夹下-main-py-文件" class="headerlink" title="lib 文件夹下 main.py 文件 "></a><code>lib 文件夹下 main.py 文件 </code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>syspath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 添加到环境变量</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> bin<span class="token punctuation">.</span>JingDongProject <span class="token keyword">import</span> jing_dong_project    jing_dong_project<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="bin-文件夹下-JingDongProject-py-文件"><a href="#bin-文件夹下-JingDongProject-py-文件" class="headerlink" title="bin 文件夹下 JingDongProject.py 文件"></a><code>bin 文件夹下 JingDongProject.py 文件</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">from</span> core<span class="token punctuation">.</span>UI<span class="token punctuation">.</span>Start <span class="token keyword">import</span> Ui_Dialog<span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span>Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 实例化初始界面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setup_ui</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">jing_dong_project</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        window <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="core-文件夹下-Spider-文件夹下-spider-py-文件"><a href="#core-文件夹下-Spider-文件夹下-spider-py-文件" class="headerlink" title="core 文件夹下 Spider 文件夹下 spider.py 文件"></a><code>core 文件夹下 Spider 文件夹下 spider.py 文件</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>edge<span class="token punctuation">.</span>EdgeOptions <span class="token keyword">import</span> EdgeOptions<span class="token keyword">from</span> conf <span class="token keyword">import</span> Settings<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Spider</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> goods_name<span class="token punctuation">,</span> paixu<span class="token punctuation">,</span> goods_page<span class="token punctuation">,</span> comment_page<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> goods_name        self<span class="token punctuation">.</span>paixu <span class="token operator">=</span> paixu        self<span class="token punctuation">.</span>goods_page <span class="token operator">=</span> goods_page        self<span class="token punctuation">.</span>comment_page <span class="token operator">=</span> comment_page        self<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>start_web<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>search_goods<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Paixu<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>goods_message<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start_web</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化浏览器"""</span>        <span class="token comment" spellcheck="true"># 1.创建Edge浏览器对象，这会在电脑上在打开一个浏览器窗口</span>        options <span class="token operator">=</span> EdgeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>        options<span class="token punctuation">.</span>add_arguments<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token string">"--headless"</span><span class="token punctuation">,</span> r<span class="token string">"--disable-gpu"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 无头浏览器</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>capabilities<span class="token operator">=</span>options<span class="token punctuation">.</span>to_capabilities<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.driver = webdriver.Edge()</span>        <span class="token comment" spellcheck="true"># 2.通过浏览器向服务器发送URL请求</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">page_read</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""网页源码解析"""</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source        <span class="token comment" spellcheck="true"># xpath 解析</span>        self<span class="token punctuation">.</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">search_goods</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""输入商品名称，并点击搜索"""</span>        name_input <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>        name_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击搜索</span>        click <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search"]/div/div[2]/button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> click<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">goods_message</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取商品信息"""</span>        <span class="token triple-quoted-string string">"""        商品页翻页循环            每次循环获取商品价格、名称等信息（这也是一个循环，因为一页有多个商品）                获取一个商品信息后（即一个循环后）                    进入商品详情页获取评论，评论翻页也需要循环        """</span>        <span class="token comment" spellcheck="true"># 排序方式</span>        page <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> page <span class="token operator">&lt;=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_page<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 滚动加载该页面所有信息</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>            sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>goods_price_name<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>            page_list_length <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[1]/a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 页数条的长度，最后一个是下一页</span>            <span class="token comment" spellcheck="true"># 点击下一页</span>            next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[1]/a[{}]'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>page_list_length<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> next_page<span class="token punctuation">)</span>            page <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">goods_price_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""爬取商品信息"""</span>        <span class="token comment" spellcheck="true"># 获取商品价格</span>        self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取该页商品数量</span>        count <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> count <span class="token operator">&lt;=</span> length<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[3]/strong/i/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>goods_price <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[3]/strong/i/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[2]/strong/i/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>goods_price <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[2]/strong/i/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_price<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取商品名称</span>            <span class="token comment" spellcheck="true"># //*[@id="J_goodsList"]/ul/li[1]/div/div[4]/a/em</span>            <span class="token comment" spellcheck="true"># //*[@id="J_goodsList"]/ul/li[1]/div/div[3]/a/em</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[4]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[4]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[3]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[3]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>            num <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>goods_name<span class="token punctuation">:</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                num <span class="token operator">+=</span> i            self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> num            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 进入商品详情页面</span>            xpath <span class="token operator">=</span> <span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[1]/a'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span>            good_detail <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> good_detail<span class="token punctuation">)</span>            sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>comment<span class="token punctuation">(</span><span class="token punctuation">)</span>            count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">comment</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取商品评论</span>        self<span class="token punctuation">.</span>new_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 滑到底部，等待评论加载完成</span>        comment_box <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="detail"]/div[1]/ul/li[5]'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> comment_box<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>comment_page<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[@class="comment-item"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 评论过少或没有评论，直接退出循环</span>                <span class="token keyword">break</span>            comment_counter <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[@class="comment-item"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">while</span> count <span class="token operator">&lt;=</span> comment_counter<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>content<span class="token punctuation">(</span>count<span class="token punctuation">)</span>                count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 点击下一页</span>            page_list_length <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 页数条的长度，最后一个是下一页</span>            <span class="token comment" spellcheck="true"># 点击下一页</span>            <span class="token keyword">if</span> page_list_length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>                    <span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a[{}]'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>page_list_length<span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> next_page<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>close_window<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        self<span class="token punctuation">.</span>close_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">new_window</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取窗口,返回为一个列表</span>        handles <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>window_handles        <span class="token comment" spellcheck="true"># 最后一个是新打开的窗口，跳转到这个窗口</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">close_window</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 关闭新打开的窗口</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        handles <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>window_handles        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        self<span class="token punctuation">.</span>page_read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用户名</span>        username <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[1]/div[1]/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 是否是会员</span>        huiyuan <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[1]/div[2]/a/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>huiyuan<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            huiyuan <span class="token operator">=</span> <span class="token string">"None"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            huiyuan <span class="token operator">=</span> huiyuan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 评价内容</span>        content <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[2]/p/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 星级</span>        star <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[2]/div[1]/@class'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(star)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>DOWNLOAD_PATH<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>goods_price <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> huiyuan <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> star <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Paixu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"综合"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"销量"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token string">"评论数"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token string">"新品"</span><span class="token punctuation">:</span> <span class="token number">4</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>paixu<span class="token punctuation">)</span>        xpath <span class="token operator">=</span> <span class="token string">'//*[@id="J_filter"]/div[1]/div[1]/a[{}]'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        sales_count <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> sales_count<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>SLEEP_TIME<span class="token punctuation">)</span></code></pre><h2 id="UI-文件夹下-Start-py-文件"><a href="#UI-文件夹下-Start-py-文件" class="headerlink" title="UI 文件夹下 Start.py 文件"></a><code>UI 文件夹下 Start.py 文件</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">421</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_select<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用户选择界面</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:22pt; font-weight:600;\">\u5546\u54c1\u8bc4\u8bba\u722c\u53d6&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u5f00\u59cb\u4f7f\u7528"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">user_select</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> core<span class="token punctuation">.</span>UI<span class="token punctuation">.</span>User_Select <span class="token keyword">import</span> user_selelct_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> user_selelct_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="UI-文件夹下-User-Select-py"><a href="#UI-文件夹下-User-Select-py" class="headerlink" title="UI 文件夹下 User_Select.py"></a><code>UI 文件夹下 User_Select.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">619</span><span class="token punctuation">,</span> <span class="token number">464</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">490</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>run<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">391</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2 <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">271</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox <span class="token operator">=</span> QComboBox<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"comboBox"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_3"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_3 <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit_3"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">341</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"label_4"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_4 <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_4<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit_4"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_4<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">390</span><span class="token punctuation">,</span> <span class="token number">341</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u5f00\u59cb\u722c\u53d6"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:24pt; font-weight:600;\">\u5546\u54c1\u8bc4\u8bba\u722c\u53d6&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8981\u722c\u53d6\u7684\u5546\u54c1\u540d\u79f0"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u9009\u62e9\u9875\u9762\u6392\u5e8f\u65b9\u5f0f"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setItemText<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u7efc\u5408"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setItemText<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u9500\u91cf"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setItemText<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8bc4\u8bba\u6570"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>setItemText<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u65b0\u54c1"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8981\u722c\u53d6\u7684\u5546\u54c1\u9875\u6570"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\u6700\u597d\u4fdd\u8bc1\u8be5\u5546\u54c1\u9875\u6570 \u5927\u4e8e\u7b49\u4e8e \u586b\u5199\u7684\u9875\u6570&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"\u8981\u722c\u53d6\u7684\u5546\u54c1\u8bc4\u8bba\u6570\u9875\u6570"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_4<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\u6700\u597d\u4fdd\u8bc1\u8be5\u5546\u54c1\u9875\u6570 \u5927\u4e8e\u7b49\u4e8e \u586b\u5199\u7684\u9875\u6570&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要爬取的商品名称</span>        paixu <span class="token operator">=</span> self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>currentText<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 页面商品的排序方式</span>        good_page <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要爬取的商品页数</span>        comment_page <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit_4<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要爬取的商品评论数页数</span>        <span class="token keyword">from</span> core<span class="token punctuation">.</span>UI<span class="token punctuation">.</span>Wait <span class="token keyword">import</span> user_wait_window        self<span class="token punctuation">.</span>window <span class="token operator">=</span> user_wait_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">from</span> core<span class="token punctuation">.</span>Spider<span class="token punctuation">.</span>spider <span class="token keyword">import</span> Spider        Spider<span class="token punctuation">(</span>name<span class="token punctuation">,</span> paixu<span class="token punctuation">,</span> good_page<span class="token punctuation">,</span> comment_page<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">user_selelct_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开用户选择页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h2 id="UI-文件夹下的-Wait-py"><a href="#UI-文件夹下的-Wait-py" class="headerlink" title="UI 文件夹下的 Wait.py "></a><code>UI 文件夹下的 Wait.py </code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 导入PyQt5部件</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span>QLabel<span class="token punctuation">,</span>QTableWidgetItem<span class="token punctuation">,</span>QPushButton<span class="token punctuation">,</span>QLineEdit<span class="token punctuation">,</span>QGridLayout<span class="token punctuation">,</span>QWidget<span class="token punctuation">,</span>QTableWidget<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> Dialog<span class="token punctuation">.</span>objectName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">614</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2 <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span>u<span class="token string">"textEdit_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setupUi</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"Dialog"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setHtml<span class="token punctuation">(</span>QCoreApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> u<span class="token string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"</span><span class="token string">"&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">\n"</span><span class="token string">"p, li { white-space: pre-wrap; }\n"</span><span class="token string">"&lt;/style>&lt;/head>&lt;body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"</span><span class="token string">"&lt;p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&lt;span style=\" font-size:22pt; font-weight:600;\">\u6b63\u5728\u722c\u53d6\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85&lt;/span>&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retranslateUi</span><span class="token keyword">class</span> <span class="token class-name">user_wait_window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开等待页面</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><h2 id="conf-文件夹下的-Settings-py"><a href="#conf-文件夹下的-Settings-py" class="headerlink" title="conf 文件夹下的 Settings.py"></a><code>conf 文件夹下的 Settings.py</code></h2><pre class=" language-python"><code class="language-python">URL <span class="token operator">=</span> <span class="token string">"https://www.jd.com/"</span><span class="token comment" spellcheck="true"># URL = "https://search.jd.com/Search?keyword=%E8%A1%80%E6%BA%90&amp;wq=%E8%A1%80%E6%BA%90&amp;pvid=068dc4b95f284265bec11485d5d227ab&amp;page=9&amp;s=241&amp;click=0"</span>SLEEP_TIME <span class="token operator">=</span> <span class="token number">5</span>DOWNLOAD_PATH <span class="token operator">=</span> r<span class="token string">'C:\Users\ASUS\Desktop\code\pyqt5_JingDong\download\download.txt'</span>EXCEL_PATH <span class="token operator">=</span> <span class="token string">"C:\Users\ASUS\Desktop\code\pyqt5_JingDong\download\data.xls"</span></code></pre><h2 id="download-文件夹下的-ToExcel-py-文件"><a href="#download-文件夹下的-ToExcel-py-文件" class="headerlink" title="download 文件夹下的 ToExcel.py 文件"></a><code>download 文件夹下的 ToExcel.py 文件</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>syspath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> conf<span class="token punctuation">.</span>Settings <span class="token keyword">import</span> DOWNLOAD_PATH<span class="token punctuation">,</span>EXCEL_PATH    <span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook    book <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>active    title <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"goods_name"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"huiyuan"</span><span class="token punctuation">,</span> <span class="token string">"star"</span><span class="token punctuation">,</span> <span class="token string">"comment content"</span><span class="token punctuation">)</span>    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>DOWNLOAD_PATH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>DOWNLOAD_PATH<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                line_list <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># self.goods_name + | + price + "|" + username + "|" + huiyuan + "|" + star + "|" + content</span>                sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line_list<span class="token punctuation">)</span>        book<span class="token punctuation">.</span>save<span class="token punctuation">(</span>EXCEL_PATH<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"can't find the DOANLOAD file!!!"</span><span class="token punctuation">)</span></code></pre><h1 id="运行演示"><a href="#运行演示" class="headerlink" title="运行演示"></a>运行演示</h1><p><img src="https://img-blog.csdnimg.cn/e4b2607cb07341888663897463453f7e.gif"><br><img src="https://img-blog.csdnimg.cn/bfda9eb25f1f4445ad14c1d2764deae1.gif"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>代码已经上传至 github 项目<br><a href="https://github.com/New-Ass/JingDongSpider/tree/master">JingDongSpider</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫小项目 —— 京东商品评价内容爬取</title>
      <link href="/2022/11/22/pa-chong-xiao-xiang-mu-jing-dong-shang-pin-ping-jie-nei-rong-pa-qu/"/>
      <url>/2022/11/22/pa-chong-xiao-xiang-mu-jing-dong-shang-pin-ping-jie-nei-rong-pa-qu/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫小项目-——-京东商品评价内容爬取"><a href="#爬虫小项目-——-京东商品评价内容爬取" class="headerlink" title="爬虫小项目 —— 京东商品评价内容爬取"></a>爬虫小项目 —— 京东商品评价内容爬取</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>会写这么一个类似“小项目”的程序是因为在前年（去年？）的时候，一位老师需要用爬虫爬取京东某类商品的用户评论数据——不知道为什么会找学生写这种程序，淘宝找一个或许都比我靠谱吧？<br>虽然我最后写出了一个勉强可运行的程序，也爬取到了一些评论数据，但我一直认为那位老师只是不知道怎么说我写的东西不行，毕竟在隔了一两年的今天我再看这段代码，其实写的很差，封装性基本没有，适应性差的要命，所以我才会突然说再写一遍，但当然结果也就是比之前的代码好上一点。</p><h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><h3 id="前提准备-1"><a href="#前提准备-1" class="headerlink" title="前提准备"></a><code>前提准备</code></h3><p><strong>注意</strong>：因为谷歌浏览器的升级以及驱动器相关版本不对应，所以使用的是 edge 浏览器的 自动测试，并且使用无头浏览器，但是其实 <code>selenium.webdriver.edge.EdgeOptions</code>中并没有<code>EdgeOptions</code>模块，所以需要自己写，这是我百度使用的代码<br>我电脑的文件目录如下：<code>C:\Users\ASUS\AppData\Local\Programs\Python\Python39\Lib\site-packages\selenium\webdriver\edge</code><br><img src="https://img-blog.csdnimg.cn/e37f77c50a714b16ae1a0f3ca0d1bcc7.png"><br>文件代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>desired_capabilities <span class="token keyword">import</span> DesiredCapabilities<span class="token keyword">class</span> <span class="token class-name">EdgeOptions</span><span class="token punctuation">:</span>    KEY <span class="token operator">=</span> <span class="token string">"ms:edgeOptions"</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_arguments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>_experimental_options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>_caps <span class="token operator">=</span> DesiredCapabilities<span class="token punctuation">.</span>EDGE<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">arguments</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_arguments    @property    <span class="token keyword">def</span> <span class="token function">experimental_options</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_experimental_options    <span class="token keyword">def</span> <span class="token function">add_argument</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> argument<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        添加浏览器参数        :param argument: 启动参数        """</span>        <span class="token keyword">if</span> argument<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>_is_infobars<span class="token punctuation">(</span>argument<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_enable_infobars<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_arguments<span class="token punctuation">.</span>append<span class="token punctuation">(</span>argument<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"argument参数不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_arguments</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> list <span class="token operator">or</span> tuple<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        同时添加多个浏览器参数        :param arguments: 启动参数集        """</span>        <span class="token keyword">if</span> arguments<span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> arg <span class="token keyword">in</span> arguments<span class="token punctuation">:</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_is_infobars<span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>_enable_infobars<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>_arguments<span class="token punctuation">.</span>append<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"argument参数不能为空"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">_is_infobars</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> string <span class="token operator">==</span> <span class="token string">"--disable-infobars"</span>    <span class="token keyword">def</span> <span class="token function">_enable_infobars</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        启用'禁用浏览器正在被自动化程序控制的提示'启动参数        """</span>        self<span class="token punctuation">.</span>_experimental_options<span class="token punctuation">[</span><span class="token string">"excludeSwitches"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"enable-automation"</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">to_capabilities</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        使用已设置的所有选项创建功能        :return: 返回包含所有内容的字典        """</span>        caps <span class="token operator">=</span> self<span class="token punctuation">.</span>_caps        edge_options <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"extensions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"args"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>arguments        <span class="token punctuation">}</span>        edge_options<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>experimental_options<span class="token punctuation">)</span>        caps<span class="token punctuation">[</span>self<span class="token punctuation">.</span>KEY<span class="token punctuation">]</span> <span class="token operator">=</span> edge_options        <span class="token keyword">return</span> caps</code></pre><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p><img src="https://img-blog.csdnimg.cn/23dc9dd0f49748fea379dcda8add619e.png"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="lib文件夹下-main-py"><a href="#lib文件夹下-main-py" class="headerlink" title="lib文件夹下 main.py"></a><code>lib文件夹下 main.py</code></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sysFilePath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>FilePath<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将 JingDongProject 的路径置入环境变量</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> bin <span class="token keyword">import</span> Spider_JingDong    Spider_JingDong<span class="token punctuation">.</span>spride<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="bin文件夹下-Spider-JingDong-py"><a href="#bin文件夹下-Spider-JingDong-py" class="headerlink" title="bin文件夹下 Spider_JingDong.py "></a><code>bin文件夹下 Spider_JingDong.py </code></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> core <span class="token keyword">import</span> Really_Sprider<span class="token keyword">class</span> <span class="token class-name">spride</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}Running{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        Really_Sprider<span class="token punctuation">.</span>really_sprider<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="conf文件夹下-Setting-py"><a href="#conf文件夹下-Setting-py" class="headerlink" title="conf文件夹下 Setting.py "></a><code>conf文件夹下 Setting.py </code></h2><pre class=" language-python"><code class="language-python">URL <span class="token operator">=</span> <span class="token string">"https://www.jd.com/"</span><span class="token comment" spellcheck="true"># 休眠等待的问题，有时候要等待网页加载或者说怕被检验，但很有可能是我网速的问题</span>SLEEPTIME <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 一开始下载的商品评论 txt 文件默认下载地址</span>DOWNLOAD_PATH <span class="token operator">=</span> r<span class="token string">'C:\Users\ASUS\Desktop\code\JingDongProject\download\download.txt'</span><span class="token comment" spellcheck="true"># 将下载的 txt文件 内容存储到 xlsx 文件中的下载地址</span>EXCEL_PATH <span class="token operator">=</span> r<span class="token string">'C:\Users\ASUS\Desktop\code\JingDongProject\download\data.xlsx'</span><span class="token comment" spellcheck="true"># 需要爬取的商品页数</span>PAGE <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 每页搜索的商品数（最多到61，京东一页商品最多60个，因为使用 for 循环所有选择 60+1），最好保证爬取页数页面所有的商品数量 >= PURE_PAGE_NUM，否则会超出索引</span>PURE_PAGE_NUM <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># 评论页数</span>GOODS_PAGE <span class="token operator">=</span> <span class="token number">2</span></code></pre><h3 id="core文件夹下-really-spider-py-文件"><a href="#core文件夹下-really-spider-py-文件" class="headerlink" title="core文件夹下 really_spider.py 文件"></a><code>core文件夹下 really_spider.py 文件</code></h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用的是 edge 浏览器的 自动测试</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>edge<span class="token punctuation">.</span>EdgeOptions <span class="token keyword">import</span> EdgeOptions<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">from</span> conf <span class="token keyword">import</span> Setting<span class="token keyword">class</span> <span class="token class-name">really_sprider</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>search_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>search_option<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">search_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 输入商品名称</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入您想要搜素的商品名称："</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(name)</span>    <span class="token keyword">def</span> <span class="token function">search_option</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 选择商品排序方式</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            tip <span class="token operator">=</span> <span class="token triple-quoted-string string">"""---------------------------------------------            选择商品排序方式（输入数字）---------------------------------------------                1.    综合                2.    销量                3.    评论数----------------------------------------------            """</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"选择商品排序方式（输入数字）:"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>num<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">or</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            num <span class="token operator">=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">def</span> <span class="token function">start_webdriver</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 启动浏览器</span>        <span class="token comment" spellcheck="true"># 1.创建Edge浏览器对象，这会在电脑上在打开一个浏览器窗口</span>        options <span class="token operator">=</span> EdgeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>        options<span class="token punctuation">.</span>add_arguments<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token string">"--headless"</span><span class="token punctuation">,</span> r<span class="token string">"--disable-gpu"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 无头浏览器</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>capabilities<span class="token operator">=</span>options<span class="token punctuation">.</span>to_capabilities<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.driver = webdriver.Edge()</span>        <span class="token comment" spellcheck="true"># 2.通过浏览器向服务器发送URL请求</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>Setting<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 点击搜索之后的页面</span>        self<span class="token punctuation">.</span>click_search<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>line_way<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        page <span class="token operator">=</span> int<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_topPage"]/span/i/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> min<span class="token punctuation">(</span>page<span class="token punctuation">,</span> Setting<span class="token punctuation">.</span>PAGE<span class="token punctuation">)</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Setting<span class="token punctuation">.</span>PAGE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>click_good<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 点击商品进入商品详情页</span>            <span class="token comment" spellcheck="true"># 点击下一页</span>            next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[1]/a[9]'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> next_page<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">click_search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 输入商品名称并点击搜索</span>        self<span class="token punctuation">.</span>start_webdriver<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输入商品名称</span>        name_input <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>        name_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击搜索</span>        click <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search"]/div/div[2]/button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> click<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 滚动加载该页面所有商品</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">line_way</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 点击排序方式</span>        xpath <span class="token operator">=</span> <span class="token string">'//*[@id="J_filter"]/div[1]/div[1]/a[{}]'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span>        sales_count <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> sales_count<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">click_good</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 点击进入商品详情页</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Setting<span class="token punctuation">.</span>PURE_PAGE_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 获取商品名称</span>            <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>            page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source            <span class="token comment" spellcheck="true"># xpath 解析</span>            tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[4]/a/em/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>            num <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>goods_name<span class="token punctuation">:</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                num <span class="token operator">+=</span> i            self<span class="token punctuation">.</span>goods_name <span class="token operator">=</span> num            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 进入商品详情页面</span>            xpath <span class="token operator">=</span> <span class="token string">'//*[@id="J_goodsList"]/ul/li[{}]/div/div[1]/a'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span>            good_detail <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> good_detail<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 商品评价下载</span>            self<span class="token punctuation">.</span>comment_download<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">comment_download</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 商品评价下载</span>        self<span class="token punctuation">.</span>new_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 滑到底部，等待评论加载完成</span>        comment_box <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="detail"]/div[1]/ul/li[5]'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> comment_box<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        page <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment"]/div[2]/div[2]/div[1]/ul/li[1]/a/em/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token string">"+"</span> <span class="token keyword">in</span> page <span class="token operator">and</span> <span class="token string">"万"</span> <span class="token keyword">in</span> page<span class="token punctuation">:</span>            page <span class="token operator">=</span> Setting<span class="token punctuation">.</span>GOODS_PAGE            <span class="token keyword">for</span> p <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> page <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>content<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 点击下一页</span>                <span class="token keyword">if</span> p <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a[7]'</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> p <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>                    next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a[8]'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    next_page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[12]/div/div/a[8]'</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> next_page<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>Sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>close_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">new_window</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取窗口,返回为一个列表</span>        handles <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>window_handles        <span class="token comment" spellcheck="true"># 最后一个是新打开的窗口，跳转到这个窗口</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">close_window</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 关闭新打开的窗口</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        handles <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>window_handles        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 获取评价，包括商品名称、用户名、是否是会员，评分星级，评价文字内容</span>        <span class="token triple-quoted-string string">"""        xpath 解析        //*[@id="comment-0"]/div[1]        """</span>        <span class="token comment" spellcheck="true"># 获取此时的页面源码</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用户名</span>        username <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[1]/div[1]/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 是否是会员</span>        huiyuan <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[1]/div[2]/a/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>huiyuan<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            huiyuan <span class="token operator">=</span> <span class="token string">"None"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            huiyuan <span class="token operator">=</span> huiyuan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 评价内容</span>        content <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[2]/p/text()'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 星级</span>        star <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div[{}]/div[2]/div[1]/@class'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(star)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>Setting<span class="token punctuation">.</span>DOWNLOAD_PATH<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>goods_name <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> huiyuan <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> star <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        sleep<span class="token punctuation">(</span>Setting<span class="token punctuation">.</span>SLEEPTIME<span class="token punctuation">)</span></code></pre><h3 id="download-文件夹下-ToExcel-py"><a href="#download-文件夹下-ToExcel-py" class="headerlink" title="download 文件夹下 ToExcel.py"></a><code>download 文件夹下 ToExcel.py</code></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>syspath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> conf<span class="token punctuation">.</span>Setting <span class="token keyword">import</span> DOWNLOAD_PATH<span class="token punctuation">,</span>EXCEL_PATH    <span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook    book <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>active    title <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"goods_name"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"huiyuan"</span><span class="token punctuation">,</span> <span class="token string">"star"</span><span class="token punctuation">,</span> <span class="token string">"comment content"</span><span class="token punctuation">)</span>    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>DOWNLOAD_PATH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>DOWNLOAD_PATH<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                line_list <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># self.goods_name + "|" + username + "|" + huiyuan + "|" + star + "|" + content</span>                sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line_list<span class="token punctuation">)</span>        book<span class="token punctuation">.</span>save<span class="token punctuation">(</span>EXCEL_PATH<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"can't find the DOANLOAD file!!!"</span><span class="token punctuation">)</span></code></pre><h2 id="注意事项或者说是-Bug"><a href="#注意事项或者说是-Bug" class="headerlink" title="注意事项或者说是 Bug"></a>注意事项或者说是 Bug</h2><ol><li>所要爬取商品页数一定是存在的，不能超过该商品页面的总页数</li><li>保证每页要爬取的商品数量都存在，即：需要在该页面爬取5个商品，但实际上该页面只有3个商品</li><li>因为某些原因（当时没有找到解决方法，现在知道了不想在上面直接改了），目前爬取的商品评价是过万的商品的评价，所以未过万的商品评论并不会下载</li><li>商品名称的问题，后来才发现京东上一些商品是有缩略图的，如下图我圈起来的部分；所以一些商品在爬取过程中是没有名字下载的，因为我参考的姓名定位是有缩略图的名字，所以无缩略图的商品爬取过程中是没有名字的（当时没有找到解决方法，现在知道了不想在上面直接改了）</li></ol><h2 id="一个小坑"><a href="#一个小坑" class="headerlink" title="一个小坑"></a>一个小坑</h2><p>因为还存在这些小问题，并且一些问题已经找到解决办法了，所以在最近国庆前后会写一个修改版的代码，应该会加上简单的 PyQt5 界面。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><img src="https://img-blog.csdnimg.cn/f61070993fd7438db7a0494c34cd2a9f.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十 —— scrapy 框架关于下载中间件的补充</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-guan-yu-xia-zai-zhong-jian-jian-de-bu-chong/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-guan-yu-xia-zai-zhong-jian-jian-de-bu-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="下载中间件拦截请求"><a href="#下载中间件拦截请求" class="headerlink" title="下载中间件拦截请求"></a>下载中间件拦截请求</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在《行百里者半九十 —— scrapy 框架（6）》一文中我们介绍了下载中间件的作用，并演示了其中拦截响应的代码实现。</p><p>现在我们来试着实现拦截请求的代码实现，也就是UA池和代理池的实现。因为免费 IP 总是失效，所以在这里只提供中间件部分的代码实现，不提供运行结果。</p><p>正因为此，代码可能有所疏漏，还望各位看官海涵。</p><h2 id="中间件部分代码实现"><a href="#中间件部分代码实现" class="headerlink" title="中间件部分代码实现"></a>中间件部分代码实现</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your spider middleware</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> is_item<span class="token punctuation">,</span> ItemAdapter<span class="token comment" spellcheck="true"># class MidproSpiderMiddleware:</span><span class="token comment" spellcheck="true">#     # Not all methods need to be defined. If a method is not defined,</span><span class="token comment" spellcheck="true">#     # scrapy acts as if the spider middleware does not modify the</span><span class="token comment" spellcheck="true">#     # passed objects.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     @classmethod</span><span class="token comment" spellcheck="true">#     def from_crawler(cls, crawler):</span><span class="token comment" spellcheck="true">#         # This method is used by Scrapy to create your spiders.</span><span class="token comment" spellcheck="true">#         s = cls()</span><span class="token comment" spellcheck="true">#         crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><span class="token comment" spellcheck="true">#         return s</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def process_spider_input(self, response, spider):</span><span class="token comment" spellcheck="true">#         # Called for each response that goes through the spider</span><span class="token comment" spellcheck="true">#         # middleware and into the spider.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         # Should return None or raise an exception.</span><span class="token comment" spellcheck="true">#         return None</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def process_spider_output(self, response, result, spider):</span><span class="token comment" spellcheck="true">#         # Called with the results returned from the Spider, after</span><span class="token comment" spellcheck="true">#         # it has processed the response.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         # Must return an iterable of Request, or item objects.</span><span class="token comment" spellcheck="true">#         for i in result:</span><span class="token comment" spellcheck="true">#             yield i</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def process_spider_exception(self, response, exception, spider):</span><span class="token comment" spellcheck="true">#         # Called when a spider or process_spider_input() method</span><span class="token comment" spellcheck="true">#         # (from other spider middleware) raises an exception.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         # Should return either None or an iterable of Request or item objects.</span><span class="token comment" spellcheck="true">#         pass</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def process_start_requests(self, start_requests, spider):</span><span class="token comment" spellcheck="true">#         # Called with the start requests of the spider, and works</span><span class="token comment" spellcheck="true">#         # similarly to the process_spider_output() method, except</span><span class="token comment" spellcheck="true">#         # that it doesn’t have a response associated.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         # Must return only requests (not items).</span><span class="token comment" spellcheck="true">#         for r in start_requests:</span><span class="token comment" spellcheck="true">#             yield r</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     def spider_opened(self, spider):</span><span class="token comment" spellcheck="true">#         spider.logger.info('Spider opened: %s' % spider.name)</span><span class="token keyword">import</span> random<span class="token keyword">class</span> <span class="token class-name">MidproDownloaderMiddleware</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 代理池</span>    proxy_http <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    proxy_https <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 拦截请求</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># UA伪装</span>        user_agent_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># UA池</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"User-Agent"</span><span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>user_agent_list<span class="token punctuation">)</span>        <span class="token keyword">return</span> None    <span class="token comment" spellcheck="true"># 拦截所有响应</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Called with the response returned from the downloader.</span>        <span class="token comment" spellcheck="true"># Must either;</span>        <span class="token comment" spellcheck="true"># - return a Response object</span>        <span class="token comment" spellcheck="true"># - return a Request object</span>        <span class="token comment" spellcheck="true"># - or raise IgnoreRequest</span>        <span class="token keyword">return</span> response    <span class="token comment" spellcheck="true"># 拦截所有异常</span>    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"http"</span><span class="token punctuation">:</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"proxy"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>proxy_http<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"proxy"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"https://"</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>proxy_https<span class="token punctuation">)</span>        <span class="token keyword">return</span> request <span class="token comment" spellcheck="true"># 将修正之后的请求对象重新进行请求发送</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（7）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-7/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-7/</url>
      
        <content type="html"><![CDATA[<h1 id="CrawlSpider-实现全站数据爬取"><a href="#CrawlSpider-实现全站数据爬取" class="headerlink" title="CrawlSpider 实现全站数据爬取"></a>CrawlSpider 实现全站数据爬取</h1><h2 id="CrawlSpider-介绍"><a href="#CrawlSpider-介绍" class="headerlink" title="CrawlSpider 介绍"></a>CrawlSpider 介绍</h2><h3 id="全站数据爬取的方式"><a href="#全站数据爬取的方式" class="headerlink" title="全站数据爬取的方式"></a>全站数据爬取的方式</h3><pre class=" language-python"><code class="language-python">        <span class="token operator">-</span><span class="token operator">-</span> 基于 Spider：手动请求（递归实现）        <span class="token operator">-</span><span class="token operator">-</span> 基于 CrawlSpider</code></pre><h3 id="CrawlSpider（Spider-的一个子类）的使用"><a href="#CrawlSpider（Spider-的一个子类）的使用" class="headerlink" title="CrawlSpider（Spider 的一个子类）的使用"></a>CrawlSpider（Spider 的一个子类）的使用</h3><pre class=" language-python"><code class="language-python">        <span class="token operator">-</span><span class="token operator">-</span> 创建一个工程 scrapy startproject Pro        <span class="token operator">-</span><span class="token operator">-</span> cd Pro        <span class="token operator">-</span><span class="token operator">-</span> 创建爬虫文件（CrawlSpider）：            <span class="token operator">-</span><span class="token operator">-</span> scrapy genspider <span class="token operator">-</span>t crawl filename www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com            <span class="token operator">-</span><span class="token operator">-</span> 链接提取器（LinkExtractor）：                <span class="token operator">-</span><span class="token operator">-</span> 作用：根据指定的规则（allow，正则表达式）进行指定链接的提取            <span class="token operator">-</span><span class="token operator">-</span> 规则提取器（Rule）：                <span class="token operator">-</span><span class="token operator">-</span> 作用：将链接提取到的链接进行指定规则（callback）的解析</code></pre><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>使用 CrawlSpider 实现<a href="http://www.521609.com/ziliao/oumei/">校花网明星资料</a>的全站爬取</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>配置文件<code>settings.py</code></p><p><img src="https://img-blog.csdnimg.cn/c713db96a32f405da0f9a99216362748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/85df6e6bad934071a5901531d6409ac0.png"><br>实例化对象 <code>items.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">CrawlspiderproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>主文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> CrawlSpiderPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> CrawlspiderproItem<span class="token keyword">class</span> <span class="token class-name">CrawlspiderSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'CrawlSpider'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.521609.com/ziliao/oumei/'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 作用：根据指定的规则（allow）进行指定链接的提取</span>    link_index <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow <span class="token operator">=</span> r<span class="token string">"/ziliao/oumei/.*?.html"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 翻页的网址</span>    link_message <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow <span class="token operator">=</span> r<span class="token string">"/ziliao/.*?.html"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 人物详情页的网址</span>    <span class="token comment" spellcheck="true"># 规则提取器：将链接提取器的链接提取到的链接进行指定规则（callback）的解析</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        Rule<span class="token punctuation">(</span>link_index<span class="token punctuation">,</span> callback <span class="token operator">=</span> <span class="token string">'parse_name'</span><span class="token punctuation">,</span> follow <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Rule<span class="token punctuation">(</span>link_message<span class="token punctuation">,</span> callback <span class="token operator">=</span> <span class="token string">'parse_content'</span><span class="token punctuation">,</span> follow <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        name_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul/li//h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> CrawlspiderproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>            item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span>name            <span class="token keyword">yield</span> item        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">parse_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        content_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//span[@class="info"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> CrawlspiderproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> content <span class="token keyword">in</span> content_list<span class="token punctuation">:</span>            item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span> <span class="token operator">=</span> content            <span class="token keyword">yield</span> item        <span class="token keyword">pass</span></code></pre><p>管道文件<code>pipelines.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">CrawlspiderproPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如何判定 item 类型</span>        <span class="token comment" spellcheck="true"># 将数据写入数据库，如何保证数据的一致性</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">"XiaohuaproItem"</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">return</span> item</code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/5b84223005d84324bd025bc5d346da80.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（6）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-6/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-6/</url>
      
        <content type="html"><![CDATA[<h1 id="中间件的使用——爬取网易新闻"><a href="#中间件的使用——爬取网易新闻" class="headerlink" title="中间件的使用——爬取网易新闻"></a>中间件的使用——爬取网易新闻</h1><h2 id="scrapy-五大核心组件"><a href="#scrapy-五大核心组件" class="headerlink" title="scrapy 五大核心组件"></a>scrapy 五大核心组件</h2><h3 id="引擎（Scrapy）"><a href="#引擎（Scrapy）" class="headerlink" title="引擎（Scrapy）"></a>引擎（Scrapy）</h3><p>用来处理整个系统的数据流量，触发事务（框架核心）</p><h3 id="调度器（Scheduler）"><a href="#调度器（Scheduler）" class="headerlink" title="调度器（Scheduler）"></a>调度器（Scheduler）</h3><p>用来接受引擎发送的请求，压入队列中，并在引擎再次请求的时候返回，可以想象成一个 URL （抓取网页的网址或者说是链接）的有限队列，由它来决定下一个要抓取的网址是什么，同时去除重复的网址。</p><h3 id="下载器（Downloader）"><a href="#下载器（Downloader）" class="headerlink" title="下载器（Downloader）"></a>下载器（Downloader）</h3><p>用于下载网页内容，并将网页内容返回给爬虫（Spiders），下载器是建立在 twisted 这个高效的异步模型上的。</p><h3 id="爬虫（Spider）"><a href="#爬虫（Spider）" class="headerlink" title="爬虫（Spider）"></a>爬虫（Spider）</h3><p>爬虫是主要干活的，用于从特定的网页中提取自己需要的信息，即所谓的实体（item），用户也可以从中提取出链接，让 引擎（Scrapy） 继续抓取下一个页面。</p><h3 id="项目管道（Pipeline）"><a href="#项目管道（Pipeline）" class="headerlink" title="项目管道（Pipeline）"></a>项目管道（Pipeline）</h3><p>负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体，验证实体的有效性，清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</p><p><img src="https://img-blog.csdnimg.cn/005247374f084154896fd9f11296d99c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="中间件（Middlewares）的介绍"><a href="#中间件（Middlewares）的介绍" class="headerlink" title="中间件（Middlewares）的介绍"></a>中间件（Middlewares）的介绍</h2><h3 id="下载中间件（Downloader-Middlewares）"><a href="#下载中间件（Downloader-Middlewares）" class="headerlink" title="下载中间件（Downloader Middlewares）"></a>下载中间件（Downloader Middlewares）</h3><p>位置：引擎和下载器之间</p><p>作用：批量拦截到整个工程中所有的请求和响应</p><p>拦截请求：<br>    1. UA伪装<br>    2. 代理IP</p><p>拦截响应：<br>    1.  篡改响应数据，响应对象</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>爬取网易新闻的新闻数据</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>在开始写代码的时候，我们首先要到网易新闻网页中踩点，知己知彼，百战不殆。</p><p>网易首页稀疏平常，跟其他的网页差别不大，但我们点开随便一个模块，比如说 “国内”，在下拉网页的时候我们会发现这些网页都是动态加载的。</p><p>很显然，但目前为止，我们所学的 scrapy 框架解决不了这个问题。</p><p>对于动态加载的情况，我们首先想到的肯定是 selenium 爬取数据，那么在 scrapy 中我们要怎么和 selenium 结合呢？</p><p>没错，这就是中间件拦截响应的作用了。 </p><p>至于中间件具体怎么使用，大家还是看代码吧。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>配置文件<code>settings.py</code></p><p><img src="https://img-blog.csdnimg.cn/90d889922cae4f1895bea6da7744f74e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>管道和下载中间件的开启（注意是下载中间件：<code>DOWNLOADER_MIDDLEWARES</code>）</p><p><img src="https://img-blog.csdnimg.cn/3f1786c81c5f45dc8fd4acde13546e42.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>主文件代码编写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> newsPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> NewsproItem<span class="token keyword">class</span> <span class="token class-name">NewsSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'news'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://news.163.com/'</span><span class="token punctuation">]</span>    all_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 起判断作用，其中要发送请求的网址包含动态加载的内容，需要下载中间件拦截，并使用 selenium 替换响应对象</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">'C:\\Users\\ASUS\\Desktop\\CSDN\\selenium 模块\\chromedriver.exe'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 获取国内、国际、军事新闻模块的网址</span>        guonei_url <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="menu_guonei"]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(guonei_url)</span>        self<span class="token punctuation">.</span>all_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>guonei_url<span class="token punctuation">)</span>        guoji_url <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="menu_guoji"]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(guoji_url)</span>        self<span class="token punctuation">.</span>all_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>guoji_url<span class="token punctuation">)</span>        war_url <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="menu_war"]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(war_url)</span>        self<span class="token punctuation">.</span>all_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>war_url<span class="token punctuation">)</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>all_urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_news_url<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_news_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通过对国内、国际、军事新闻模块的网址发送请求（此时响应对象已经被下载中间件替换了）获取新闻的详情页的网址</span>        new_urls <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="ndi_main"]/div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> new_url <span class="token keyword">in</span> new_urls<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print(new_url)</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_new<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_new</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 获取新闻标题和内容</span>        item <span class="token operator">=</span> NewsproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        title <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="post_main"]/h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="post_body"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(title)</span>        <span class="token comment" spellcheck="true"># print(content)</span>        item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> title        item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        <span class="token keyword">yield</span> item        <span class="token keyword">pass</span></code></pre><p>实例化对象 <code>items.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">NewsproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>下载中间件 <code>middlewares.py</code></p><p>下载中间件的类和函数方法很多，我们要注意选择是下载中间件和其中的 <code>process_response</code> 自定义函数</p><p><img src="https://img-blog.csdnimg.cn/787523404e1f4ac3babd351b72ba0118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p> <code>process_response</code> 自定义函数的代码如下：</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        bro <span class="token operator">=</span> spider<span class="token punctuation">.</span>bro        <span class="token comment" spellcheck="true"># spider 表示对应的爬虫对象</span>        <span class="token comment" spellcheck="true"># 挑选出指定的响应对象进行篡改</span>        <span class="token comment" spellcheck="true"># 通过 url 构造 request</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>url <span class="token keyword">in</span> spider<span class="token punctuation">.</span>all_urls<span class="token punctuation">:</span>            bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>            page <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_source            sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 针对定位到的 reponse 进行篡改</span>            <span class="token comment" spellcheck="true"># 实例化一个新的响应对象（符合需求：包含动态加载的新闻数据），代替旧的响应对象</span>            new_response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> body <span class="token operator">=</span> page<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span> request <span class="token operator">=</span> request<span class="token punctuation">)</span>            <span class="token keyword">return</span> new_response        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> response</code></pre><p>管道 <code>pipelines.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">NewsproPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'网易新闻.txt'</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬虫开始……"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> title <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"爬取成功！"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取结束！！！"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（5）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-5/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-5/</url>
      
        <content type="html"><![CDATA[<h1 id="scrapy爬取图片"><a href="#scrapy爬取图片" class="headerlink" title="scrapy爬取图片"></a>scrapy爬取图片</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>爬取<a href="https://sc.chinaz.com/tupian/">站长素材中的图片</a></p><h2 id="图片数据爬取之ImagesPipeline"><a href="#图片数据爬取之ImagesPipeline" class="headerlink" title="图片数据爬取之ImagesPipeline"></a>图片数据爬取之ImagesPipeline</h2><h3 id="scrapy爬取图片-1"><a href="#scrapy爬取图片-1" class="headerlink" title="scrapy爬取图片"></a>scrapy爬取图片</h3><p>xpath 解析出图片 src 的属性值。单独对图片地址发起请求获取图片二进制类型的数据。</p><h3 id="ImagesPipeline"><a href="#ImagesPipeline" class="headerlink" title="ImagesPipeline"></a>ImagesPipeline</h3><p>只需要将 img 中 src 的属性进行解析，提交到管道，管道就会对图片的 src 进行请求发送获取图片的二进制并进行持久化存储。</p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol><li>数据解析（获得图片的地址）</li><li>将存储地址的 item 提交到制定的管道类</li><li>在管道文件中自定制有一个基于 <code>ImagesPipeLine</code> 的管道类<br> — 函数方法 <code>get_media_request</code> 发送请求<br> — 函数方法 <code>fifle_path</code> 自定义图片名称<br> — 函数方法 <code>item_completed</code> 将 item 传递给下一个被执行的管道类</li><li>在配置文件中<br> — 指定图片存储的位置：<code>IMAGES_STORE = &quot;./photo&quot;</code><br> — 指定开启的管道：自定制的管道类</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>当我们按照 xpath 解析图片地址的时候，发现自己爬取到的地址为空。</p><p>主文件如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">PhotoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'photo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://sc.chinaz.com/tupian/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        src_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="container"]/div/div/a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>src_list<span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> src_list<span class="token punctuation">:</span>            src <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> src            <span class="token keyword">print</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/98964fe0d24d499a88df1b4907a1ebda.png"><br>这是为什么呢？</p><p>我们打开网页，检查代码会发现，这些图片地址所在的属性分为两种，一种是 src， 一种是 src2。</p><p><img src="https://img-blog.csdnimg.cn/ab389660feb441348b64e98f8f604101.png"><br><img src="https://img-blog.csdnimg.cn/1011741a853a41e4be8fdaa3cb071e7d.png"><br>那么这两种有什么区别呢？</p><p>我们打开检查代码下拉页面会发现，如果图片进入可视化区域那么属性就会从 src2 变为 src 。</p><p>所以在爬取数据 xpath 解析的时候我们属性的选择应该是 src2 。</p><p>主文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> photopro<span class="token punctuation">.</span>items <span class="token keyword">import</span> PhotoproItem<span class="token keyword">import</span> re<span class="token keyword">class</span> <span class="token class-name">PhotoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'photo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://sc.chinaz.com/tupian/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        src_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="container"]/div/div/a/img/@src2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> src_list<span class="token punctuation">:</span>            src <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> src            <span class="token keyword">print</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/33fa1f303d7c430e89d1893012bb5323.png"><br>同时我们通过点击详情页观看图片的方式，发现爬取到的地址只是缩略图，而原图和爬取到的地址相差了一个<code>_s</code>。</p><p>爬取到的地址 <code>https://scpic3.chinaz.net/Files/pic/pic9/202107/bpic23822_s.jpg</code><br>高清的地址 <code>https://scpic3.chinaz.net/Files/pic/pic9/202107/bpic23822.jpg</code></p><p>🆗，了解到了这两个注意事项，我们就可以来写代码了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>自定制管道类 <code>pipelines.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token comment" spellcheck="true"># class PhotoproPipeline:</span><span class="token comment" spellcheck="true">#     def process_item(self, item, spider):</span><span class="token comment" spellcheck="true">#         return item</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>pipelines<span class="token punctuation">.</span>images <span class="token keyword">import</span> ImagesPipeline<span class="token keyword">class</span> <span class="token class-name">ImgPipeline</span><span class="token punctuation">(</span>ImagesPipeline<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 对 item 中的图片进行请求操作</span>    <span class="token keyword">def</span> <span class="token function">get_media_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定制图片的名称</span>    <span class="token keyword">def</span> <span class="token function">file_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response <span class="token operator">=</span> None<span class="token punctuation">,</span> info <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>url        file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> file_name    <span class="token keyword">def</span> <span class="token function">item_completed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> item <span class="token comment" spellcheck="true"># 该返回值会传递给下一个即将被执行的管道类</span></code></pre><p><code>items.py</code> 的代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">PhotoproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    src <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>主文件代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> photopro<span class="token punctuation">.</span>items <span class="token keyword">import</span> PhotoproItem<span class="token keyword">import</span> re<span class="token keyword">class</span> <span class="token class-name">PhotoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'photo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://sc.chinaz.com/tupian/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        src_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="container"]/div/div/a/img/@src2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> src_list<span class="token punctuation">:</span>            src <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> src            src <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"_s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>            item <span class="token operator">=</span> PhotoproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span> <span class="token operator">=</span> src            <span class="token comment" spellcheck="true"># print(src)</span>            <span class="token keyword">yield</span> item</code></pre><p>配置文件</p><p><img src="https://img-blog.csdnimg.cn/47838dc02887470ab1f8bdf75c95d76c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/268660c3ebff450e9abe471a090aa174.png"></p><p><code>photopro.pipelines.ImgPipeline</code> 中 <code>photopro.pipelines.</code>后面填写的一定是前面自定制的管道类。</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/2aad40fbbf8a4cc9aae161ea3714e35c.png"><br><img src="https://img-blog.csdnimg.cn/ab63258090574941a1211c154aab998c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（4）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-4/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-4/</url>
      
        <content type="html"><![CDATA[<h1 id="深度爬取——请求传参"><a href="#深度爬取——请求传参" class="headerlink" title="深度爬取——请求传参"></a>深度爬取——请求传参</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>爬取 <a href="http://www.521609.com/ziliao/gangtai/">校花网</a> 中港台明星的名字和简介</p><p>信息分别在两个页面里</p><p><img src="https://img-blog.csdnimg.cn/06a219fd98874296ba05a8ff39d82028.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/7994d22830674e9f9b3cd0f178c83be8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>我们发现要实现这个目的，我们既要对原页面进行数据爬取，也要对详情页进行明星简介的爬取。</p><p>这时候我们似乎可以使用前面学的回调函数的方法，调用一个新的函数方法对详情页进行数据爬取。</p><p>不过这个方法还有一个问题，就是怎么保证在原页面爬取的名字数据可以和详情页的一一对应。（不考虑在详情页同时爬取名字和简介信息，不然还怎么介绍请求传参）</p><p>解决这个问题的方法就是请求传参，简单来说，就是在回调函数的时候，将已经爬取到的名字作为参数传到被调用的函数中。</p><p>听起来似乎听抽象的，那么就直接看代码好了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先使前期准备工作。</p><p>配置文件。<br><img src="https://img-blog.csdnimg.cn/4f53e9f72ca5484ab1cacc9dc87bc9d7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/a0683c1bea8845a28dbda8d2c8ce2476.png"><br><code>items.py</code> 文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DataproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>主文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> DataPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> DataproItem<span class="token keyword">class</span> <span class="token class-name">StardataSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'Data'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.521609.com/ziliao/gangtai/'</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> <span class="token string">"http://www.521609.com/ziliao/gangtai/index_%s.html"</span>    page_num <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 爬取详情页</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//span[@class="info"]/p//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        <span class="token keyword">yield</span> item    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 明星姓名的列表</span>        start_name_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="page_starlist page_zllist"]/ul/li/a[2]/h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>start_name_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            item <span class="token operator">=</span> DataproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            start_name <span class="token operator">=</span> start_name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> start_name            <span class="token comment" spellcheck="true"># 根据姓名的位置，判断对应的详情页位置的网址位置，实现一一对应</span>            path <span class="token operator">=</span> <span class="token string">'//div[@class="page_starlist page_zllist"]/ul/li[%s]/a[2]/@href'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            src <span class="token operator">=</span> <span class="token string">'http://www.521609.com/'</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># meta 实现请求传参，请求传参的形式是字典形式</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>page_num <span class="token operator">&lt;=</span> <span class="token number">22</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> self<span class="token punctuation">.</span>url <span class="token operator">%</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>page_num<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 对于翻页的情况，实现回调函数</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span></code></pre><p><code>pipelines.py</code> 文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">DataproPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"资料.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始爬取……"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>        name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"爬取成功！"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取结束！！！"</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/c76fd5ec367044c79bfd34ced06c1126.png"><br><img src="https://img-blog.csdnimg.cn/f1cea8357fea4adf85d253582dbef263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（3）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-3/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-3/</url>
      
        <content type="html"><![CDATA[<h1 id="全站数据爬取：以校花网为例"><a href="#全站数据爬取：以校花网为例" class="headerlink" title="全站数据爬取：以校花网为例"></a>全站数据爬取：以校花网为例</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>爬取 <a href="http://www.521609.com/tuku/shz/">校花网</a> 中全部照片的名称，以生活照为例。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>如果不用 scrapy 框架实现全站数据爬取其实是简单的，只要找到网址的规律一直遍历就行。那么如果要用scrapy框架实现全站数据爬取应该怎么办呢？</p><p>其实经过前面对 scrapy 框架的学习，我们发现 <code>parse</code> 函数方法的作用就是让我们对指定的网址网站数据解析，所以想要完成全站数据爬取，我们只需要循环调用 <code>parse</code> 函数方法。</p><p>我们首先也需要找到网址的规律，构造一个网址模板。</p><p>我们知道 scrapy 只会对 <code>start_urls</code> 列表内的内容进行发送请求，那么我们要怎么实现不停地调用  <code>parse</code> 函数方法呢？</p><p>这个方法就是 回调函数。</p><p>简单来说，就是在编写 <code>parse</code> 函数时，在函数的最后再调用一次该函数。简单来说就是递归使用 <code>parse</code> 函数。</p><p>明白了原理，那就试试吧，直接上代码。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先是配置文件。UA伪装、robots协议、日志的设置、管道的打开</p><p><img src="https://img-blog.csdnimg.cn/21b60097709746f795d38618493a7323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/e4b0ab895fcb45e4859b54707af32292.png"><br>主文件代码的编写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> photo<span class="token punctuation">.</span>items <span class="token keyword">import</span> PhotoItem<span class="token keyword">class</span> <span class="token class-name">NameSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'name'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.521609.com/tuku/shz/index.html'</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> <span class="token string">"http://www.521609.com/tuku/shz/index_%s.html"</span>    index <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        name_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="inn"]/ul/li/a/@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(name_list)</span>        <span class="token keyword">for</span> name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>            item <span class="token operator">=</span> PhotoItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">"photo_name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> name            <span class="token keyword">yield</span> item        <span class="token keyword">if</span> self<span class="token punctuation">.</span>index <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> self<span class="token punctuation">.</span>url <span class="token operator">%</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>index<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 回调函数</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>index <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">pass</span></code></pre><p><code>items.py</code> 文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">PhotoItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    photo_name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p><code>pipelines.py</code> 文件的代码编写</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">PhotoPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"照片名称.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬虫开始……"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        photo_name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"photo_name"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo_name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取数据结束！！！"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果</p><p><img src="https://img-blog.csdnimg.cn/07ecba61366b49b2b137220c4e93f65b.png"></p><p><img src="https://img-blog.csdnimg.cn/ab6afa842a2e4fbbbf805bdb18a1e366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（2）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-2/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-2/</url>
      
        <content type="html"><![CDATA[<h1 id="scrapy-持久化存储（以糗事百科为例）"><a href="#scrapy-持久化存储（以糗事百科为例）" class="headerlink" title="scrapy 持久化存储（以糗事百科为例）"></a>scrapy 持久化存储（以糗事百科为例）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道大家还记得爬虫万能的三步骤吗？没错，那就是指定URL，发送请求，持久化保存数据。</p><p>我们前面在 scrapy框架（1）中简单了解了使用 scrapy 指定URL和发送请求，那么我们又要怎么使用 scrapy 实现数据的持久化存储呢？</p><p>scrapy 框架实现数据持久化存储的方法有两种，一种是基于终端命令的持久化存储；一种是基于管道的持久化存储。</p><h2 id="基于终端指令的持久化存储"><a href="#基于终端指令的持久化存储" class="headerlink" title="基于终端指令的持久化存储"></a>基于终端指令的持久化存储</h2><p>首先我们先创建相应的 scrapy 文件，用我们学过的方法完成指定URL和请求发送的步骤。</p><p>相关步骤如下<br><img src="https://img-blog.csdnimg.cn/20210710143834387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>scrapy 指定URL，发送指令的文件和代码如下：</p><p>配置文件 <code>setting.py</code></p><p><img src="https://img-blog.csdnimg.cn/20210710152408579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>主代码 <code>saveData.py</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">SavedataSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'saveData'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># xpath 解析。作者的列表</span>        author_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div/div[1]/a[1]/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回一个列表</span>        <span class="token comment" spellcheck="true"># print(author_list)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>author_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token string">'//div[@class="col1 old-style-col1"]/div[%s]/a[1]/div/span//text()'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(content)</span>        <span class="token keyword">pass</span></code></pre><p>接下就是基于终端指令的持久化存储了</p><pre class=" language-python"><code class="language-python">基于终端指令的持久化存储：    —— 要求：只可以将 parse 方法中的返回值存储到本地的文本文件中    —— 注意：持久化存储的文本文件的类型只能是“json”，“jsonlines”，“jl”，“csv”，“xml”    —— 指令：scrapy crawl xxx <span class="token operator">-</span>o filePath    —— 好处：简洁高效便捷    —— 缺点：局限性比较强（数据只可以存储到指定后缀的文本文件中）</code></pre><p>相关文件代码如下：</p><p>相关文件<code>items.py</code>（其实自己加的代码并不多）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QiushiItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>主代码<code>saveData.py</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">SavedataSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'saveData'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># xpath 解析。作者的列表</span>        author_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div/div[1]/a[1]/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回一个列表</span>        <span class="token comment" spellcheck="true"># print(author_list)</span>        all_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>author_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token string">'//div[@class="col1 old-style-col1"]/div[%s]/a[1]/div/span//text()'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            author <span class="token operator">=</span> author_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(content)</span>            data <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"author"</span><span class="token punctuation">:</span> author<span class="token punctuation">,</span>                <span class="token string">"content"</span><span class="token punctuation">:</span> content            <span class="token punctuation">}</span>            all_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> all_data</code></pre><p>终端指令<br><img src="https://img-blog.csdnimg.cn/20210710200454256.png"><br>运行结果</p><p><img src="https://img-blog.csdnimg.cn/20210710200530207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="基于管道的持久化存储"><a href="#基于管道的持久化存储" class="headerlink" title="基于管道的持久化存储"></a>基于管道的持久化存储</h2><p>我们可以发现基于终端指令的局限性其实很大，所以我们通常不使用基于终端命令的方法进行数据的持久化存储。那么就是基于管道的持久化存储了。</p><p>前期工作和基于终端的持久化存储一样。只是在配置文件要做出一点改变。</p><p>其中<code>items.py</code>不需要改变。配置文件<code>settings.py</code>基本不变，只需要打开管道就行<br><img src="https://img-blog.csdnimg.cn/20210712225023779.png"><br>先是管道文件 <code>pipelines.py</code> 的代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">QiushiPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开爬虫，函数名一定要是这个。只被调用一次</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始爬虫……"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"数据.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 每传入一个参数，就调用一次</span>        author <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"作者："</span> <span class="token operator">+</span> author <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"内容："</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬虫结束！！！"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后是主代码 <code>saveDate.py</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> qiushi<span class="token punctuation">.</span>items <span class="token keyword">import</span> QiushiItem <span class="token comment" spellcheck="true"># 导入 items.py 文件中函数</span><span class="token keyword">class</span> <span class="token class-name">SavedateSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'saveDate'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># xpath 解析。作者的列表</span>        author_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div/div[1]/a[1]/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回一个列表</span>        <span class="token comment" spellcheck="true"># print(author_list)</span>        item <span class="token operator">=</span> QiushiItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>author_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token string">'//div[@class="col1 old-style-col1"]/div[%s]/a[1]/div/span//text()'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            author <span class="token operator">=</span> author_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">=</span> author            item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span> <span class="token operator">=</span> content            <span class="token keyword">yield</span> item</code></pre><p>我们试着运行一下代码，结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20210712231244482.png"><br><img src="https://img-blog.csdnimg.cn/20210712231305201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行百里者半九十——scrapy 框架（1）</title>
      <link href="/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-1/"/>
      <url>/2022/11/22/xing-bai-li-zhe-ban-jiu-shi-scrapy-kuang-jia-1/</url>
      
        <content type="html"><![CDATA[<h1 id="scrapy-框架初识"><a href="#scrapy-框架初识" class="headerlink" title="scrapy 框架初识"></a>scrapy 框架初识</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果没记错，python 3.6 及以上版本可以直接用 <code>pip install scrapy.</code>但具体是从哪个版本开始可以这样我也不是很清楚，因为我使用的 python 3.95，所以我是直接用<code>pip</code>安装的。也正因为如此，对于下载whl格式的包安装我是不太清楚的，所以不提。</p><h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><p>scrapy 安装成功后，我们来创建项目框架。</p><p>打开终端。cmd 或者从 pycharm 中打开终端。我以 pycharm 为例。</p><p>首先，进入到相应的目录</p><p><img src="https://img-blog.csdnimg.cn/2021070120590867.png"></p><p>创建项目框架文件夹</p><pre class=" language-cmd"><code class="language-cmd">scrapy startproject projectName</code></pre><p><img src="https://img-blog.csdnimg.cn/20210701210138855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>在进入刚创建的文件夹，创建新的执行文件</p><pre class=" language-cmd"><code class="language-cmd">scrapy genspider fileName www.xxxx.com</code></pre><p><img src="https://img-blog.csdnimg.cn/20210701210414707.png"></p><p>然后我们打开我们创建的项目框架</p><p><img src="https://img-blog.csdnimg.cn/20210701210508359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>其中 <code>Blood.py</code>是主代码文件，<code>items.py</code> 是跟保存有关的文件，<code>middlewares.py</code>是中间件，<code>pipelines.py</code>是管道文件，<code>settings.py</code>是配置文件。这些以后会讲到的，暂且不提。</p><p>如果要执行代码，终端的命令是<code>scrapy crawl fileName</code><br>在这个案例里，就是<code>scrapy crawl Blood</code></p><h2 id="简单的代码实现"><a href="#简单的代码实现" class="headerlink" title="简单的代码实现"></a>简单的代码实现</h2><p>先打开 <code>Blood.py</code>文件<br>其中代码如下：<br><img src="https://img-blog.csdnimg.cn/20210701210943336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>我圈起来的部分是允许爬虫爬取的网站的域名，而下面的列表是待爬取的网址。这就是说，如果待爬取的网址不属于我圈起来的域名，这些网址就不会被爬取。所以一般来说，我们直接是将这一行代码注释掉。</p><p>然后我们试着爬取百度首页。</p><p>首先代码如下:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BloodSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'Blood'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印爬取的网址</span>        <span class="token keyword">pass</span></code></pre><p>执行代码<code>scrapy crawl Blood</code></p><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20210701211700447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>好家伙，这一坨是什么东西？</p><p>先来看我圈起来的部分，先是说连接到百度首页，再说被 robots 协议禁止了。好家伙，原来这是日志啊，但是 robots 协议怎么办？</p><p>没事，是时候打开我们的配置文件了</p><p><img src="https://img-blog.csdnimg.cn/20210701212034397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>这里我们看到，我们的 scrapy 框架遵守 robots 协议，所以我们将 True 改成 False。再运行一次，🆗，这次没有报错了。</p><p><img src="https://img-blog.csdnimg.cn/20210701212211474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>但是这一坨日志可真是叫人恶心。那有什么方法吗？</p><p>简单，再次打开而配置文件。<br>添加一行代码</p><pre class=" language-python"><code class="language-python">LOG_LEVEL <span class="token operator">=</span> <span class="token string">"ERROR"</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210701213120797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>然后再次运行</p><p>看结果：<br><img src="https://img-blog.csdnimg.cn/20210701213147621.png"></p><p>那么使用 scrapy 框架之后怎么保存爬取的内容呢？</p><p>嘿嘿，且听下回分解。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（6）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-6/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-6/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-综合应用-（2）"><a href="#selenium-综合应用-（2）" class="headerlink" title="selenium 综合应用 （2）"></a>selenium 综合应用 （2）</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>模拟登录 12306</p><p>注意：目的在于验证码的识别。因为除了点击，12306在登录后还存在滑块验证码。本篇文章并不涉及滑块验证码。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p><img src="https://img-blog.csdnimg.cn/202106291640446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>首先需要定位并点击 “账号登陆”</p><p><img src="https://img-blog.csdnimg.cn/20210629164140492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>然后问题就是账号密码和验证码的问题了。</p><p>我相信账号密码并不是什么大问题，实际上叫人无从下手的是验证码问题。这时候需要的就是我们的验证码网站了。</p><p><img src="https://img-blog.csdnimg.cn/20210629165131804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>12306 网站的验证码基本是 1~4 个坐标，所以我们选择 type &#x3D; 27。</p><p>需要明白的是我们使用验证码识别的是坐标。</p><p>所以我们需要做的是获取验证码的图片，这时候我们不能使用以前用的方法，因为通过网址获取的验证码是动态更新的。所以我们需要对验证码部分使用代码进行截图。（这部分比较麻烦，如果有必要的话，甚至可以直接 CTRL + C 然后 CTRL + V）</p><p>需要注意的是因为我的电脑是文本显示大小是125%，所以相应的数据需要乘以或是除以 1.25。</p><p><img src="https://img-blog.csdnimg.cn/20210629165923440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains <span class="token comment" spellcheck="true"># 动作链</span><span class="token keyword">def</span> <span class="token function">base64_api</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> img<span class="token punctuation">,</span> typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b64 <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> uname<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> pwd<span class="token punctuation">,</span><span class="token string">"typeid"</span><span class="token punctuation">:</span>typeid<span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> b64<span class="token punctuation">}</span>    result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://api.ttshitu.com/predict"</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://kyfw.12306.cn/otn/resources/login.html"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位“账号登录”并点击</span>    btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[2]/ul/li[2]/a'</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> btn<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输入账号密码</span>    user_name <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J-userName"</span><span class="token punctuation">)</span>    user_name<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J-password"</span><span class="token punctuation">)</span>    password<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对整个页面截图并保存</span>    bor<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 窗口最大化</span>    photo <span class="token operator">=</span> bor<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">"窗口截图.png"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位坐标位置</span>    img <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J-loginImg'</span><span class="token punctuation">)</span>    location <span class="token operator">=</span> img<span class="token punctuation">.</span>location <span class="token comment" spellcheck="true"># 验证码图片左上角坐标。X, Y</span>    <span class="token comment" spellcheck="true"># print("location", location)</span>    size <span class="token operator">=</span> img<span class="token punctuation">.</span>size <span class="token comment" spellcheck="true"># 验证码标签对应的长宽</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>    rangle <span class="token operator">=</span> <span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 裁剪</span>    i <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'窗口截图.png'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对指定位置进行裁剪</span>    fram <span class="token operator">=</span> i<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>rangle<span class="token punctuation">)</span>    fram<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'验证码.png'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 识别验证码</span>    img_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\selenium 模块\\验证码.png"</span>    result <span class="token operator">=</span> base64_api<span class="token punctuation">(</span>uname<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> img<span class="token operator">=</span>img_path<span class="token punctuation">,</span> typeid<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 确定要点击的位置</span>    <span class="token keyword">if</span> <span class="token string">"|"</span> <span class="token keyword">in</span> result<span class="token punctuation">:</span>        index_list <span class="token operator">=</span> result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>        x_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> xy <span class="token keyword">in</span> index_list<span class="token punctuation">:</span>            xy_list <span class="token operator">=</span> xy<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>            x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        x_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        xy_list <span class="token operator">=</span> result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x_list<span class="token punctuation">,</span> y_list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">1.25</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> int<span class="token punctuation">(</span>int<span class="token punctuation">(</span>y_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">1.25</span><span class="token punctuation">)</span>        ActionChains<span class="token punctuation">(</span>bor<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element_with_offset<span class="token punctuation">(</span>img<span class="token punctuation">,</span> int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 点击登录</span>    btn_login <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J-login'</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> btn_login<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（5）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-5/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-5/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-综合应用（1）"><a href="#selenium-综合应用（1）" class="headerlink" title="selenium 综合应用（1）"></a>selenium 综合应用（1）</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>模拟浏览器，从京东首页开始输入关键词，爬取两页商品的名称、价格和一页评价（只包括文字，不包括视频）。评价包括用户的名称和星数。</p><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><ol><li><p>首先定位搜索框的位置<br><img src="https://img-blog.csdnimg.cn/20210628212745696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p></li><li><p>前面说过商品页的商品是动态加载。不然我们只能得到 30 个商品的数据</p></li><li><p>定位商品的链接</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210628213048671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>4. 商品详情页的需要爬取的数据的定位</p><p><img src="https://img-blog.csdnimg.cn/20210628213319608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210628213327510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210628213333935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>5.  翻页</p><p><img src="https://img-blog.csdnimg.cn/20210628213436926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> rekey <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入商品名称："</span><span class="token punctuation">)</span>page_index <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入要爬取的页数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>bor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.jd.com/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定位搜索框</span>input_key <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>input_key<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>key<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定位按钮</span>btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search"]/div/div[2]/button'</span><span class="token punctuation">)</span>bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> btn<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> index <span class="token operator">&lt;</span> page_index<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 滚轮到底，破解动态加载</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> bor<span class="token punctuation">.</span>page_source    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 商品 li 标签的列表</span>    good_lists <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(len(good_lists))</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>good_lists<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 商品的链接</span>        chain <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li['</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']//a[@target="_blank"]'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击，来到商品详情页</span>        bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> chain<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 跳转到新打开的窗口</span>        handles <span class="token operator">=</span> bor<span class="token punctuation">.</span>window_handles        bor<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击商品评价</span>        good_btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="detail"]/div[1]/ul/li[5]'</span><span class="token punctuation">)</span>        bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> good_btn<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 滚轮到底，破解动态加载</span>        bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        good_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>bor<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>        good_name <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="sku-name"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        good_name <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"\s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> good_name<span class="token punctuation">)</span>        good_price <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="dd"]/span/span[2]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" 元"</span>        <span class="token comment" spellcheck="true"># print(good_price, "\n", good_name)</span>        <span class="token comment" spellcheck="true"># print("正在爬取", good_name + "……")</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"商品.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"商品名称："</span> <span class="token operator">+</span> good_name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"商品价格："</span> <span class="token operator">+</span> good_price <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        user_name_list <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div/div[1]/div[1]/img/@alt'</span><span class="token punctuation">)</span>        star_list <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div/div[2]/div[1]/@class'</span><span class="token punctuation">)</span>        conten_listt <span class="token operator">=</span> good_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="comment-0"]/div/div[2]/p//text()'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>user_name_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            user_name <span class="token operator">=</span> user_name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            star <span class="token operator">=</span> star_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            content <span class="token operator">=</span>conten_listt<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"商品.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"用户评价："</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"用户名："</span> <span class="token operator">+</span> user_name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"星数："</span> <span class="token operator">+</span> star <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(good_name, "爬取成功！！！")</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关闭当前窗口，并跳转到一开始的窗口</span>        bor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        bor<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 输入页数并翻页</span>    input_text <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[2]/input'</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>    input_text<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    input_text<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_bottomPage"]/span[2]/a'</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> btn<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>bor<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/20210629011314552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（4）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-4/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-4/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-模块（4）"><a href="#selenium-模块（4）" class="headerlink" title="selenium 模块（4）"></a>selenium 模块（4）</h1><h2 id="几句题外话"><a href="#几句题外话" class="headerlink" title="几句题外话"></a>几句题外话</h2><p>因为准备期末考试的缘故，有一段时间没有写博文了，今天认真一看竟然已经有一个月没有写了。虽然我的博文只有零零总总几人看过，但期间有位大佬 “催更” ，真是叫我汗颜。</p><p>如果关注过我写的东西的时间，或许各位就会看到我中间大概有三四个月的时间没有写过博文。</p><p>明白了这一点，或许各位看官就大概能理解我的感动了，毕竟对于我这种非计算机专业的人来说，CSDN大佬的鼓励或是指正，就是激励我坚持的一个重要因素了吧。</p><p>闲话少说，今天我忙里偷闲写一篇博文，希望对各位看官有帮助。如若没有，绝对是因为我对其中的理解不够深刻。写这一篇博客，大概也有告诉那位 “大佬“ 我仍会继续坚持下去的意思。</p><p>与各位看官共勉。（似乎语气有些大了呢 <code>^_^</code>）</p><h2 id="搜索框的关键词输入（以京东为例）"><a href="#搜索框的关键词输入（以京东为例）" class="headerlink" title="搜索框的关键词输入（以京东为例）"></a>搜索框的关键词输入（以京东为例）</h2><p>在上一篇的博文中，我们提到了对商品页的商品点击以及使用滚轮的方法破解动态加载的问题。</p><p>那么问题来了，如果我既要对 “ 奥特曼 ” 这个关键词下的商品页面进行这个操作，又要对 “ 小怪兽 ”关键词下的商品页面进行同样的操作怎么办？难道要写两个程序吗？</p><p>正所谓爬虫（技术）的出现是为了一劳永逸，所以写两个程序这种笨办法绝不是我们最后会选择的办法。</p><p>既然我们使用 selenium 模块是为了模拟浏览器，那么我们就模拟到底，关键词的输入也通过程序来解决。</p><p>首先我们使用 xpath 定位定位到搜索框的位置</p><p><img src="https://img-blog.csdnimg.cn/202106261944290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后输入关键词。使用<code>send_keys() 方法</code></p><p>话不多说，直接上代码。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    bor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.jd.com/"</span><span class="token punctuation">)</span>    key_word_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"奥特曼"</span><span class="token punctuation">,</span> <span class="token string">"小怪兽"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> key_word_list<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定位搜索框</span>        key_input <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定位搜索按钮</span>        key_bot <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输入关键词</span>        key_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 点击</span>        bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click()"</span><span class="token punctuation">,</span> key_bot<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回原始窗口</span>        bor<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 退出</span>    bor<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>其中</p><pre class=" language-python"><code class="language-python">bor<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span> 相当于浏览器的后退功能bor<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span> 相当于浏览器的前进功能</code></pre><h2 id="有关-iframe-框架的-xpath-定位-以-QQ-空间为例"><a href="#有关-iframe-框架的-xpath-定位-以-QQ-空间为例" class="headerlink" title="有关 iframe 框架的 xpath 定位(以 QQ 空间为例)"></a>有关 iframe 框架的 xpath 定位(以 QQ 空间为例)</h2><p>前面我们知道了输入关键词，然后我们就激动地想到了激动人心的使用selenium实现模拟登录了，话不多说我们直接上代码。</p><pre class=" language-python"><code class="language-python">rom time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://qzone.qq.com/"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 首先定位到 “账号密码登录” 并点击</span>    btn <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"switcher_plogin"</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguemnts[0].click()"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位到密码和账号输入框</span>    username <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">)</span>    username<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输入账号</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>    password<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"1213456"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输入密码</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 点击登录</span>    login_button <span class="token operator">=</span> bor<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"login_button"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    bor<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但我们一运行就发现不对了，怎么报错了？<br><img src="https://img-blog.csdnimg.cn/20210626202302556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这是怎么回事？难道没有定位到响应的元素？那这是为什么呢？</p><p>我们分析源码发现我们要定位的元素都在 iframe 的框架下</p><p><img src="https://img-blog.csdnimg.cn/2021062620245365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>而直接使用 xpath 模块是无法直接定位框架下的元素的，所以我们要先进入这个框架</p><p>使用<code>bro.switch_to.frame(&quot;我们要定位的 iframe 的 ID&quot;) # 切换浏览器标签定位的作用域.</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path <span class="token operator">=</span> <span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果定位的标签是在 iframe 标签里面，则必须通过如下操作进行标签定位</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">"我们要定位的 iframe 的 ID"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 切换浏览器标签定位的作用域</span>div <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化动作链</span>action <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>bro<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 点击长按指定标签</span>action<span class="token punctuation">.</span>click_and_hold<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># perform() 表示立即执行动作链</span><span class="token comment" spellcheck="true"># move_by_offset(x, y)。 X 表示水平方向，Y 表示竖直方向</span>action<span class="token punctuation">.</span>move_by_offset<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># release 释放动作链</span>action<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 退出</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（3）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-3/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-3/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-模块自动化操作（2）（以京东为例）"><a href="#selenium-模块自动化操作（2）（以京东为例）" class="headerlink" title="selenium 模块自动化操作（2）（以京东为例）"></a>selenium 模块自动化操作（2）（以京东为例）</h1><h2 id="页面滚动"><a href="#页面滚动" class="headerlink" title="页面滚动"></a>页面滚动</h2><p>我们首先打开京东的页面，随便输入一个商品名称会看到如下的页面。</p><p>我们可以先数一数页面有多少商品。</p><p>如果我们使用滚轮滚动，我们就会发现在也页面滚动的时候页面同时也在不停地加载。</p><p>如果我们使用抓包工具，解析网页源码，在页面不滚动的情况下我们发现商品的数量是30个。</p><p><img src="https://img-blog.csdnimg.cn/20210526200651381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>也就是这时候 li 标签只有 30 个，如果我们把页面拉到底部，再看页面有的商品我们就会发现这时候有 60 个 li 标签</p><p>这也意味着多出来的 30 个商品是动态加载的数据，是不能直接通过 selenium 的 xpath 直接解析得到的，需要手动让它加载之后再进行 xapth 解析。</p><p>这就需要代码模拟页面滚动的操作。</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path <span class="token operator">=</span> <span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://search.jd.com/Search?keyword=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;enc=utf-8&amp;wq=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;pvid=52ea37a1c5614b668de352ffb60c7960"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用 javascript 命令 模拟页面滚动</span>    bro<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span></code></pre><h2 id="使用-javescript-命令实现鼠标点击"><a href="#使用-javescript-命令实现鼠标点击" class="headerlink" title="使用 javescript 命令实现鼠标点击"></a>使用 javescript 命令实现鼠标点击</h2><p>如果我们真的需要爬取京东的商品信息，一页信息肯定是不够的，这就需要我们模拟完成翻页。</p><p>按前面所学，我们可以先通过 xpath 解析得到按钮的信息，再使用 click() 方法实现模拟点击。</p><p>但实际上我们明明定位到了正确的元素，但程序会告诉我们此元素无法被点击。这是因为按钮上方有文字覆盖，比如说 “下一页” 。所以我们使用 javescript 命令实现按钮的点击。</p><p>接上述代码</p><pre class=" language-python"><code class="language-python">    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位到按钮（下一页）的位置</span>    btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'pn-next'</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'arguments[0].click()'</span><span class="token punctuation">,</span> btn<span class="token punctuation">)</span></code></pre><h2 id="窗口的切换"><a href="#窗口的切换" class="headerlink" title="窗口的切换"></a>窗口的切换</h2><p>有时候我们可能需要商品详情页的信息，这样一来我们就需要对先打开的窗口进行 xpath 解析了。但现在我们的浏览器的页面其实一直停留在一开始打开的窗口，也就是说虽然向我们展示的是新打开的窗口，但实际上我们的自动化浏览器仍停留在原始的页面。</p><p>所以需要我们用代码实现窗口的转换</p><p>代码如下。接上述代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取窗口,返回为一个列表</span>    handles <span class="token operator">=</span> bro<span class="token punctuation">.</span>window_handles    <span class="token keyword">print</span><span class="token punctuation">(</span>handles<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 最后一个是新打开的窗口，跳转到这个窗口</span>    bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 滑到底部</span>    bro<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭新打开的窗口</span>    bro<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 退出</span>    bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（2）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-2/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-2/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-自动化操作（1）（以百度翻译为例）"><a href="#selenium-自动化操作（1）（以百度翻译为例）" class="headerlink" title="selenium 自动化操作（1）（以百度翻译为例）"></a>selenium 自动化操作（1）（以百度翻译为例）</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path <span class="token operator">=</span> <span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发起请求</span>    bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://fanyi.baidu.com/'</span><span class="token punctuation">)</span></code></pre><p>我们运行程序发现我们使用 selenium 请求到的网页和我们自己打开的网页有一点不同。</p><p>使用 selenium 请求到的网页多了一个页面窗口。</p><p><img src="https://img-blog.csdnimg.cn/20210524213534232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>那么我们要怎么使用 selenium 关闭这个窗口呢？</p><p>我们可以使用元素的 xpath 路径，元素的 id 名，或者说元素的属性定位到关闭的符号，并且使用 click() 方法模拟鼠标的点击。</p><p>这是定位元素的一些方法</p><p><img src="https://img-blog.csdnimg.cn/20210524214051535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用 class 属性定位到 “x” 符号</span>    btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'desktop-guide-close'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 模拟鼠标点击</span>    btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注意：<br>如果报错，很有可能是还没加载完成，可以使用 time.sleep() 让页面完成加载</p><p>接下来我们就看到页面来到我们熟悉的页面</p><p><img src="https://img-blog.csdnimg.cn/20210524214337671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>那么我们要怎么把我们想要翻译的文字输入到文本框中呢？</p><p>还是先定位到文本框的位置，再输入文字（使用 send_keys() 方法），点击翻译</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定位到文本框</span>    translate_input <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'baidu_translate_input'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 传入文字</span>    translate_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"奥特曼"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待两秒</span>    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>结果如图</p><p><img src="https://img-blog.csdnimg.cn/20210524215153862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>因为是动态加载的数据，所以我们不需要点击 “ 翻译 ”，结果就会自动出现。如果需要点击，我们也可以先定位按键的位置，再模拟点击。</p><p>那么我们要如何获取翻译的结果呢？</p><p>我们知道动态加载的数据需要找到相应的 API，那么现在我们需要吗？答案是不需要，我们只需要对现在的页面进行 xpath 解析就行。</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree……<span class="token comment" spellcheck="true"># 获取此时的页面源码</span>    page <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_source    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    content <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main-outer"]/div/div/div[1]/div[2]/div[1]/div[2]/div/div/div[1]/p[2]/span/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果如下<br><img src="https://img-blog.csdnimg.cn/20210524220523678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器 —— selenium模块（1）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-1/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-selenium-mo-kuai-1/</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>selenium最初是一个自动化测试工具,而爬虫中使用它主要是为了解决requests无法直接执行JavaScript代码的问题</p><p>selenium本质是通过驱动浏览器，完全模拟浏览器的操作，比如跳转、输入、点击、下拉等，来拿到网页渲染之后的结果，可支持多种浏览器</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先是模块的安装</p><pre class=" language-cmd"><code class="language-cmd">pip3 install selenium</code></pre><p>因为使用的驱动浏览器，所以我们还需要下载响应浏览器的驱动浏览器。</p><p>以谷歌浏览器为例</p><p>这是驱动浏览器的网址<br><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p><p><img src="https://img-blog.csdnimg.cn/20210523204848280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>圈起来的部分是驱动浏览器对应的谷歌浏览器的版本号。我们选择一个和我们谷歌浏览器相符的文件夹下载下来就可以了。</p><p>下载的文件夹里会有一个可执行程序（.exe），我们可以每次复制粘贴对应的路径，也可以在写程序时将可执行程序和执行的代码放在同一个文件夹里。</p><p>我选择的是后者。</p><h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 选择使用的浏览器，比如我用的谷歌，所以我选择 Chrome</span>    <span class="token comment" spellcheck="true"># 参数传入的是驱动浏览器的路径</span>    bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path <span class="token operator">=</span> <span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 传入网址。以百度翻译为例</span>    bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://fanyi.baidu.com/'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待5秒后，退出浏览器界面</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——协程（3）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-3/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-3/</url>
      
        <content type="html"><![CDATA[<h1 id="用-aiohttp-完成异步爬取图片"><a href="#用-aiohttp-完成异步爬取图片" class="headerlink" title="用 aiohttp 完成异步爬取图片"></a>用 aiohttp 完成异步爬取图片</h1><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_photo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            photo <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\协程\\aiohttp 异步爬取图片\\'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 开始时间</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\协程\\aiohttp 异步爬取图片'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\协程\\aiohttp 异步爬取图片'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 指定url, 发送请求</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kfengjing/index.html"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">'https://pic.netbian.com/4kfengjing/index_%s.html'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">)</span><span class="token punctuation">.</span>text        response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            src <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a//text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> get_photo<span class="token punctuation">(</span><span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> src<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">)</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 协程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>看一下运行结果</p><p><img src="https://img-blog.csdnimg.cn/2021052210282593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210522102533884.png"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——协程（2）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-2/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-2/</url>
      
        <content type="html"><![CDATA[<h2 id="resquests-协程的尝试"><a href="#resquests-协程的尝试" class="headerlink" title="resquests 协程的尝试"></a>resquests 协程的尝试</h2><p>前面我们学习了协程的简单的语法，以及写了一段代码实现了简单的协程。而我们的目的是为了实现异步爬虫。所以我们就用 requests 模块尝试一下协程</p><h3 id="flask服务"><a href="#flask服务" class="headerlink" title="flask服务"></a>flask服务</h3><p>首先我们用 flask 设置一个简单的框架，因为我们的重点是协程，所以选择的网站越简单越好</p><p>代码如下</p><pre class=" language-python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/bobo'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_bobo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello bobo"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/jay'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_jay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello jay"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/tom"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_tom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello tom"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>threaded <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>运行结果如下</p><p><img src="https://img-blog.csdnimg.cn/20210520110054986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们会看到一个 url ，那个就是我们通过 flask 框架得到的一个根目录</p><h3 id="resquests-模块的尝试"><a href="#resquests-模块的尝试" class="headerlink" title="resquests 模块的尝试"></a>resquests 模块的尝试</h3><p>有了前期的准备工作，我们就可以试着通过 requests 模块进行协程的实现。</p><p>根据之前所学进行代码的编写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:5000/'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载成功，"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'bobo'</span><span class="token punctuation">,</span> <span class="token string">"jay"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> get_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">)</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span> tasks <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>但我们一运行程序就发现不对劲了，</p><p><img src="https://img-blog.csdnimg.cn/20210520110617346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>明明我们使用了协程，为什么时间反而没有什么变化呢？这究竟是为什么呢？</p><h2 id="aiohttp-模块实现协程"><a href="#aiohttp-模块实现协程" class="headerlink" title="aiohttp 模块实现协程"></a>aiohttp 模块实现协程</h2><p>上面我们发现 requests 模块实现不了协程。这是为什么呢？</p><p>其实原因很简单，requests.get 是基于同步，要想实现协程必须使用基于异步的网络请求模块进行 url 的请求发送。所以我们使用 aiohttp模块，基于异步的网络请求模块。</p><p>至于怎么使用 aiohttp ，就直接看代码好了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:5000/'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># text() 返回字符串形式的数据类型</span>            <span class="token comment" spellcheck="true"># read() 返回二进制形式的数据类型</span>            <span class="token comment" spellcheck="true"># json() 返回json串形式的数据类型</span>            <span class="token comment" spellcheck="true"># 注意：获取响应数据类型之前一定要用 await 进行手动挂起</span>            page <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载成功，"</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'bobo'</span><span class="token punctuation">,</span> <span class="token string">"jay"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> get_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">)</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span> tasks <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>让我们来看一些运行结果，看看是不是空欢喜一场</p><p><img src="https://img-blog.csdnimg.cn/20210520112612152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>运行时间确实是两秒，说明我们使用 aiohttp 实现了协程。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——协程（1）</title>
      <link href="/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-1/"/>
      <url>/2022/11/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xie-cheng-1/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h2><p>简单来说，协程就是同时开启多个任务，但一次只顺序执行一个。等到所执行的任务遭遇阻塞，就切换到下一个任务继续执行，以期节省下阻塞所占用的时间。</p><h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p><img src="https://img-blog.csdnimg.cn/2021051216021149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="简单的代码示例"><a href="#简单的代码示例" class="headerlink" title="简单的代码示例"></a>简单的代码示例</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 定义一个协程函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载 url"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等待。等待的是一个协程函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成，"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建协程任务</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建一个事件循环</span>        <span class="token comment" spellcheck="true"># 两种实现方式</span>    <span class="token comment" spellcheck="true"># 方式一</span>    <span class="token comment" spellcheck="true"># loop.run_until_complete( asyncio.wait(tasks) ) # 将任务注册到事件循环中</span>        <span class="token comment" spellcheck="true"># 方式二</span>    <span class="token keyword">for</span> task <span class="token keyword">in</span> tasks<span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>我们可以看看运行的结果</p><p><img src="https://img-blog.csdnimg.cn/20210512162245553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——线程池的使用（2）</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-2/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-2/</url>
      
        <content type="html"><![CDATA[<p>好吧，我们前面爬取图片发现使用了线程池后，其实我们的效率提高不是这么明显。那我们就来试一试爬取视频吧。因为不同的网站对视频的反爬的策略都不尽相同，所以我们这里讲的示例并没有普世的意义。唯一普世的做法是好好分析视频网址的存放地址。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>首先来讲一讲我们这次爬取的视频。</p><p>我们这次爬取的视频是梨视频娱乐模块最热的视频</p><p>即图片里的前三个（但我们打开抓包工具时，又发现其实是 4 个视频，不管是几个，关系都不大）</p><p><img src="https://img-blog.csdnimg.cn/20210511163822795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先我们先随便定位一个视频，得到如下的网页源码</p><p><img src="https://img-blog.csdnimg.cn/20210511164148109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这里的 a 标签下面有一个超链接，然后我们点击这个超链接，跳转网页，来到了视频播放页。注意这个超链接的内容，后面要用到。</p><p>接着我们再一次试图定位时，却发现我们找不到 .mp4 的网页。怎么办呢？</p><p><img src="https://img-blog.csdnimg.cn/2021051116464288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>没事，我们可以试着播放视频再进行定位。下面就是见证奇迹的时候了。</p><p><img src="https://img-blog.csdnimg.cn/20210511165135797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>当然，以我们目前所学是拿不到在这个动态加载的数据的，但这个步骤不是毫无用处的，我们要记住这串网址。</p><p><a href="https://video.pearvideo.com/mp4/third/20210508/cont-1728888-11721137-174842-hd.mp4">https://video.pearvideo.com/mp4/third/20210508/cont-1728888-11721137-174842-hd.mp4</a></p><p>因为是动态加载的数据，我们可以到 XHR 里面去找网址会不会在这里面。</p><p><img src="https://img-blog.csdnimg.cn/20210511165819832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们一看，果然在！</p><p>不过先别太激动，我们把阿贾克斯加载的网址复制下来，就又发现问题了。</p><p><a href="https://video.pearvideo.com/mp4/third/20210508/1620721592006-11721137-174842-hd.mp4">https://video.pearvideo.com/mp4/third/20210508/1620721592006-11721137-174842-hd.mp4</a></p><p>我们两相对比后，发现相差的部分是：“ cont-1728888 ”。那么 count 后面的数字是从什么地方来的呢？</p><p>还记得我们一开始爬取的超链接吗？</p><p>video_1728888。这里的数字不就是我们要的吗？</p><p>欧克，分析了之后，我们还要阿贾克斯加载的参数。</p><p><img src="https://img-blog.csdnimg.cn/20210511181811947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现其中的 contld 是已知的，那么剩下的 mrd 是什么呢？</p><p>很简单，什么都不是，只是一串随机数</p><p>到这里，我们就完成了对爬取梨视频的分析，剩下的就是代码的问题了。</p><h2 id="同步爬虫爬取梨视频"><a href="#同步爬虫爬取梨视频" class="headerlink" title="同步爬虫爬取梨视频"></a>同步爬虫爬取梨视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">save_video</span><span class="token punctuation">(</span>videoNum_title<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_num <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    title <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span><span class="token punctuation">,</span>        <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"https://www.pearvideo.com/"</span> <span class="token operator">+</span> <span class="token string">"video_"</span> <span class="token operator">+</span> video_num    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/videoStatus.jsp"</span>    <span class="token comment" spellcheck="true"># 传入参数</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"contId"</span><span class="token punctuation">:</span> video_num<span class="token punctuation">,</span>        <span class="token string">"mrd"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 获取假网址</span>    json <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    href <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"videos"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取真正的网址</span>    url <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"/.{13}-"</span><span class="token punctuation">,</span> <span class="token string">"/cont-"</span> <span class="token operator">+</span> video_num <span class="token operator">+</span> <span class="token string">"-"</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存视频</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"正在下载……"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬取梨视频"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/category_4"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="listvideoListUl"]/li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># li 标签列表</span>    List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div//div[@class="vervideo-title"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        video_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        List<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>video_num<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> videoNum_title <span class="token keyword">in</span> List<span class="token punctuation">:</span>        save_video<span class="token punctuation">(</span>videoNum_title<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210511195534468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>同步用时 45 秒，现在让我们试试异步</p><h2 id="异步爬虫爬取梨视频"><a href="#异步爬虫爬取梨视频" class="headerlink" title="异步爬虫爬取梨视频"></a>异步爬虫爬取梨视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> re<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">save_video</span><span class="token punctuation">(</span>videoNum_title<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_num <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    title <span class="token operator">=</span> videoNum_title<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span><span class="token punctuation">,</span>        <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"https://www.pearvideo.com/"</span> <span class="token operator">+</span> <span class="token string">"video_"</span> <span class="token operator">+</span> video_num    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/videoStatus.jsp"</span>    <span class="token comment" spellcheck="true"># 传入参数</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"contId"</span><span class="token punctuation">:</span> video_num<span class="token punctuation">,</span>        <span class="token string">"mrd"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 获取假网址</span>    json <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    href <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"videos"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取真正的网址</span>    url <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"/.{13}-"</span><span class="token punctuation">,</span> <span class="token string">"/cont-"</span> <span class="token operator">+</span> video_num <span class="token operator">+</span> <span class="token string">"-"</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存视频</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"正在下载……"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬取梨视频"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/category_4"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="listvideoListUl"]/li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># li 标签列表</span>    List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div//div[@class="vervideo-title"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        video_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        List<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>video_num<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用线程池</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>save_video<span class="token punctuation">,</span> List<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——线程池的使用(1)</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-1/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-xian-cheng-chi-de-shi-yong-1/</url>
      
        <content type="html"><![CDATA[<p>学到现在，我们可以说已经学习了爬虫的基础知识，如果没有那些奇奇怪怪的反爬虫机制，基本上只要有时间分析，一般的数据都是可以爬取的，那么到了这个时候我们需要考虑的就是爬取的效率了，关于提高爬虫效率，也就是实现异步爬虫，我们可以考虑以下两种方式：一是线程池的使用（也就是实现单进程下的多线程），一是协程的使用（如果没有记错，我所使用的协程模块是从python3.4以后引入的，我写博客时使用的python版本是3.9）。</p><p>今天我们先来讲讲线程池。</p><h2 id="同步代码演示"><a href="#同步代码演示" class="headerlink" title="同步代码演示"></a>同步代码演示</h2><p>我们先用普通的同步的形式写一段代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开始时间</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        func<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>对于代码运行的结果我们心里都有数，但还是让我们来看一下吧</p><p><img src="https://img-blog.csdnimg.cn/2021051020454987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>不出所料。运行时间果然是六秒</p><h2 id="异步，线程池代码"><a href="#异步，线程池代码" class="headerlink" title="异步，线程池代码"></a>异步，线程池代码</h2><p>那么如果我们使用线程池运行上述代码又会怎样呢？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完成："</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开始时间</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span>    <span class="token punctuation">]</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>len<span class="token punctuation">(</span>url_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 实例化一个线程池对象，并且设定线程池的上限数量为列表长度。不设置上限也可以。</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> url_list<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>下面就是见证奇迹的时候了，让我们运行程序</p><p><img src="https://img-blog.csdnimg.cn/20210510205733844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这次我们的运行时间只用2～3秒。其实我们可以将线程池简单的理解为将多个任务同时进行。</p><p>注意：</p><ol><li>我使用的是 pycharm，如果使用的是 VS 或者说是 python 自带的 idle，在运行时我们只能看到最后时间的输出。</li><li>我们输出结果可能并不是按 abc 的顺序输出的。</li></ol><h2 id="同步爬虫爬取图片"><a href="#同步爬虫爬取图片" class="headerlink" title="同步爬虫爬取图片"></a>同步爬虫爬取图片</h2><p>因为我们的重点是线程池的爬取效率提高，我们就简单的爬取一页的图片。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">def</span> <span class="token function">save_photo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment" spellcheck="true"># 创建路径，避免重复下载</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"开始下载！！！"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\同步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 发送请求，获取源码</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析，获取图片的下载地址的列表</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li/a/@href'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过下载地址获取高清图片的地址和图片名称</span>    <span class="token keyword">for</span> href <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> href        <span class="token comment" spellcheck="true"># 再一次发送请求</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 再一次 xpath 解析</span>        new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 编译文字</span>        title <span class="token operator">=</span> title<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下载，保存</span>        save_photo<span class="token punctuation">(</span>src<span class="token punctuation">,</span> title<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>让我们看看同步爬虫需要多长时间</p><p><img src="https://img-blog.csdnimg.cn/2021051021433347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后再让我们看看使用线程池的异步爬虫爬取这些图片需要多久</p><h2 id="使用线程池的异步爬虫爬取4K美女图片"><a href="#使用线程池的异步爬虫爬取4K美女图片" class="headerlink" title="使用线程池的异步爬虫爬取4K美女图片"></a>使用线程池的异步爬虫爬取4K美女图片</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">save_photo</span><span class="token punctuation">(</span>src_title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    url <span class="token operator">=</span> src_title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    title <span class="token operator">=</span> src_title<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment" spellcheck="true"># 创建路径，避免重复下载</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"开始下载！！！"</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\高性能异步爬虫\\线程池\\异步爬虫爬取4K美女图片"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 发送请求，获取源码</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析，获取图片的下载地址的列表</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li/a/@href'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 存储最后的网址和标题的列表</span>    src_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    title_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 通过下载地址获取高清图片的地址和图片名称</span>    <span class="token keyword">for</span> href <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> href        <span class="token comment" spellcheck="true"># 再一次发送请求</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 再一次 xpath 解析</span>        new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        src_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        title <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 编译文字</span>        title <span class="token operator">=</span> title<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>        title_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 下载，保存。使用线程池</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    src_title <span class="token operator">=</span> zip<span class="token punctuation">(</span>src_list<span class="token punctuation">,</span> title_list<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>save_photo<span class="token punctuation">,</span> list<span class="token punctuation">(</span>src_title<span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>让我们来看看运行的结果</p><p><img src="https://img-blog.csdnimg.cn/2021051022075983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>只用了 17 秒，可不要小瞧这几秒，如果数据太大，这些差距后来就会更大了。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不过我们必须要明白 线程池 是有上限的，这就是说数据太大，线程池的效率也会降低，所以这就要用到协程模块了。</p><p>欲知协程如何，且听下回分解。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——识别验证码（2）</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-2/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-2/</url>
      
        <content type="html"><![CDATA[<h2 id="模拟登录人人网"><a href="#模拟登录人人网" class="headerlink" title="模拟登录人人网"></a>模拟登录人人网</h2><p>前面我们学习了使用第三方平台实现验证码的识别，那现在就让我们来用验证码的识别实现人人网的登录。</p><p>首先我们先到人人网的登录页面去踩点。</p><p><img src="https://img-blog.csdnimg.cn/20210503195009957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>人人网登录在三次失败后需要输入验证码，那我们现在需要做的就是通过数据解析将验证码保存到本地（为了更好的使用第三方验证码识别平台）。</p><p>有了验证码之后，我们又要怎么通过爬虫实现登录呢？首先我们打开抓包工具，看看登陆时会发生什么。</p><p><img src="https://img-blog.csdnimg.cn/20210503201139254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>首先我们先点击那个禁止符号的符号，将数据清空，然后再点击 “ preserve log ”，然后我们再实现登录。</p><p><img src="https://img-blog.csdnimg.cn/20210503201520822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这里有一个 login 的文件，我们点开它。</p><p><img src="https://img-blog.csdnimg.cn/20210503201643494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现这个文件的 data 一栏里的 icode 是我们输入的验证码，那么我们就有理由怀疑这一栏需要动态改变的就是 icode 这一栏，这就是说我们前面保存的验证码在这里就有用武之地。</p><p>分析结束，就开始写代码了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">base64_api</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> img<span class="token punctuation">,</span> typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b64 <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> uname<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> pwd<span class="token punctuation">,</span><span class="token string">"typeid"</span><span class="token punctuation">:</span>typeid<span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> b64<span class="token punctuation">}</span>    result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://api.ttshitu.com/predict"</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    src <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="verifyPic_login"]/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 验证码网址</span>    <span class="token comment" spellcheck="true"># 保存验证码</span>    photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./验证码.jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>    img_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\验证码识别\\验证码.jpg"</span>    result <span class="token operator">=</span> base64_api<span class="token punctuation">(</span>uname<span class="token operator">=</span><span class="token string">'账号'</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span> img<span class="token operator">=</span>img_path<span class="token punctuation">,</span> typeid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 登录网址</span>    url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=20214120314"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"15157485037"</span><span class="token punctuation">,</span>        <span class="token string">"icode"</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span>        <span class="token string">"origURL"</span><span class="token punctuation">:</span> <span class="token string">"http://www.renren.com/home"</span><span class="token punctuation">,</span>        <span class="token string">"domain"</span><span class="token punctuation">:</span> <span class="token string">"renren.com"</span><span class="token punctuation">,</span>        <span class="token string">"key_id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"captcha_type"</span><span class="token punctuation">:</span> <span class="token string">"web_login"</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"8a62222be07c2cf68e8d68f4617fe01d7dbc488427d0bc61666ab8a6e56e94f0"</span><span class="token punctuation">,</span>        <span class="token string">"rkey"</span><span class="token punctuation">:</span> <span class="token string">"07a9f1810ecf9b507634a45447a628e7"</span><span class="token punctuation">,</span>        <span class="token string">"f"</span><span class="token punctuation">:</span> <span class="token string">"http%3A%2F%2Fwww.renren.com%2F976706166%2Fprofile"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 模拟登录</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断登录状态。 200 说明登录成功</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>我们看一下运行结果</p><p><img src="https://img-blog.csdnimg.cn/20210503204354483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>说明登录成功。</p><p>注意：</p><p>我们一般用这种方法判断是否登录，其实也可以保存页面来判断，但有一些网站登录成功后返回的并非是网页而是 json 串，所以我们通常用 status code 来判断是否成功，200 表示和网页连接成功。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 爬虫识别验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事，必先利其器——识别验证码（1）</title>
      <link href="/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-1/"/>
      <url>/2022/11/21/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-shi-bie-yan-zheng-ma-1/</url>
      
        <content type="html"><![CDATA[<h2 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h2><p>我们使用爬虫时很有可能需要登录，而现在的平台登陆时都需要验证码才能完成登录，所以我们使用爬虫模拟登录时验证码是必须要跨过的坎。一般情况下，我们使用第三方平台实现验证码的识别。</p><p>所以我在这里介绍一个识别验证码的平台——图鉴（比较常见的有超级鹰，反正其实这些平台注册、使用流程都差不多）。</p><p>首先我们打开图鉴的网址 “ <a href="http://www.ttshitu.com/">http://www.ttshitu.com/</a> ”，点击注册</p><p><img src="https://img-blog.csdnimg.cn/20210502163426391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210502163508464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>登录成功后，我们首先看一下“价格”，其实也可以在注册帐号前看一看价格，再决定是否注册。在登陆后，因为识别验证码需要登录，所以我们在使用前要确定自己的帐号里是否还有余额。我觉得这些平台的充值还是挺人性化的，，是允许我们在平台上充值一块五毛的。</p><p>我们的账号里有钱了，然后再打开开发文档。因为我们使用的是python，所以我们选择python的开发文档</p><p><img src="https://img-blog.csdnimg.cn/20210502164158248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210502164255701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>将第一个脚本复制下来，用 IDLE 打开，我们看到代码部分的注释是提示我们 typeid 的参数选择。</p><p>在我们开始分析代码，代码自定义了一个函数，这个函数我们不需要看懂，重要的是下面的主程序，我们需要改的是我上面圈起来的部分，也就是运行程序时需要输入验证码的保存路径（也就是说我们需要将验证码先保存到本机），需要在程序中输入我们图鉴的账号和密码。</p><p>我这里有一张验证码，现在就让我们试试图鉴的脚本</p><p><img src="https://img-blog.csdnimg.cn/20210502164849608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">base64_api</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> img<span class="token punctuation">,</span> typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b64 <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> uname<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> pwd<span class="token punctuation">,</span> <span class="token string">"typeid"</span><span class="token punctuation">:</span> typeid<span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> b64<span class="token punctuation">}</span>    result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://api.ttshitu.com/predict"</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    img_path <span class="token operator">=</span> <span class="token string">"C:\\Users\\ASUS\\Desktop\\验证码.jpg"</span> <span class="token comment" spellcheck="true"># 这里填写验证码的路径</span>    result <span class="token operator">=</span> base64_api<span class="token punctuation">(</span>uname<span class="token operator">=</span><span class="token string">'账号'</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span> img<span class="token operator">=</span>img_path<span class="token punctuation">,</span> typeid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 因为验证码里有数字和中文，我们 typeid 选择 3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>结果如下</p><p><img src="https://img-blog.csdnimg.cn/20210502165649844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后我们回到图鉴网站个人中心看看，结果如下</p><p><img src="https://img-blog.csdnimg.cn/20210502165922741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>注意：<br>验证码的识别正确率并不是 100% 的，有时需要多次识别</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 爬虫识别验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（4）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-4/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-4/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取全国的城市名称以及“或”的简单介绍"><a href="#爬取全国的城市名称以及“或”的简单介绍" class="headerlink" title="爬取全国的城市名称以及“或”的简单介绍"></a>爬取全国的城市名称以及“或”的简单介绍</h2><p>首先是爬取全国城市名称</p><p>网址如下：<a href="https://www.aqistudy.cn/historydata/">https://www.aqistudy.cn/historydata/</a></p><p>我们打开网页进行简单的数据分析</p><p><img src="https://img-blog.csdnimg.cn/20210501164316716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现我们需要爬取的名称都在 li 标签里。根据这个我们可以很简单地写我们的代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.aqistudy.cn/historydata/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析。热门城市名称爬取</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    hot_city_name_li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="hot"]//li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 热门城市名称的 li 标签的列表</span>    hot_city_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> hot_city_name_li_list<span class="token punctuation">:</span>        hot_city_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hot_city_name<span class="token punctuation">,</span> len<span class="token punctuation">(</span>hot_city_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># xpath 解析。全部城市名称爬取</span>    all_city_li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="all"]//li'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 全部城市名称的 li 标签的列表</span>    all_city_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> all_city_li_list<span class="token punctuation">:</span>        all_city_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>all_city_name<span class="token punctuation">,</span> len<span class="token punctuation">(</span>all_city_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>看一下我们的运行结果</p><p><img src="https://img-blog.csdnimg.cn/20210501174210248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>我们这里爬取的名称是所有城市里包括热门城市的，要是不包括，我们要获取这些城市的名称，难道要把两个列表直接加起来吗？虽然不是不行，但实际上还是多写了几行代码的。</p><p>所以在这里介绍一下 xpath 里面的 “或”（“|”）和 “or” 的作用一样</p><p>闲话少说，直接看代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agnet"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.aqistudy.cn/historydata/"</span>        <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析。“|”的使用</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    city_name <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="hot"]//li/a/text() | //div[@class="all"]//li/a/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>city_name<span class="token punctuation">,</span> len<span class="token punctuation">(</span>city_name<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行一下</p><p><img src="https://img-blog.csdnimg.cn/20210501175310824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>名称个数正好是 394 &#x3D; 384 + 10</p><p>xpath 的 “或” 你学会了吗？</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（3）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-3/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-3/</url>
      
        <content type="html"><![CDATA[<p>什么？我怎么又讲爬取图片？拜托，这可是 4k 图片，清晰度杠杠的。再说，爬取糗图算什么本事，做人要爬取的肯定是妹子图片，而且是 4k 的妹子图片，是不是很激动？放心，这次不晃你。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>首先让我们打开网页，好好欣赏一下美丽的妹子……哦不，我是说，好好的欣赏一下优美的网页源码。网址如下：<a href="https://pic.netbian.com/4kmeinv/">https://pic.netbian.com/4kmeinv/</a></p><p><img src="https://img-blog.csdnimg.cn/20210427102805472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>看，是不是优美的妹子？……额咳咳，我是说优美的源码。</p><p>很好，我们注意一下定位到的源码数据，也就是我圈的地方，这里有图片的网址和图片的标题。我们就把原标题作为我们下载后的标题。注意，这里的网址没有域名，是需要我们自己加的，也就是 “<a href="https://pic.netbian.com”./">https://pic.netbian.com”。</a></p><p>欧克，是不是迫不及待了，让我们和小姐姐更进一步吧，咳咳，我是说，不说了，你懂的！</p><h1 id="文字编译"><a href="#文字编译" class="headerlink" title="文字编译"></a>文字编译</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定网址</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_url_ist<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果测试的时候发现不对了，我们的标题全都变成乱码了<br><img src="https://img-blog.csdnimg.cn/20210427104018346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>再一看，哦，我们太激动忘记编译了，赶紧编译一下。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定网址</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encode <span class="token operator">=</span> <span class="token string">"utf-8"</span>    response <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这回总该可以了吧，再一看，怎么回事，还是乱码。<br><img src="https://img-blog.csdnimg.cn/20210427104924212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这是为什么？难道说所谓的 4k 美女图片只可远观不可亵玩吗？我不相信，赶紧去研究研究。正所谓，“X 是第一生产力”，我很快就研究出结果了，一般情况下，如果源码里有中文，我们可以有两种办法。一种是我们用的方法，另一种方法如下：</p><pre class=" language-python"><code class="language-python">response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span></code></pre><p>我们再试一次</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定网址</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_url_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>测试一下<br><img src="https://img-blog.csdnimg.cn/20210427112301876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>欧克，是中文了，接着可以爬取4k妹子图片了。</p><h1 id="爬取妹子图"><a href="#爬取妹子图" class="headerlink" title="爬取妹子图"></a>爬取妹子图</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻三页</span>        <span class="token comment" spellcheck="true"># 指定网址</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/index_%s.html"</span> <span class="token operator">%</span> index        <span class="token comment" spellcheck="true"># 获取源码</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        new_url_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@src'</span><span class="token punctuation">)</span>        title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li/a/img/@alt'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 测试</span>        <span class="token comment" spellcheck="true"># print(new_url_list)</span>        <span class="token comment" spellcheck="true"># print()</span>        <span class="token comment" spellcheck="true"># print(title_list)</span>        <span class="token comment" spellcheck="true"># print(len(title_list) == len(new_url_list))</span>        num <span class="token operator">=</span> len<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_url_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            title <span class="token operator">=</span> title_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 保存</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>完成后，我们激动地打开图片，滚烫的热血突然就冷下来了，不是说是4k高清图吗，怎么不仅是缩略图，而且画质还不行。</p><p><img src="https://img-blog.csdnimg.cn/20210427161904231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>别着急，这可不是我骗你，是网址留了一手。</p><h1 id="爬取真正的4k妹子图"><a href="#爬取真正的4k妹子图" class="headerlink" title="爬取真正的4k妹子图"></a>爬取真正的4k妹子图</h1><p>现在我们知道了网址源码里的网址是缩略图，那么我们怎么办呢？很简单，我们点击一下会怎样？</p><p><img src="https://img-blog.csdnimg.cn/20210427162913212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>然后我们来到了下载页面。</p><p><img src="https://img-blog.csdnimg.cn/20210427162227702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>现在我们没有任何办法，那就试着看看现在的网页源码好了。</p><p>结果我们发现了两个图片的地址，点开，发现一个是缩略图，一个是4k妹子图。如图。</p><p><img src="https://img-blog.csdnimg.cn/20210427162537689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>是不是又感觉热血沸腾了？嘿嘿</p><p>闲话少说，赶紧改进代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片(4k)"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片(4k)"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻三页</span>        <span class="token comment" spellcheck="true"># 指定网址</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kmeinv/index_%s.html"</span> <span class="token operator">%</span> index        <span class="token comment" spellcheck="true"># 获取源码</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        response <span class="token operator">=</span> response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># li 标签所在的列表，下载页面的网址在 li 标签内</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 获取下载页面的网址</span>            new_url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 获取下载页面的网页源码</span>            new_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text            new_response <span class="token operator">=</span> new_response<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 编译文字</span>            <span class="token comment" spellcheck="true"># xpath 解析</span>            new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>new_response<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 下载的地址</span>            src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 图片标题</span>            title <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="img"]/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 获取图片</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 保存</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\爬取 4k 图片\\4k图片(4k)\\"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载成功！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>运行结束了，赶紧打开照片看一看，很好，这次真的是4k妹子图片了。</p><p><img src="https://img-blog.csdnimg.cn/2021042716474955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（2）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-2/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-2/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取二手房信息"><a href="#爬取二手房信息" class="headerlink" title="爬取二手房信息"></a>爬取二手房信息</h2><p>说到二手房信息，不知道你们心里最先跳出来的公司（网站）是什么，反正我心里第一个跳出来的是网站是 58 同城。哎呦，我这暴脾气，想到就赶紧去干。</p><p>但很显然，我失败了。说显然，而不是不幸，这是因为 58 同城是大公司，我这点本事爬不了数据是再正常不过的了。下面来看看 58 同城的反爬手段了。这是我爬取下来的网页源码。</p><p><img src="https://img-blog.csdnimg.cn/20210425210918311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们看到爬取下来的源码有很多英文大写字母和数字是网页源码中没有的，后来我了解到 58 同城对自己的网站的源码进行了文本加密，所以就出现了我爬取到的情况。</p><p>然后我再打开 58 同城的 robots 协议。</p><p><img src="https://img-blog.csdnimg.cn/20210425211451911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>好家伙，不愧是大公司，所有的动态网址都不让爬取，打扰了。我只好转头离开，去寻找可以让我这种小白爬取的二手房网站。于是我找到了这个网站<a href="https://bj.c21.com.cn/ershoufang/">https://bj.c21.com.cn/ershoufang/</a> 不知道是我的原因，还是别的原因，反正我是没有找到这个网站的 robots 协议。不管了，既然没找到，就默认没有吧，直接开始爬取。</p><p>我本来打算通过二手房的目录跳到一个具体信息，然后爬取二手房的一些基本信息和属性。</p><p><img src="https://img-blog.csdnimg.cn/20210425213046811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210425213052882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>像我红笔圈起来的部分。但很可惜我失败了，后来我看了看红笔圈起来的部分的爬取到的源码。</p><p><img src="https://img-blog.csdnimg.cn/20210425213736240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>好家伙，还可以这样。不过这怎么可以难倒机智的我？（其实我真不知道怎么解决它）。没关系，之前的源码里不是有类似的信息吗？我只好将就一下了。</p><p><img src="https://img-blog.csdnimg.cn/20210425213956189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后是翻页。翻页问题很好解决，我们很快就发现网页都是 <a href="https://bj.c21.com.cn/ershoufang/pg2/">https://bj.c21.com.cn/ershoufang/pg2/</a><br>其中的页数和 pg 后面的数字有关。</p><p>然后就是分析这些数据源码的位置了。</p><p><img src="https://img-blog.csdnimg.cn/20210426161416707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>首先，我们发现我们要爬取的数据全在 li 标签里，所以我们可以先获得 li 标签的列表。伪代码就像这样。</p><pre class=" language-python"><code class="language-python">form lxml <span class="token keyword">import</span> etree……   ……tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>源码<span class="token punctuation">)</span>li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span> li 标签的路径<span class="token punctuation">)</span></code></pre><p>这时候我们获得的就是 li 标签的 etree 的类，可以继续使用 etree 类里的函数。然后我们就可以利用 for 循环提出不同房源的 li 标签，根据自己的需要获取文本信息。</p><p>欧克，了解了这些（感觉源码前前后后就是四个字 ”我是菜鸡“ ）我们就可以开始写代码了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> re<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> pg <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        <span class="token comment" spellcheck="true"># 指定 url</span>        url <span class="token operator">=</span> <span class="token string">"https://bj.c21.com.cn/ershoufang/pg%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>pg<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取网页源码</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="availability"]/li'</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 房子的名称</span>            <span class="token comment" spellcheck="true"># print(title[0]) # 测试</span>            add <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div/p//a/text()'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 地址</span>            add <span class="token operator">=</span> add<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token operator">+</span> add<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 地址范围由大到小</span>            <span class="token comment" spellcheck="true"># print(add) # 测试</span>            div_list <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div[2]/div'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 具体信息</span>            message_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"建筑面积"</span><span class="token punctuation">,</span> <span class="token string">"房屋户型"</span><span class="token punctuation">,</span> <span class="token string">"房屋朝向"</span><span class="token punctuation">,</span> <span class="token string">"所在楼层"</span><span class="token punctuation">,</span> <span class="token string">"装修情况"</span><span class="token punctuation">,</span> <span class="token string">"建成时间"</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                div <span class="token operator">=</span> div_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                message <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                message <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"\s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 因为发现获取的文本有很多换行符和空格，所以需要去掉</span>                message <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"\\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>                message_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> message_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> message            <span class="token comment" spellcheck="true"># print(message_list) # 测试</span>            <span class="token comment" spellcheck="true"># 交通情况</span>            traffic <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div[4]//text()'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(traffic) # 测试</span>            <span class="token comment" spellcheck="true"># 价格情况</span>            price <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[2]/div[3]//text()'</span><span class="token punctuation">)</span>            price <span class="token operator">=</span> price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> price<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(price) # 测试</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\二手房\\"</span> <span class="token operator">+</span> <span class="token string">"二手房.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> message <span class="token keyword">in</span> message_list<span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>message <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> traffic <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"交通情况：无介绍"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"交通情况："</span> <span class="token operator">+</span> traffic<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"价格："</span> <span class="token operator">+</span> price <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>最后的运行结果就像这样<br><img src="https://img-blog.csdnimg.cn/20210426162555822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="保存的二手房信息"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——xpath（1）</title>
      <link href="/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-1/"/>
      <url>/2022/11/21/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-xpath-1/</url>
      
        <content type="html"><![CDATA[<h1 id="xpah-的语法认识"><a href="#xpah-的语法认识" class="headerlink" title="xpah 的语法认识"></a>xpah 的语法认识</h1><p>闲话少说，直接上图<br><img src="https://img-blog.csdnimg.cn/20210424210554393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="xpath 介绍"></p><h1 id="xpath-爬取图片"><a href="#xpath-爬取图片" class="headerlink" title="xpath 爬取图片"></a>xpath 爬取图片</h1><p>代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图（xpath）"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图（xpath）"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        <span class="token comment" spellcheck="true"># 指定url</span>        url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取源码</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># xpath 解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        src_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="thumb"]/a/img/@src'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(src_list) # 测试定位是否有错误</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> src_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 新的url</span>            new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> src            <span class="token comment" spellcheck="true"># 获取图片</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span>new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 存储</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./糗图（xpath）/"</span> <span class="token operator">+</span> title<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载成功！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><h1 id="xpath-爬取三国演义"><a href="#xpath-爬取三国演义" class="headerlink" title="xpath 爬取三国演义"></a>xpath 爬取三国演义</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url </span>    url <span class="token operator">=</span> <span class="token string">"http://sanguo.5000yan.com/"</span>    <span class="token comment" spellcheck="true"># 获取源码</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span>header<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span> <span class="token comment" spellcheck="true"># 编译源码，防止乱码</span>    response <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># xpath 解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    src_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="sidamingzhu-list-mulu"]//li[@class="menu-item"]/a/@href'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(src_list) # 测试是否正确</span>    title_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="sidamingzhu-list-mulu"]//li[@class="menu-item"]/a/text()'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(title_list) # 测试是否正确</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>src_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 指定新的url</span>        new_url <span class="token operator">=</span> src_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        title <span class="token operator">=</span> title_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 获取新的网页源码</span>        page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>        page_text<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>        page_text <span class="token operator">=</span> page_text<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># xpath 解析</span>        new_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        page <span class="token operator">=</span> new_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//section[@class="section-body"]//div[@class="grap"]//text()'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 存储</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\CSDN\\数据解析\\xpath\\三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n\n"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> page<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载成功！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——bs4</title>
      <link href="/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-bs4/"/>
      <url>/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-bs4/</url>
      
        <content type="html"><![CDATA[<h2 id="简单地使用bs4实现数据解析"><a href="#简单地使用bs4实现数据解析" class="headerlink" title="简单地使用bs4实现数据解析"></a>简单地使用bs4实现数据解析</h2><p>因为正则表达式本身有难度，所以在这里为大家介绍一下 bs4 实现数据解析。除此之外还有 xpath 解析。因为 xpath 不仅可以在 python 中使用，所以 bs4 和 正则解析一样，仅仅是简单地写两个案例（爬取可翻页的图片，以及爬取三国演义）。以后的重点会在 xpath 上。</p><p>闲话少说，我们先来安装 bs4 相关的外来库。比较简单，首先打开 cmd 命令面板，依次安装bs4 和 lxml。 命令分别是 pip install bs4 和 pip install lxml 。 安装完成后我们可以试着调用他们，看看会不会报错。因为本人水平有限，所以如果出现报错，兄弟们还是百度一下好啦。（总不至于 cmd 命令打错了吧 ~~） </p><p>闲话少说，先简单介绍一下 bs4 的用法。</p><p><img src="https://img-blog.csdnimg.cn/2021042418453326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210424184537952.png"></p><h2 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图（bs4）"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图（bs4）"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取源码数据</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 数据解析</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        data_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".thumb > a"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            url <span class="token operator">=</span> data<span class="token punctuation">.</span>img<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span>            title <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> url            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 存储</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./糗图（bs4）/"</span> <span class="token operator">+</span> title<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><h2 id="爬取三国演义"><a href="#爬取三国演义" class="headerlink" title="爬取三国演义"></a>爬取三国演义</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># URL</span>    url <span class="token operator">=</span> <span class="token string">"http://sanguo.5000yan.com/"</span>    <span class="token comment" spellcheck="true"># 请求命令</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    page_text<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>    page_text <span class="token operator">=</span> page_text<span class="token punctuation">.</span>text    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page_text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># bs4 解析</span>    li_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".sidamingzhu-list-mulu > ul > li"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>        new_url <span class="token operator">=</span> li<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 新的请求命令</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>        response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>        new_page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text        new_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>new_page_text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> new_soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> class_ <span class="token operator">=</span> <span class="token string">"grap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> page<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——正则解析（2）</title>
      <link href="/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-2/"/>
      <url>/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-2/</url>
      
        <content type="html"><![CDATA[<h1 id="上一篇的翻页爬取图片代码"><a href="#上一篇的翻页爬取图片代码" class="headerlink" title="上一篇的翻页爬取图片代码"></a>上一篇的翻页爬取图片代码</h1><p>话不多说，直接上代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图（翻页）"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图（翻页）"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%s/"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我们观察不同页数的网址会发现不同页数的网址的差异在于最后的数字</span>        <span class="token comment" spellcheck="true"># 发送请求</span>        page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 正则解析</span>        ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb">.*?&lt;img src="(.*?)" alt=".*?&lt;/div>'</span>        data_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(data_list) # 试着打印看看这是不是我们需要的东西</span>        <span class="token comment" spellcheck="true"># 指定图片的 url</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> i            title <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            path <span class="token operator">=</span> <span class="token string">"./糗图（翻页）/"</span> <span class="token operator">+</span> title                        <span class="token comment" spellcheck="true"># 发送请求</span>            photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment" spellcheck="true"># 保存</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><h1 id="爬取《三国演义》"><a href="#爬取《三国演义》" class="headerlink" title="爬取《三国演义》"></a>爬取《三国演义》</h1><p>爬取图片难道就可以满足我们了吗？俗话说的好，书中自有黄金屋，书中自有颜如玉。只爬取妹子图怎么可以满足我？要来就干票大的，钱和美女我都要！！！那么说来就来，就让我们来爬取《三国演义》吧。</p><p>首先我们打开《三国演义》的目录发现所有的章节都是一个超链接，所以我们需要对该网址进行数据解析，得到所有章节的url，然后对新的 url 进行数据解析，得到网址中的所有文本信息。</p><p><img src="https://img-blog.csdnimg.cn/20210424161705238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210424161717254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>思路比较简单，了解之后，就可以直接写代码了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"http://sanguo.5000yan.com/"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span> <span class="token comment" spellcheck="true"># 编译源码，不然我们得到的就是一些乱码</span>    page <span class="token operator">=</span> page<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 正则解析</span>    ex <span class="token operator">=</span> <span class="token string">'&lt;li .*? href="(.*?)">(.*?)&lt;/a>&lt;/li>'</span>    new_url_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(new_url_list) # 测试是否为我们要的 url</span>    <span class="token keyword">for</span> new_url <span class="token keyword">in</span> new_url_list<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> new_url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        new_page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>        new_page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span> <span class="token comment" spellcheck="true"># 编译源码，不然我们得到的就是一些乱码</span>        new_page <span class="token operator">=</span> new_page<span class="token punctuation">.</span>text        ex <span class="token operator">=</span> <span class="token string">'&lt;div>(.*?)&lt;/div>'</span>        page_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> new_page<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 存储</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">if</span> title <span class="token operator">==</span> <span class="token string">"第一回 宴桃园豪杰三结义 斩黄巾英雄首立功"</span><span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 因为我们用正则表达式得到的数据里有超链接，所以我们需要把这些都替换掉</span>        <span class="token keyword">for</span> sencetence <span class="token keyword">in</span> page_text<span class="token punctuation">:</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&lt;.*?>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;mdash;"</span><span class="token punctuation">,</span> <span class="token string">"—"</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;ldquo;"</span><span class="token punctuation">,</span> <span class="token string">"“"</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;rdquo;"</span><span class="token punctuation">,</span> <span class="token string">"”"</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>            sencetence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"\s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sencetence<span class="token punctuation">)</span>                        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./三国演义.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                <span class="token keyword">if</span> sencetence <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> sencetence<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span></code></pre><p>运行结束后，我们打开文件，结果如下。</p><p><img src="https://img-blog.csdnimg.cn/20210424170658526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰冻三尺，非一日之寒。数据解析——正则解析（1）</title>
      <link href="/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-1/"/>
      <url>/2022/11/20/bing-dong-san-chi-fei-yi-ri-zhi-han-shu-ju-jie-xi-zheng-ze-jie-xi-1/</url>
      
        <content type="html"><![CDATA[<h2 id="正则解析爬取图片"><a href="#正则解析爬取图片" class="headerlink" title="正则解析爬取图片"></a>正则解析爬取图片</h2><p>因为讲的是正则解析，而不是正则表达式，所以我就默认大家会正则表达式了。最多在这里给大家看一下正则的语法。</p><p><img src="https://img-blog.csdnimg.cn/20210420193405429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这也是我从B站上截图截下来的。因为我自己都是学的半懂不懂的，实在没那脸说在这里讲正则表达式怎么写。</p><p>如果感觉学不会怎么办？没事，我们 python 的数据解析有正则解析、bs4解析和 xpath 解析。总有一款适合你。（这些后面都会讲到）</p><p>言归正传，什么是数据解析，在我看来，数据解析简单来说就是分析网页的源代码。</p><p>还记得像套娃一样的药监局吗？我似乎说过可以通过数据解析解决。欧克，那就让我们看一下，数据解析这么解决这个问题。</p><p>先点击左边圈起来的有鼠标样式的按键，将它移到我们的公司超链接上单击。神奇的事情发生了。<br><img src="https://img-blog.csdnimg.cn/20210420194645235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210420194844157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们看到了一个网址，我们直接点击网址看看会发生什么。</p><p><img src="https://img-blog.csdnimg.cn/20210420194952502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>哦豁，我们来到了这个页面，然后我们重复的步骤，将鼠标移到我们要爬取的数据上单击，然后我们就在网页上看到了我们要爬取的文本。</p><p><img src="https://img-blog.csdnimg.cn/20210420195144448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>那我们是不是只要爬取我们在网页源码上看到的文本就可以了。是不是很简单？你要套娃？我直接开拆，是不是很有趣？</p><p>那我们前面学的 requests 模块是不是没什么用？</p><p>当然不是，爬取整张网页不是 requests 简单吗？再说就算有数据解析，有时候也不见得简单。比如说百度翻译，你可以试试用数据解析爬取，相信我，还不如分析它的 XHR 。</p><p>当然我们今天不搞药监局，天天看文字，不得恶心？今天我们来爬取图片。嘿嘿嘿嘿，图片~。我们今天的目标是妹子，哦不，是糗图网（<a href="https://www.qiushibaike.com/imgrank/%EF%BC%89%E3%80%82">https://www.qiushibaike.com/imgrank/）。</a></p><p><img src="https://img-blog.csdnimg.cn/20210420200837255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>首先我们定位到一张图片，复制我们看到的链接，在前面加上 ” https: “ 会发现这就是我们需要的爬取东西。那么我们怎么爬取呢？很简单，在网页的源代码中查找。</p><p><img src="https://img-blog.csdnimg.cn/20210420201842147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>如果我们试着去定位多个图片的源码位置，我们会发现所有我们需要的数据都在标签<code>&lt;div class= &quot;thumb&quot;</code>下面的<code>&lt;img src</code>里面，这时候我们就可以发挥正则表达式的强大作用了。</p><p>话不多说，直接上代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果不存在这个文件，创建一个文件夹</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"./糗图"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"./糗图"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 url </span>    url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/"</span>    <span class="token comment" spellcheck="true"># 发送请求，获取网页源码</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 对源代码进行正则解析</span>    ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb".*?&lt;img src="(.*?)" alt=".*?&lt;/div>'</span>    data_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># re.S 是必要的，因为我们是要单行查找</span>    <span class="token comment" spellcheck="true"># print(data_list)  我们可以先打印看看是否符合要求</span>        <span class="token comment" spellcheck="true"># 在爬取到的内容前加上 “https:”形成新的 url</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> data        title <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 请求命令</span>        photo <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>content <span class="token comment" spellcheck="true"># conntent 命令是为了将爬取到的数据转换成数据流</span>        path <span class="token operator">=</span> <span class="token string">"./糗图/"</span> <span class="token operator">+</span> title        <span class="token comment" spellcheck="true"># 保存</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>photo<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">"下载完成！！！"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 给一个下载完成的提示</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>然后我们查看新建的文件夹</p><p><img src="https://img-blog.csdnimg.cn/20210420215110158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>这说明我们成功了。当然我们只爬取了一页网页的图片，如果我们要爬取动态的网页的图片要怎么做呢？</p><p>给个提示，观察一下第二页第三页网址的区别。</p><p>这不得自己试着写一下。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（6）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-6/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-6/</url>
      
        <content type="html"><![CDATA[<h1 id="药监局爬取"><a href="#药监局爬取" class="headerlink" title="药监局爬取"></a>药监局爬取</h1><p>是不是在看到 “ 药监局 ” 这三个字的时候，突然想到爬虫可能会进局子的事实？ 说到局子，我突然想到另一件事，因为前面写的是很基础的代码，没有代理池，所以在写的时候，特别是爬取翻页的时候，尽量减少爬取的页数，不然，额，后果自负。</p><p>开个玩笑，没什么大问题的，就是很有可能自己的 IP 会被对面拉入黑名单（目前学的代码而言）</p><p>欧克，言归正传，让我们回到药监局的爬取上吧。如果不出意外的话，这是 requests 模块的最后练习了，结束之后就是激动人心的数据解析了。</p><p>先说说药监局网站，我不清楚是因为我用的是学校局域网的原因，还是药监局网站本身的数据维护更新原因，我这边晚上八点半之后就打开不了药监局网站了。</p><p>闲话少说（其实说了很多），我们先打开药监局网站（<a href="http://scxk.nmpa.gov.cn:81/xk/%EF%BC%89%EF%BC%8C%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F%E3%80%82">http://scxk.nmpa.gov.cn:81/xk/），一探究竟。</a><br><img src="https://img-blog.csdnimg.cn/20210420150643122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>当我们随便点击一家企业时，得到的界面如下：</p><p><img src="https://img-blog.csdnimg.cn/20210420150720521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>而这些企业具体信息是我们今天要爬取的对象数据。</p><p>首先我们来爬取药监局的首页数据。<br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 URL</span>    url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 保存</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./药监局.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>然后我们打开保存的文件一看。<br><img src="https://img-blog.csdnimg.cn/20210420151921155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>唉，为什么，明明已经加载完成了，但我们看不到任何企业的信息？</p><p>别着急，让我们现在回到药监局的首页，打开抓包工具的 “ Network ” 分析一波（当然其实我们可以使用 数据解析 解决这个问题，但实际上我们还没学不是吗？）。欧克，回到抓包工具，点击 response。</p><p><img src="https://img-blog.csdnimg.cn/20210420152351636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后在按下 “ctrl” + “F”，开始查找</p><p><img src="https://img-blog.csdnimg.cn/20210420152537239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现网页源码上并没有 “海南” ， 但我们的公司名称里却有，这说明，我们对应的 url 并不能获取我们需要的数据，那么这些数据在哪里呢？不知道你们有没有想到我们前面提到过的 AJAX。好吧，既然我们没有别的办法，那就试试喽。</p><p>结果这一看真是不得了。</p><p><img src="https://img-blog.csdnimg.cn/20210420153033526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>response 里的 json 不就是我们想要的吗？赶紧兴奋地去在线解析一下<br><img src="https://img-blog.csdnimg.cn/20210420153306674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们会发现这些数据里面的 ID 特别显眼，然后再回到我们公司的具体信息的页面，一看，我的天呀，这是什么啊。<br><img src="https://img-blog.csdnimg.cn/20210420153703282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这不就是我们要的 url 里的动态部分吗？别太激动了，试验一下。</p><p><img src="https://img-blog.csdnimg.cn/20210420153841806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>一验证，发现果然如此，这不得仰天长啸一翻，天不亡我。</p><p>好了，既然得到了这些信息，我们是不是就可以写代码了吗？</p><p>当然你要写没有拦你，但你打开一看自己得到的数据或是网页，就会发现，结果和前面一样，没有任何数据。然后我们再一次重复上面的数据就会发现数据还是被保存在 XHR 的请求中，是不是特别想说一句 “ 禁止套娃 ”？</p><p>不管有多少脏话要骂，还是要写代码，唉，要不边写边骂？</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 指定 XHR 的 url</span>    url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList"</span>    <span class="token comment" spellcheck="true"># data</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"on"</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>        <span class="token string">"page"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"pageSize"</span><span class="token punctuation">:</span> <span class="token string">"15"</span><span class="token punctuation">,</span>        <span class="token string">"productName"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token string">"conditionType"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"applyname"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"applysn"</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 存储最后的 ID 数据</span>    id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 翻两页</span>        data<span class="token punctuation">[</span><span class="token string">"page"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送请求命令，获取 json 数据</span>        data_json <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 分析一下 json 数据的结构</span>        data_list <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">"list"</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            id_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 公司具体信息网页的 XHR 中的 url</span>    new_url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"5eb10afc74a2462c8e86652ec8d90a48"</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> ID <span class="token keyword">in</span> id_list<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ID        <span class="token comment" spellcheck="true"># 发送请求</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>new_url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这是一个json串，我们可以先在线解析，再保存我们想要的东西</span>        name <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">"epsName"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 保存</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">".公司信息.text"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"公司名称："</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"epsName"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"公司地址："</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"epsProductAddress"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"法定代表人："</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"legalPerson"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 提示</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"的信息下载完成！！！"</span><span class="token punctuation">)</span></code></pre><p>我们运行一下程序，结果如下：<br><img src="https://img-blog.csdnimg.cn/20210420190105233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>打开文件一看<br><img src="https://img-blog.csdnimg.cn/20210420190154657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（5）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-5/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-5/</url>
      
        <content type="html"><![CDATA[<h1 id="肯德基餐厅地址查询"><a href="#肯德基餐厅地址查询" class="headerlink" title="肯德基餐厅地址查询"></a>肯德基餐厅地址查询</h1><p>前面我们学习了破解百度翻译，知道了 AJAX 的工作原理和爬取，那么我们今天就来巩固我们的学习成果吧。</p><p>首先我们打开肯德基的官网，点击 “餐厅查询”<br><img src="https://img-blog.csdnimg.cn/20210418212331439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后是没有地址的网页，然后我们输入地址<br><img src="https://img-blog.csdnimg.cn/20210418212616822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210418212546441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现不论有没有搜索，网址都没有发生变化，这说明肯德基官网的地址查询是通过 AJAX 实现的，知道了这样一点我们就可以使用抓包工具进行分析了。</p><p>我们可以从抓包工具中找到请求的 url 和相对应的请求命令和数据类型。<br><img src="https://img-blog.csdnimg.cn/20210418214041202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210418214055199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210418231617567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>我们发现这是一个 json 串，我们还需要像上次破解百度翻译一样先把 json 串爬取下来，再在线解析吗？答案当然是否定的，我们可以在抓包工具的 response 中得到目前的 json，然后在线解析。</p><p><img src="https://img-blog.csdnimg.cn/20210418213447336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210418213609839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>欧克，那么我就可以开始写爬取肯德基餐厅地址的代码了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定 URL</span>    url <span class="token operator">=</span> <span class="token string">"http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword"</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 数据</span>    kd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"需要查询的地点："</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"cname"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"pid"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token string">"keyword"</span><span class="token punctuation">:</span> kd <span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 要搜索的地址</span>        <span class="token string">"pageIndex"</span><span class="token punctuation">:</span> <span class="token string">"1"</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 要爬取的网页的页码</span>        <span class="token string">"pageSize"</span><span class="token punctuation">:</span> <span class="token string">"10"</span> <span class="token comment" spellcheck="true"># 每一页的数量</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 爬取两页</span>        data<span class="token punctuation">[</span><span class="token string">"pageIndex"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">"Table1"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 存储</span>        <span class="token keyword">for</span> detail <span class="token keyword">in</span> page<span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./肯德基地址.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"storeName:"</span> <span class="token operator">+</span> detail<span class="token punctuation">[</span><span class="token string">"storeName"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"addressDetail:"</span> <span class="token operator">+</span> detail<span class="token punctuation">[</span><span class="token string">"addressDetail"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over!!!"</span><span class="token punctuation">)</span></code></pre><p>打开保存的文件如下</p><p><img src="https://img-blog.csdnimg.cn/20210418231504846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>说明爬取成功</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（4）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-4/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-4/</url>
      
        <content type="html"><![CDATA[<h1 id="“破解”百度翻译"><a href="#“破解”百度翻译" class="headerlink" title="“破解”百度翻译"></a>“破解”百度翻译</h1><p>翻译是一件麻烦的事情，如果可以写一个爬虫程序直接爬取百度翻译的翻译结果就好了，可当我打开百度翻译的页面，输入要翻译的词时突然发现不管我要翻译什么，网址都没有任何变化，那么百度翻译要怎么爬取呢？</p><p>爬取百度翻译之前，我们先要明白百度翻译是怎么在不改变网址的情况下实现翻译的。百度做到这一点是用 AJAX 实现的，简单地说，AJAX的作用是在不重新加载网页的情况下进行局部的刷新。</p><p>了解了这一点，那么我们要怎么得到 AJAX 工作时请求的URL呢？老规矩，使用抓包工具。步骤如下：</p><ol><li>在 “百度翻译” 页面右键，选择“Notework”</li><li>选择 “ XHR ”</li></ol><p><img src="https://img-blog.csdnimg.cn/2021041717220450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><ol start="3"><li>如果画面没有任何数据，可以试着输入要翻译的词，比如说我输入“dog”时，就发生了如下的变化</li></ol><p><img src="https://img-blog.csdnimg.cn/20210417172456378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们看到此时的 kw 是我要翻译的词，说明这是我们要找的东西。</p><p>（注意：我们发现其中有三个 sug ，我选的只是其中一个。如果我们全都带点开看，就会发现，他们的 kw 分别是：d 和 do。这是因为我打 dog 时一个单词一个单词打的，而 AJAX 是时时刷新。如果输入中文就不会出现这种情况。翻译中文时，我们找的也不是 sug 了，具体是什么，就看哪个包的 data 的值是我们要翻译的词。）</p><p>然后我们在回到上面，找到我们需要指定的 URL 、我们要选择的请求命令以及爬取到的数据的类型。</p><p><img src="https://img-blog.csdnimg.cn/2021041719215232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"></p><p>欧克，做到这里我们的前期准备就完成了，下面就可以开始着手写代码了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定 url</span>    url <span class="token operator">=</span> <span class="token string">"https://fanyi.baidu.com/sug"</span>    <span class="token comment" spellcheck="true"># 要翻译的词</span>    keyword <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"需要翻译的词："</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"kw"</span><span class="token punctuation">:</span> keyword        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><p>我们运行程序发现结果是这样的：<br><img src="https://img-blog.csdnimg.cn/2021041719410599.png"><br>因为请求到的数据比较短，所以我们比较容易地看出数据的结构是字典里有列表，列表里又有字典结构。如果比较长，我们可以使用在线 json 转换,转换后的数据是这样的</p><p><img src="https://img-blog.csdnimg.cn/20210417194625764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们只需要 dog 的释义，所以我们还可以对我们代码进行优化</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"v"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>注意：<br>关于 data 的字典，并不是说只需要 “ kw ”: dog, data 的字典里要存储的是抓包工具里 from data 里所有的值，如果没有值，那么相对应的值就是空字符串。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（3）</title>
      <link href="/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-3/"/>
      <url>/2022/11/20/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-3/</url>
      
        <content type="html"><![CDATA[<h1 id="简易网页搜集器（2）"><a href="#简易网页搜集器（2）" class="headerlink" title="简易网页搜集器（2）"></a>简易网页搜集器（2）</h1><p>前面我们学会了如何用 UA 伪装骗过服务器爬取我们想要的网页数据，不知道你们会不会和我一样在学会 UA 伪装的兴奋后突然想到另一个问题——就是我们爬取一个页面就要改一次 url 吗？</p><p>答案当然是否定的。</p><p>我们观察下面两个网址<br><img src="https://img-blog.csdnimg.cn/2021041616565422.png"><br><img src="https://img-blog.csdnimg.cn/20210416165736945.png"><br>一个显然易见的区别是我圈起来的部分，即“wd &#x3D; ”<br>那我就怀疑搜索不同的关键词，“wd” 都不同，那么是不是这么一回事呢？我们可以试试。</p><p>结果就像这样<br><img src="https://img-blog.csdnimg.cn/20210416170212646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>欧克，这就说明关键在于 “wd”的值，那么我们就可以根据这点写一个动态的URL</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 要搜索的内容</span>    kd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"百度一下，你就知道："</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?"</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"wd"</span><span class="token punctuation">:</span> kd        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># UA 伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span>kd<span class="token operator">+</span><span class="token string">".html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取数据成功！！！"</span><span class="token punctuation">)</span></code></pre><p>当然，url 还可以写成这样的</p><pre class=" language-python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?"</span> <span class="token operator">+</span> <span class="token string">"wd="</span> <span class="token operator">+</span> kd</code></pre><p>我们打开保存的文件，看看结果<br><img src="https://img-blog.csdnimg.cn/20210416172140334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这说明我们的代码没有问题，我们可以不改变代码实现关键词搜索爬取网页了</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（2）</title>
      <link href="/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-2/"/>
      <url>/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-2/</url>
      
        <content type="html"><![CDATA[<h1 id="简易网页搜集器"><a href="#简易网页搜集器" class="headerlink" title="简易网页搜集器"></a>简易网页搜集器</h1><p>前面我们已经学会了简单爬取浏览器页面的爬虫。但事实上我们的需求当然不是爬取搜狗首页或是B站首页这么简单，再不济，我们都希望可以爬取某个特定的有信息的页面。</p><p>不知道在学会了爬取之后，你有没有跟我一样试着去爬取一些搜索页面，比如说百度。像这样的页面</p><p><img src="https://img-blog.csdnimg.cn/20210415104803318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="要爬取的网页"></p><p>注意我红笔划的部分，这是我打开的网页。现在我希望能爬取这一页的数据，按我们前面学的代码，应该是这样写的：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定URL</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=93923645_hao_pg&amp;wd=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;rsv_spt=1&amp;oq=%25E7%2588%25AC%25E5%258F%2596%25E7%2599%25BE%25E5%25BA%25A6%25E9%25A6%2596%25E9%25A1%25B5&amp;rsv_pq=b233dcfd0002d2d8&amp;rsv_t=ccdbEuqbJfqtjnkFvevj%2BfxQ0Sj2UP88ixXHTNUNsmTa9yWEWTUEgxTta9r%2Fj3mXxDs%2BT1SU&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_sug3=8&amp;rsv_sug1=5&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=t&amp;inputT=1424&amp;rsv_sug4=1424"</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取数据</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./奥特曼.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取成功！！！"</span><span class="token punctuation">)</span></code></pre><p>然而打开我们保存的文件，发现结果跟我们想的不太一样<br><img src="https://img-blog.csdnimg.cn/20210415110105396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现我们保存的文件是一个空白的页面，这是为什么呢？</p><p>其实上我们把网址改成搜狗的可能或更直观一些（不知道为什么我这边的搜狗总是打不开，所以就用百度做例子，可以自己写写有关搜狗搜索的代码），同样的代码改成搜狗的网址结果是这样的</p><p><img src="https://img-blog.csdnimg.cn/20210415110721166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>我们发现其中有句话是 “ 网络中存在异常访问 ”，那么这句话是什么意思呢？这句话的意思就是说，搜狗或是百度注意到发送请求的是爬虫程序，而不是人工操作。</p><p>那么这其中的原理又是什么呢？简单来说，就是程序访问和我们使用浏览器访问是有区别的，被请求的服务器都是靠 user-agent 来判断访问者的身份，如果是浏览器就接受请求，否则就拒绝。这就是一个很常见的反爬机制。</p><p>那是不是我们就没有办法呢？非也~所谓魔高一尺，道高一丈。既然要识别 user-agent ，那么我们就让爬虫模拟 user-agent 好了。</p><p>在 python 中模拟输入数据或是 user-agent ，我们一般用字典<br>就这样子写：</p><pre class=" language-python"><code class="language-python">header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># user-agent 的值 是一个长字符串</span>    <span class="token punctuation">}</span></code></pre><p>那么  user-agent 的值又是怎么得到的呢？<br>    1. 打开任意网页，右键点击，选择“检查”<br><img src="https://img-blog.csdnimg.cn/20210415112140584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>    2. 选择“ Network ”（谷歌浏览器）（如果是中文，就选择 “网络” 这一项）<br><img src="https://img-blog.csdnimg.cn/20210415112339671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>    3. 如果发现点开是空白的，像这样，那就刷新网页<br>    <img src="https://img-blog.csdnimg.cn/2021041511261560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>    刷新后是这样的：<br>    <img src="https://img-blog.csdnimg.cn/20210415112717305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>然后随机选择红笔圈起来的一项，我们会看到这样的东西，然后在里面找到“user-agent”，把它的值复制下来就行了<br><img src="https://img-blog.csdnimg.cn/20210415113039196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>有了 “user-agent”， 我们在重新写我们的爬取网页的代码，就可以了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定URL</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=93923645_hao_pg&amp;wd=%E5%A5%A5%E7%89%B9%E6%9B%BC&amp;rsv_spt=1&amp;oq=%25E7%2588%25AC%25E5%258F%2596%25E7%2599%25BE%25E5%25BA%25A6%25E9%25A6%2596%25E9%25A1%25B5&amp;rsv_pq=b233dcfd0002d2d8&amp;rsv_t=ccdbEuqbJfqtjnkFvevj%2BfxQ0Sj2UP88ixXHTNUNsmTa9yWEWTUEgxTta9r%2Fj3mXxDs%2BT1SU&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_sug3=8&amp;rsv_sug1=5&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=t&amp;inputT=1424&amp;rsv_sug4=1424"</span>    <span class="token comment" spellcheck="true"># 模拟 “user-agent”，即 UA伪装</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"user-agent"</span> <span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># 复制的 user-agent 的值</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取数据</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./奥特曼(UA伪装).html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取成功！！！"</span><span class="token punctuation">)</span></code></pre><p>再次运行，然后打开文件<br><img src="https://img-blog.csdnimg.cn/20210415113826866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70"><br>这次成功了，说明我们的爬虫程序完美地骗过了服务器</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千里之行，始于足下。python 爬虫 requestes模块（1）</title>
      <link href="/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-1/"/>
      <url>/2022/11/19/qian-li-zhi-xing-shi-yu-zu-xia-python-pa-chong-requestes-mo-kuai-1/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫的流程："><a href="#爬虫的流程：" class="headerlink" title="爬虫的流程："></a>爬虫的流程：</h1><p>在开始学习爬虫，我们必须了解爬虫的流程框架。在我看来爬虫的流程大概就是三步，即不论我们爬取的是什么数据，总是可以把爬虫的流程归纳总结为这三步：</p><ol><li>指定 url， 可以简单的理解为指定要爬取的网址</li><li>发送请求。requests 模块的请求一般为 get 和 post</li><li>将爬取的数据存储</li></ol><h1 id="requests-模块的下载导入："><a href="#requests-模块的下载导入：" class="headerlink" title="requests 模块的下载导入："></a>requests 模块的下载导入：</h1><p>因为 requests 模块属于外部库，所以需要我们自己导入库</p><p>导入的步骤：</p><ol><li>右键Windows图标</li><li>点击“运行”</li><li>输入“cmd”打开命令面板</li><li>输入“pip install requests”,等待下载完成</li></ol><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210413165648257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_1,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210413165904237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="打开cmd"></p><p><img src="https://img-blog.csdnimg.cn/20210413165910162.png" alt="下载 requests 模块 "></p><p>如果还是下载失败，我的建议是”百度一下，你就知道“（我也是边学边写，是在是水平有限）</p><p>欧克，既然导入成功后我们就简单的来爬取一下搜狗的首页吧！<br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定url</span>    url <span class="token operator">=</span> <span class="token string">"https://www.sougou.com/"</span>    <span class="token comment" spellcheck="true"># 发起请求</span>    <span class="token comment" spellcheck="true"># get方法会返回一个响应数据</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取响应数据</span>    page_txt <span class="token operator">=</span> response<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># text返回一个字符串的响应数据</span>    <span class="token comment" spellcheck="true"># print(page_txt)</span>    <span class="token comment" spellcheck="true"># 存储</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./sougou.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_txt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取数据结束！！！"</span><span class="token punctuation">)</span></code></pre><p>我们打开保存的文件，如图<br><img src="https://img-blog.csdnimg.cn/2021041317282155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaUppZURlWWluWXU=,size_16,color_FFFFFF,t_70" alt="成功保存的网页"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/18/hello-world/"/>
      <url>/2022/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
